2021-02-25 16:48:38.025681,page-change,1,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    return False', 'traces': {}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    return root', 'traces': {}}}
2021-02-25 16:52:13.309300,search,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if (root.left == None and root.right == None): \n        return root.val == key\n    elif (root.val == key): \n        return True\n    return search(root.left, key) or search(root.right, key)', 'traces': {}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    return root', 'traces': {}}}
2021-02-25 16:52:55.642421,search,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if (root.left == None and root.right == None): \n        return root.val == key\n    elif (root.val == key): \n        return True\n    return search(root.left, key) or search(root.right, key)', 'traces': {}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    return root', 'traces': {}}}
2021-02-25 16:54:22.212144,search,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if (root == None):\n        return False\n    elif (root.left == None and root.right == None): \n        return root.val == key\n    elif (root.val == key): \n        return True\n    return search(root.left, key) or search(root.right, key)', 'traces': {}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    return root', 'traces': {}}}
2021-02-25 16:54:32.392126,search,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if (root == None):\n        return False\n    elif (root.left == None and root.right == None): \n        return root.val == key\n    elif (root.val == key): \n        return True\n    return search(root.left, key) or search(root.right, key)', 'traces': {}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    return root', 'traces': {}}}
2021-02-25 16:54:36.771284,search,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if (root == None):\n        return False\n    elif (root.left == None and root.right == None): \n        return root.val == key\n    elif (root.val == key): \n        return True\n    return search(root.left, key) or search(root.right, key)', 'traces': {}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    return root', 'traces': {}}}
2021-02-25 16:54:38.615954,search,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if (root == None):\n        return False\n    elif (root.left == None and root.right == None): \n        return root.val == key\n    elif (root.val == key): \n        return True\n    return search(root.left, key) or search(root.right, key)', 'traces': {}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    return root', 'traces': {}}}
2021-02-25 16:54:40.671524,search,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if (root == None):\n        return False\n    elif (root.left == None and root.right == None): \n        return root.val == key\n    elif (root.val == key): \n        return True\n    return search(root.left, key) or search(root.right, key)', 'traces': {}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    return root', 'traces': {}}}
2021-02-25 16:54:43.835218,search,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if (root == None):\n        return False\n    elif (root.left == None and root.right == None): \n        return root.val == key\n    elif (root.val == key): \n        return True\n    return search(root.left, key) or search(root.right, key)', 'traces': {}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    return root', 'traces': {}}}
2021-02-25 16:54:47.249416,search,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if (root == None):\n        return False\n    elif (root.left == None and root.right == None): \n        return root.val == key\n    elif (root.val == key): \n        return True\n    return search(root.left, key) or search(root.right, key)', 'traces': {}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    return root', 'traces': {}}}
2021-02-25 16:54:50.522244,search,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if (root == None):\n        return False\n    elif (root.left == None and root.right == None): \n        return root.val == key\n    elif (root.val == key): \n        return True\n    return search(root.left, key) or search(root.right, key)', 'traces': {}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    return root', 'traces': {}}}
2021-02-25 16:54:55.513934,search,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if (root == None):\n        return False\n    elif (root.left == None and root.right == None): \n        return root.val == key\n    elif (root.val == key): \n        return True\n    return search(root.left, key) or search(root.right, key)', 'traces': {}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    return root', 'traces': {}}}
2021-02-25 16:55:00.410083,search,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if (root == None):\n        return False\n    elif (root.left == None and root.right == None): \n        return root.val == key\n    elif (root.val == key): \n        return True\n    return search(root.left, key) or search(root.right, key)', 'traces': {}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    return root', 'traces': {}}}
2021-02-25 16:55:04.079093,search,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if (root == None):\n        return False\n    elif (root.left == None and root.right == None): \n        return root.val == key\n    elif (root.val == key): \n        return True\n    return search(root.left, key) or search(root.right, key)', 'traces': {}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    return root', 'traces': {}}}
2021-02-25 16:55:29.026046,search,check-correct,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if (root == None):\n        return False\n    elif (root.left == None and root.right == None): \n        return root.val == key\n    elif (root.val == key): \n        return True\n    return search(root.left, key) or search(root.right, key)', 'traces': {}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    return root', 'traces': {}}}
2021-02-25 16:55:31.060411,page-change,2,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if (root == None):\n        return False\n    elif (root.left == None and root.right == None): \n        return root.val == key\n    elif (root.val == key): \n        return True\n    return search(root.left, key) or search(root.right, key)', 'traces': {}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    return root', 'traces': {}}}
2021-02-25 17:01:22.572560,insert,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if (root == None):\n        return False\n    elif (root.left == None and root.right == None): \n        return root.val == key\n    elif (root.val == key): \n        return True\n    return search(root.left, key) or search(root.right, key)', 'traces': {}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    if (root.left == None and root.right == None): \n        if (root.val > key): \n            root.left = Node(key)\n        else: \n            root.right = Node(key)\n    elif (root.val > key): \n        return insert(root.left, key)\n    elif (root.val < key): \n        return insert(root.right, key) ', 'traces': {}}}
2021-02-25 17:01:30.697747,insert,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if (root == None):\n        return False\n    elif (root.left == None and root.right == None): \n        return root.val == key\n    elif (root.val == key): \n        return True\n    return search(root.left, key) or search(root.right, key)', 'traces': {}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    if (root.left == None and root.right == None): \n        if (root.val > key): \n            root.left = Node(key)\n        else: \n            root.right = Node(key)\n    elif (root.val > key): \n        return insert(root.left, key)\n    elif (root.val < key): \n        return insert(root.right, key) ', 'traces': {}}}
2021-02-25 17:06:09.113215,insert,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if (root == None):\n        return False\n    elif (root.left == None and root.right == None): \n        return root.val == key\n    elif (root.val == key): \n        return True\n    return search(root.left, key) or search(root.right, key)', 'traces': {}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    if (root.left == None and root.right == None): \n        if (root.val > key): \n            root.left = Node(key)\n        else: \n            root.right = Node(key)\n    elif (root.val > key):\n        if (root.left == None):\n            root.left = Node(key)\n        else:\n            return insert(root.left, key)\n    elif (root.val < key):\n        if (root.right == None):\n            root.right = Node(key)\n        else: \n            return insert(root.right, key) ', 'traces': {}}}
2021-02-25 17:06:16.220173,insert,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if (root == None):\n        return False\n    elif (root.left == None and root.right == None): \n        return root.val == key\n    elif (root.val == key): \n        return True\n    return search(root.left, key) or search(root.right, key)', 'traces': {}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    if (root.left == None and root.right == None): \n        if (root.val > key): \n            root.left = Node(key)\n        else: \n            root.right = Node(key)\n    elif (root.val > key):\n        if (root.left == None):\n            root.left = Node(key)\n        else:\n            return insert(root.left, key)\n    elif (root.val < key):\n        if (root.right == None):\n            root.right = Node(key)\n        else: \n            return insert(root.right, key) ', 'traces': {}}}
2021-02-25 17:07:58.866946,insert,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if (root == None):\n        return False\n    elif (root.left == None and root.right == None): \n        return root.val == key\n    elif (root.val == key): \n        return True\n    return search(root.left, key) or search(root.right, key)', 'traces': {}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    if (root.left == None and root.right == None): \n        if (root.val > key): \n            root.left = Node(key)\n            return root\n        root.right = Node(key)\n        return root; \n    elif (root.val > key):\n        if (root.left == None):\n            root.left = Node(key)\n            return root; \n        return insert(root.left, key)\n    elif (root.val < key):\n        if (root.right == None):\n            root.right = Node(key)\n            return root \n        return insert(root.right, key) ', 'traces': {}}}
2021-02-25 17:09:03.616682,insert,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if (root == None):\n        return False\n    elif (root.left == None and root.right == None): \n        return root.val == key\n    elif (root.val == key): \n        return True\n    return search(root.left, key) or search(root.right, key)', 'traces': {}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    temp = root\n    if (temp.left == None and temp.right == None): \n        if (temp.val > key): \n            temp.left = Node(key)\n            return root\n        temp.right = Node(key)\n        return root; \n    elif (temp.val > key):\n        if (temp.left == None):\n            temp.left = Node(key)\n            return root; \n        return insert(root.left, key)\n    elif (temp.val < key):\n        if (temp.right == None):\n            temp.right = Node(key)\n            return root \n        return insert(root.right, key) ', 'traces': {}}}
2021-02-25 17:09:40.692454,insert,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if (root == None):\n        return False\n    elif (root.left == None and root.right == None): \n        return root.val == key\n    elif (root.val == key): \n        return True\n    return search(root.left, key) or search(root.right, key)', 'traces': {}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    temp = root\n    if (temp.left == None and temp.right == None): \n        if (temp.val > key): \n            temp.left = Node(key)\n            return root\n        temp.right = Node(key)\n        return root; \n    elif (temp.val > key):\n        if (temp.left == None):\n            temp.left = Node(key)\n            return root; \n        return insert(temp.left, key)\n    elif (temp.val < key):\n        if (temp.right == None):\n            temp.right = Node(key)\n            return root \n        return insert(temp.right, key) ', 'traces': {}}}
2021-02-25 17:16:36.041550,insert,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if (root == None):\n        return False\n    elif (root.left == None and root.right == None): \n        return root.val == key\n    elif (root.val == key): \n        return True\n    return search(root.left, key) or search(root.right, key)', 'traces': {}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    temp = root\n    while True: \n        if (temp.right == None and temp.left == None): \n            if (root.val > key): \n                root.left = Node(key)\n                break\n            root.right = Node(key)\n            break\n        elif (temp.val > key):\n            if (temp.left == None):\n                temp.left = Node(key)\n                break\n            temp = temp.left \n        elif (temp.val < key):\n            if (temp.right == None):\n                temp.right = Node(key)\n                break\n            temp = temp.right\n    return root \n        ', 'traces': {}}}
2021-02-25 17:20:24.243946,insert,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if (root == None):\n        return False\n    elif (root.left == None and root.right == None): \n        return root.val == key\n    elif (root.val == key): \n        return True\n    return search(root.left, key) or search(root.right, key)', 'traces': {}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    temp = root\n    while True: \n        if (temp.right == None and temp.left == None): \n            if (root.val > key): \n                temp.left = Node(key)\n                break\n            temp.right = Node(key)\n            break\n        elif (temp.val > key):\n            if (temp.left == None):\n                temp.left = Node(key)\n                break\n            temp = temp.left \n        elif (temp.val < key):\n            if (temp.right == None):\n                temp.right = Node(key)\n                break\n            temp = temp.right\n    return root  \n        ', 'traces': {}}}
2021-02-25 17:20:40.893097,insert,check-correct,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if (root == None):\n        return False\n    elif (root.left == None and root.right == None): \n        return root.val == key\n    elif (root.val == key): \n        return True\n    return search(root.left, key) or search(root.right, key)', 'traces': {}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    temp = root\n    while True: \n        if (temp.right == None and temp.left == None): \n            if (root.val > key): \n                temp.left = Node(key)\n                break\n            temp.right = Node(key)\n            break\n        elif (temp.val > key):\n            if (temp.left == None):\n                temp.left = Node(key)\n                break\n            temp = temp.left \n        elif (temp.val < key):\n            if (temp.right == None):\n                temp.right = Node(key)\n                break\n            temp = temp.right\n    return root  \n        ', 'traces': {}}}
2021-02-25 17:21:59.347202,insert,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if (root == None):\n        return False\n    elif (root.left == None and root.right == None): \n        return root.val == key\n    elif (root.val == key): \n        return True\n    return search(root.left, key) or search(root.right, key)', 'traces': {}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    temp = root\n    while True: \n        if (temp.right == None and temp.left == None): \n            if (root.val > key): \n                temp.left = Node(key)\n                break\n            temp.right = Node(key)\n            break\n        elif (temp.val < key and temp.right.val > key):\n            tempNode = Node(key)\n            tempNode.right = temp.right\n            temp.right = tempNode\n            break\n        elif (temp.val > key):\n            if (temp.left == None):\n                temp.left = Node(key)\n                break\n            temp = temp.left \n        elif (temp.val < key):\n            if (temp.right == None):\n                temp.right = Node(key)\n                break\n            temp = temp.right\n    return root  \n        ', 'traces': {}}}
2021-02-25 17:22:29.627261,insert,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if (root == None):\n        return False\n    elif (root.left == None and root.right == None): \n        return root.val == key\n    elif (root.val == key): \n        return True\n    return search(root.left, key) or search(root.right, key)', 'traces': {}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    temp = root\n    while True: \n        if (temp.right == None and temp.left == None): \n            if (root.val > key): \n                temp.left = Node(key)\n                break\n            temp.right = Node(key)\n            break\n        elif (temp.val > key):\n            if (temp.left == None):\n                temp.left = Node(key)\n                break\n            temp = temp.left \n        elif (temp.val < key):\n            if (temp.right == None):\n                temp.right = Node(key)\n                break\n            temp = temp.right\n    return root  \n        ', 'traces': {}}}
2021-02-25 17:24:48.784609,insert,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if (root == None):\n        return False\n    elif (root.left == None and root.right == None): \n        return root.val == key\n    elif (root.val == key): \n        return True\n    return search(root.left, key) or search(root.right, key)', 'traces': {}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    temp = root\n    while True: \n        if (temp.right == None and temp.left == None): \n            if (root.val > key): \n                temp.left = Node(key)\n                break\n            temp.right = Node(key)\n            break\n        elif (temp.val > key):\n            if (temp.left == None):\n                temp.left = Node(key)\n                break\n            temp = temp.left \n        elif (temp.val < key):\n            if (temp.right == None):\n                temp.right = Node(key)\n                break\n            temp = temp.right\n    return root  \n        ', 'traces': {}}}
2021-02-25 17:24:54.470016,insert,check-correct,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if (root == None):\n        return False\n    elif (root.left == None and root.right == None): \n        return root.val == key\n    elif (root.val == key): \n        return True\n    return search(root.left, key) or search(root.right, key)', 'traces': {}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    temp = root\n    while True: \n        if (temp.right == None and temp.left == None): \n            if (root.val > key): \n                temp.left = Node(key)\n                break\n            temp.right = Node(key)\n            break\n        elif (temp.val > key):\n            if (temp.left == None):\n                temp.left = Node(key)\n                break\n            temp = temp.left \n        elif (temp.val < key):\n            if (temp.right == None):\n                temp.right = Node(key)\n                break\n            temp = temp.right\n    return root  \n        ', 'traces': {}}}
2021-02-25 17:25:29.682616,insert,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if (root == None):\n        return False\n    elif (root.left == None and root.right == None): \n        return root.val == key\n    elif (root.val == key): \n        return True\n    return search(root.left, key) or search(root.right, key)', 'traces': {}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    temp = root\n    while True: \n        if (temp.right == None and temp.left == None): \n            if (root.val > key): \n                temp.left = Node(key)\n                break\n            temp.right = Node(key)\n            break\n        elif (temp.val > key):\n            if (temp.left == None):\n                temp.left = Node(key)\n                break\n            temp = temp.left \n        elif (temp.val < key):\n            if (temp.right == None):\n                temp.right = Node(key)\n                break\n            temp = temp.right\n    return root  \n        ', 'traces': {}}}
2021-02-25 17:25:34.567062,insert,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if (root == None):\n        return False\n    elif (root.left == None and root.right == None): \n        return root.val == key\n    elif (root.val == key): \n        return True\n    return search(root.left, key) or search(root.right, key)', 'traces': {}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    temp = root\n    while True: \n        if (temp.right == None and temp.left == None): \n            if (root.val > key): \n                temp.left = Node(key)\n                break\n            temp.right = Node(key)\n            break\n        elif (temp.val > key):\n            if (temp.left == None):\n                temp.left = Node(key)\n                break\n            temp = temp.left \n        elif (temp.val < key):\n            if (temp.right == None):\n                temp.right = Node(key)\n                break\n            temp = temp.right\n    return root  \n        ', 'traces': {}}}
2021-02-25 17:25:38.048762,insert,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if (root == None):\n        return False\n    elif (root.left == None and root.right == None): \n        return root.val == key\n    elif (root.val == key): \n        return True\n    return search(root.left, key) or search(root.right, key)', 'traces': {}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    temp = root\n    while True: \n        if (temp.right == None and temp.left == None): \n            if (root.val > key): \n                temp.left = Node(key)\n                break\n            temp.right = Node(key)\n            break\n        elif (temp.val > key):\n            if (temp.left == None):\n                temp.left = Node(key)\n                break\n            temp = temp.left \n        elif (temp.val < key):\n            if (temp.right == None):\n                temp.right = Node(key)\n                break\n            temp = temp.right\n    return root  \n        ', 'traces': {}}}
2021-02-25 17:25:42.128289,insert,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if (root == None):\n        return False\n    elif (root.left == None and root.right == None): \n        return root.val == key\n    elif (root.val == key): \n        return True\n    return search(root.left, key) or search(root.right, key)', 'traces': {}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    temp = root\n    while True: \n        if (temp.right == None and temp.left == None): \n            if (root.val > key): \n                temp.left = Node(key)\n                break\n            temp.right = Node(key)\n            break\n        elif (temp.val > key):\n            if (temp.left == None):\n                temp.left = Node(key)\n                break\n            temp = temp.left \n        elif (temp.val < key):\n            if (temp.right == None):\n                temp.right = Node(key)\n                break\n            temp = temp.right\n    return root  \n        ', 'traces': {}}}
2021-02-25 17:25:47.479503,insert,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if (root == None):\n        return False\n    elif (root.left == None and root.right == None): \n        return root.val == key\n    elif (root.val == key): \n        return True\n    return search(root.left, key) or search(root.right, key)', 'traces': {}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    temp = root\n    while True: \n        if (temp.right == None and temp.left == None): \n            if (root.val > key): \n                temp.left = Node(key)\n                break\n            temp.right = Node(key)\n            break\n        elif (temp.val > key):\n            if (temp.left == None):\n                temp.left = Node(key)\n                break\n            temp = temp.left \n        elif (temp.val < key):\n            if (temp.right == None):\n                temp.right = Node(key)\n                break\n            temp = temp.right\n    return root  \n        ', 'traces': {}}}
2021-02-25 17:29:30.320678,insert,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if (root == None):\n        return False\n    elif (root.left == None and root.right == None): \n        return root.val == key\n    elif (root.val == key): \n        return True\n    return search(root.left, key) or search(root.right, key)', 'traces': {}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    temp = root\n    while True: \n        if (temp.right == None and temp.left == None): \n            if (root.val > key): \n                temp.left = Node(key)\n                break\n            temp.right = Node(key)\n            break\n        elif (temp.val < key and temp.left.val > key): \n            tempVal = temp.val \n            tempNode = temp.left\n            temp.val = key \n            temp.left = Node(tempVal)\n            temp.left.left = tempNode\n            break\n        elif (temp.val > key):\n            if (temp.left == None):\n                temp.left = Node(key)\n                break\n            temp = temp.left \n        elif (temp.val < key):\n            if (temp.right == None):\n                temp.right = Node(key)\n                break\n            temp = temp.right\n    return root  \n        ', 'traces': {}}}
2021-02-25 17:29:37.807892,insert,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if (root == None):\n        return False\n    elif (root.left == None and root.right == None): \n        return root.val == key\n    elif (root.val == key): \n        return True\n    return search(root.left, key) or search(root.right, key)', 'traces': {}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    temp = root\n    while True: \n        if (temp.right == None and temp.left == None): \n            if (root.val > key): \n                temp.left = Node(key)\n                break\n            temp.right = Node(key)\n            break\n        elif (temp.val < key and temp.left.val > key): \n            tempVal = temp.val \n            tempNode = temp.left\n            temp.val = key \n            temp.left = Node(tempVal)\n            temp.left.left = tempNode\n            break\n        elif (temp.val > key):\n            if (temp.left == None):\n                temp.left = Node(key)\n                break\n            temp = temp.left \n        elif (temp.val < key):\n            if (temp.right == None):\n                temp.right = Node(key)\n                break\n            temp = temp.right\n    return root  \n        ', 'traces': {}}}
2021-02-25 17:30:43.626136,insert,check-correct,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if (root == None):\n        return False\n    elif (root.left == None and root.right == None): \n        return root.val == key\n    elif (root.val == key): \n        return True\n    return search(root.left, key) or search(root.right, key)', 'traces': {}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    temp = root\n    while True: \n        if (temp.right == None and temp.left == None): \n            if (root.val > key): \n                temp.left = Node(key)\n                break\n            temp.right = Node(key)\n            break\n        elif (temp.val < key and temp.left.val > key): \n            tempVal = temp.val \n            tempNode = temp.left\n            temp.val = key \n            temp.left = Node(tempVal)\n            temp.left.left = tempNode\n            break\n        elif (temp.val > key):\n            if (temp.left == None):\n                temp.left = Node(key)\n                break\n            temp = temp.left \n        elif (temp.val < key):\n            if (temp.right == None):\n                temp.right = Node(key)\n                break\n            temp = temp.right\n    return root  \n        ', 'traces': {}}}
