2021-02-18 15:19:27.823771,page-change,1,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    return False', 'traces': {}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    return root', 'traces': {}}}
2021-02-18 15:24:05.568860,search,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    if root == key: \n        return True \n    if key > root.val: \n        return search(root.right, key)\n    return False', 'traces': {}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    return root', 'traces': {}}}
2021-02-18 15:24:31.098828,search,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    if root == key: \n        return True \n    if key > root.val: \n        return search(root.right, key)\n    return False', 'traces': {}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    return root', 'traces': {}}}
2021-02-18 15:24:39.968157,search,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    if root.val == key: \n        return True \n    if key > root.val: \n        return search(root.right, key)\n    return False', 'traces': {}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    return root', 'traces': {}}}
2021-02-18 15:26:09.094151,search,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    if root.val == key: \n        return True \n    if key > root.val and root.right: \n        return search(root.right, key)\n    if key < root.val and root.left: \n        return search(root.left, key) \n    return False', 'traces': {}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    return root', 'traces': {}}}
2021-02-18 15:26:13.287363,search,check-correct,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    if root.val == key: \n        return True \n    if key > root.val and root.right: \n        return search(root.right, key)\n    if key < root.val and root.left: \n        return search(root.left, key) \n    return False', 'traces': {}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    return root', 'traces': {}}}
2021-02-18 15:26:30.060155,search,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    if root.val == key: \n        return True \n    if key > root.val and root.right: \n        return search(root.right, key)\n    if key < root.val and root.left: \n        return search(root.left, key) \n    return False', 'traces': {}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    return root', 'traces': {}}}
2021-02-18 15:26:36.683217,search,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    if root.val == key: \n        return True \n    if key > root.val and root.right: \n        return search(root.right, key)\n    if key < root.val and root.left: \n        return search(root.left, key) \n    return False', 'traces': {}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    return root', 'traces': {}}}
2021-02-18 15:26:37.403547,search,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    if root.val == key: \n        return True \n    if key > root.val and root.right: \n        return search(root.right, key)\n    if key < root.val and root.left: \n        return search(root.left, key) \n    return False', 'traces': {}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    return root', 'traces': {}}}
2021-02-18 15:26:40.097387,search,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    if root.val == key: \n        return True \n    if key > root.val and root.right: \n        return search(root.right, key)\n    if key < root.val and root.left: \n        return search(root.left, key) \n    return False', 'traces': {}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    return root', 'traces': {}}}
2021-02-18 15:26:44.757184,search,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    if root.val == key: \n        return True \n    if key > root.val and root.right: \n        return search(root.right, key)\n    if key < root.val and root.left: \n        return search(root.left, key) \n    return False', 'traces': {}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    return root', 'traces': {}}}
2021-02-18 15:26:47.558145,search,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    if root.val == key: \n        return True \n    if key > root.val and root.right: \n        return search(root.right, key)\n    if key < root.val and root.left: \n        return search(root.left, key) \n    return False', 'traces': {}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    return root', 'traces': {}}}
2021-02-18 15:26:50.233229,search,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    if root.val == key: \n        return True \n    if key > root.val and root.right: \n        return search(root.right, key)\n    if key < root.val and root.left: \n        return search(root.left, key) \n    return False', 'traces': {}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    return root', 'traces': {}}}
2021-02-18 15:26:56.357979,search,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    if root.val == key: \n        return True \n    if key > root.val and root.right: \n        return search(root.right, key)\n    if key < root.val and root.left: \n        return search(root.left, key) \n    return False', 'traces': {}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    return root', 'traces': {}}}
2021-02-18 15:27:00.789395,search,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    if root.val == key: \n        return True \n    if key > root.val and root.right: \n        return search(root.right, key)\n    if key < root.val and root.left: \n        return search(root.left, key) \n    return False', 'traces': {}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    return root', 'traces': {}}}
2021-02-18 15:27:08.955063,search,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    if root.val == key: \n        return True \n    if key > root.val and root.right: \n        return search(root.right, key)\n    if key < root.val and root.left: \n        return search(root.left, key) \n    return False', 'traces': {}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    return root', 'traces': {}}}
2021-02-18 15:27:12.815150,search,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    if root.val == key: \n        return True \n    if key > root.val and root.right: \n        return search(root.right, key)\n    if key < root.val and root.left: \n        return search(root.left, key) \n    return False', 'traces': {}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    return root', 'traces': {}}}
2021-02-18 15:27:16.005768,search,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    if root.val == key: \n        return True \n    if key > root.val and root.right: \n        return search(root.right, key)\n    if key < root.val and root.left: \n        return search(root.left, key) \n    return False', 'traces': {}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    return root', 'traces': {}}}
2021-02-18 15:27:16.897976,search,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    if root.val == key: \n        return True \n    if key > root.val and root.right: \n        return search(root.right, key)\n    if key < root.val and root.left: \n        return search(root.left, key) \n    return False', 'traces': {}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    return root', 'traces': {}}}
2021-02-18 15:27:19.567064,search,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    if root.val == key: \n        return True \n    if key > root.val and root.right: \n        return search(root.right, key)\n    if key < root.val and root.left: \n        return search(root.left, key) \n    return False', 'traces': {}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    return root', 'traces': {}}}
2021-02-18 15:27:23.146676,search,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    if root.val == key: \n        return True \n    if key > root.val and root.right: \n        return search(root.right, key)\n    if key < root.val and root.left: \n        return search(root.left, key) \n    return False', 'traces': {}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    return root', 'traces': {}}}
2021-02-18 15:27:27.011813,search,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    if root.val == key: \n        return True \n    if key > root.val and root.right: \n        return search(root.right, key)\n    if key < root.val and root.left: \n        return search(root.left, key) \n    return False', 'traces': {}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    return root', 'traces': {}}}
2021-02-18 15:27:30.907124,search,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    if root.val == key: \n        return True \n    if key > root.val and root.right: \n        return search(root.right, key)\n    if key < root.val and root.left: \n        return search(root.left, key) \n    return False', 'traces': {}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    return root', 'traces': {}}}
2021-02-18 15:27:34.032201,search,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    if root.val == key: \n        return True \n    if key > root.val and root.right: \n        return search(root.right, key)\n    if key < root.val and root.left: \n        return search(root.left, key) \n    return False', 'traces': {}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    return root', 'traces': {}}}
2021-02-18 15:27:36.592094,search,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    if root.val == key: \n        return True \n    if key > root.val and root.right: \n        return search(root.right, key)\n    if key < root.val and root.left: \n        return search(root.left, key) \n    return False', 'traces': {}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    return root', 'traces': {}}}
2021-02-18 15:27:53.136531,search,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    if root.val == key: \n        return True \n    if key > root.val and root.right: \n        return search(root.right, key)\n    if key < root.val and root.left: \n        return search(root.left, key) \n    return False', 'traces': {}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    return root', 'traces': {}}}
2021-02-18 15:27:56.327077,search,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    if root.val == key: \n        return True \n    if key > root.val and root.right: \n        return search(root.right, key)\n    if key < root.val and root.left: \n        return search(root.left, key) \n    return False', 'traces': {}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    return root', 'traces': {}}}
2021-02-18 15:27:59.608099,search,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    if root.val == key: \n        return True \n    if key > root.val and root.right: \n        return search(root.right, key)\n    if key < root.val and root.left: \n        return search(root.left, key) \n    return False', 'traces': {}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    return root', 'traces': {}}}
2021-02-18 15:28:03.047620,search,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    if root.val == key: \n        return True \n    if key > root.val and root.right: \n        return search(root.right, key)\n    if key < root.val and root.left: \n        return search(root.left, key) \n    return False', 'traces': {}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    return root', 'traces': {}}}
2021-02-18 15:28:06.634280,search,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    if root.val == key: \n        return True \n    if key > root.val and root.right: \n        return search(root.right, key)\n    if key < root.val and root.left: \n        return search(root.left, key) \n    return False', 'traces': {}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    return root', 'traces': {}}}
2021-02-18 15:28:10.156954,search,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    if root.val == key: \n        return True \n    if key > root.val and root.right: \n        return search(root.right, key)\n    if key < root.val and root.left: \n        return search(root.left, key) \n    return False', 'traces': {}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    return root', 'traces': {}}}
2021-02-18 15:28:14.356691,search,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    if root.val == key: \n        return True \n    if key > root.val and root.right: \n        return search(root.right, key)\n    if key < root.val and root.left: \n        return search(root.left, key) \n    return False', 'traces': {}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    return root', 'traces': {}}}
2021-02-18 15:28:17.267366,search,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    if root.val == key: \n        return True \n    if key > root.val and root.right: \n        return search(root.right, key)\n    if key < root.val and root.left: \n        return search(root.left, key) \n    return False', 'traces': {}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    return root', 'traces': {}}}
2021-02-18 15:28:20.149130,search,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    if root.val == key: \n        return True \n    if key > root.val and root.right: \n        return search(root.right, key)\n    if key < root.val and root.left: \n        return search(root.left, key) \n    return False', 'traces': {}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    return root', 'traces': {}}}
2021-02-18 15:28:23.072103,search,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    if root.val == key: \n        return True \n    if key > root.val and root.right: \n        return search(root.right, key)\n    if key < root.val and root.left: \n        return search(root.left, key) \n    return False', 'traces': {}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    return root', 'traces': {}}}
2021-02-18 15:28:28.281073,search,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    if root.val == key: \n        return True \n    if key > root.val and root.right: \n        return search(root.right, key)\n    if key < root.val and root.left: \n        return search(root.left, key) \n    return False', 'traces': {}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    return root', 'traces': {}}}
2021-02-18 15:28:33.738704,search,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    if root.val == key: \n        return True \n    if key > root.val and root.right: \n        return search(root.right, key)\n    if key < root.val and root.left: \n        return search(root.left, key) \n    return False', 'traces': {}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    return root', 'traces': {}}}
2021-02-18 15:29:43.996685,search,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    print(key, root_val)\n    if root.val == key: \n        return True \n    if key > root.val and root.right: \n        return search(root.right, key)\n    if key < root.val and root.left: \n        return search(root.left, key) \n    return False', 'traces': {}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    return root', 'traces': {}}}
2021-02-18 15:30:11.585349,search,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    print(f"key: {key}, val: {root.val})\n    if root.val == key: \n        return True \n    if key > root.val and root.right: \n        return search(root.right, key)\n    if key < root.val and root.left: \n        return search(root.left, key) \n    return False', 'traces': {}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    return root', 'traces': {}}}
2021-02-18 15:30:20.824854,search,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    print(f"key: {key}, val: {root.val}")\n    if root.val == key: \n        return True \n    if key > root.val and root.right: \n        return search(root.right, key)\n    if key < root.val and root.left: \n        return search(root.left, key) \n    return False', 'traces': {}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    return root', 'traces': {}}}
2021-02-18 15:30:46.491248,search,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    print(f"key: {key}, val: {root.val}")\n    if root.val == key: \n        return True \n    if key > root.val and root.right: \n        return search(root.right, key)\n    if key < root.val and root.left: \n        return search(root.left, key) \n    return False', 'traces': {}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    return root', 'traces': {}}}
2021-02-18 15:32:07.547301,search,check-correct,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    if root.val == key: \n        return True \n    if key > root.val and root.right: \n        return search(root.right, key)\n    if key < root.val and root.left: \n        return search(root.left, key) \n    return False', 'traces': {}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    return root', 'traces': {}}}
2021-02-18 15:32:49.215900,search,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    if root.val == key: \n        return True \n    if key > root.val and root.right: \n        return search(root.right, key)\n    if key < root.val and root.left: \n        return search(root.left, key) \n    return False', 'traces': {}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    return root', 'traces': {}}}
2021-02-18 15:33:09.686816,search,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    if root.val == key: \n        return True \n    if key > root.val and root.right: \n        return search(root.right, key)\n    if key < root.val and root.left: \n        return search(root.left, key) \n    return False', 'traces': {}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    return root', 'traces': {}}}
2021-02-18 15:34:20.047102,search,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    if root.val == key: \n        return True \n    if key > root.val and root.right: \n        return search(root.right, key)\n    if key < root.val and root.left: \n        return search(root.left, key) \n    return False', 'traces': {}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    return root', 'traces': {}}}
2021-02-18 15:36:13.188345,search,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    if root.val == key: \n        return True \n    if key > root.val and root.right: \n        return search(root.right, key)\n    if key < root.val and root.left: \n        return search(root.left, key) \n    return False', 'traces': {}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    return root', 'traces': {}}}
2021-02-18 15:36:24.374827,search,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    if root.val == key: \n        return True \n    if key > root.val and root.right: \n        return search(root.right, key)\n    if key < root.val and root.left: \n        return search(root.left, key) \n    return False', 'traces': {}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    return root', 'traces': {}}}
2021-02-18 15:36:26.083089,search,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    if root.val == key: \n        return True \n    if key > root.val and root.right: \n        return search(root.right, key)\n    if key < root.val and root.left: \n        return search(root.left, key) \n    return False', 'traces': {}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    return root', 'traces': {}}}
2021-02-18 15:36:36.164888,search,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    if root.val == key: \n        return True \n    if key > root.val and root.right: \n        return search(root.right, key)\n    if key < root.val and root.left: \n        return search(root.left, key) \n    return False', 'traces': {}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    return root', 'traces': {}}}
2021-02-18 15:36:41.723011,search,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    if root.val == key: \n        return True \n    if key > root.val and root.right: \n        return search(root.right, key)\n    if key < root.val and root.left: \n        return search(root.left, key) \n    return False', 'traces': {}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    return root', 'traces': {}}}
2021-02-18 15:36:46.540680,search,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    if root.val == key: \n        return True \n    if key > root.val and root.right: \n        return search(root.right, key)\n    if key < root.val and root.left: \n        return search(root.left, key) \n    return False', 'traces': {}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    return root', 'traces': {}}}
2021-02-18 15:37:24.595718,search,check-correct,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    if not root: \n        return False\n    if root.val == key: \n        return True \n    if key > root.val and root.right: \n        return search(root.right, key)\n    if key < root.val and root.left: \n        return search(root.left, key) \n    return False', 'traces': {}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    return root', 'traces': {}}}
2021-02-18 15:37:29.346024,page-change,2,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    if not root: \n        return False\n    if root.val == key: \n        return True \n    if key > root.val and root.right: \n        return search(root.right, key)\n    if key < root.val and root.left: \n        return search(root.left, key) \n    return False', 'traces': {}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    return root', 'traces': {}}}
2021-02-18 15:46:45.240331,insert,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    if not root: \n        return False\n    if root.val == key: \n        return True \n    if key > root.val and root.right: \n        return search(root.right, key)\n    if key < root.val and root.left: \n        return search(root.left, key) \n    return False', 'traces': {}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    new_node = Node(key)\n    if key < root.val: \n        if key > root.left.val: \n            new_node.left = root.left.val\n            root.left = new_node\n        else: \n            return insert(root.left, key)\n    if key > root.val:\n        if key > root.right.val: \n            new_node.right = root.right.val\n            root.right = new_node\n        else: \n            return insert(root.right, key) \n    return root', 'traces': {}}}
2021-02-18 15:46:58.565602,insert,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    if not root: \n        return False\n    if root.val == key: \n        return True \n    if key > root.val and root.right: \n        return search(root.right, key)\n    if key < root.val and root.left: \n        return search(root.left, key) \n    return False', 'traces': {}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    new_node = Node(key)\n    if key < root.val: \n        if key > root.left.val: \n            new_node.left = root.left\n            root.left = new_node\n        else: \n            return insert(root.left, key)\n    if key > root.val:\n        if key > root.right.val: \n            new_node.right = root.right\n            root.right = new_node\n        else: \n            return insert(root.right, key) \n    return root', 'traces': {}}}
2021-02-18 15:47:44.666886,insert,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    if not root: \n        return False\n    if root.val == key: \n        return True \n    if key > root.val and root.right: \n        return search(root.right, key)\n    if key < root.val and root.left: \n        return search(root.left, key) \n    return False', 'traces': {}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    new_node = Node(key)\n    if key < root.val: \n        if key > root.left.val: \n            new_node.left = root.left\n            root.left = new_node\n        else: \n            root.left = insert(root.left, key)\n    if key > root.val:\n        if key > root.right.val: \n            new_node.right = root.right\n            root.right = new_node\n        else: \n            root.right = insert(root.right, key) \n    return root', 'traces': {}}}
2021-02-18 15:47:53.635116,insert,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    if not root: \n        return False\n    if root.val == key: \n        return True \n    if key > root.val and root.right: \n        return search(root.right, key)\n    if key < root.val and root.left: \n        return search(root.left, key) \n    return False', 'traces': {}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    new_node = Node(key)\n    if key < root.val: \n        if key > root.left.val: \n            new_node.left = root.left\n            root.left = new_node\n        else: \n            root.left = insert(root.left, key)\n    if key > root.val:\n        if key > root.right.val: \n            new_node.right = root.right\n            root.right = new_node\n        else: \n            root.right = insert(root.right, key) \n    return root', 'traces': {}}}
2021-02-18 15:48:03.327251,insert,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    if not root: \n        return False\n    if root.val == key: \n        return True \n    if key > root.val and root.right: \n        return search(root.right, key)\n    if key < root.val and root.left: \n        return search(root.left, key) \n    return False', 'traces': {}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    new_node = Node(key)\n    if key < root.val: \n        if key > root.left.val: \n            new_node.left = root.left\n            root.left = new_node\n        else: \n            root.left = insert(root.left, key)\n    if key > root.val:\n        if key > root.right.val: \n            new_node.right = root.right\n            root.right = new_node\n        else: \n            root.right = insert(root.right, key) \n    return root', 'traces': {}}}
2021-02-18 15:48:45.481359,insert,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    if not root: \n        return False\n    if root.val == key: \n        return True \n    if key > root.val and root.right: \n        return search(root.right, key)\n    if key < root.val and root.left: \n        return search(root.left, key) \n    return False', 'traces': {}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    new_node = Node(key)\n    if not root: \n        root = new_node\n    if key < root.val: \n        if key > root.left.val: \n            new_node.left = root.left\n            root.left = new_node\n        else: \n            root.left = insert(root.left, key)\n    if key > root.val:\n        if key > root.right.val: \n            new_node.right = root.right\n            root.right = new_node\n        else: \n            root.right = insert(root.right, key) \n    return root', 'traces': {}}}
2021-02-18 15:48:47.144708,insert,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    if not root: \n        return False\n    if root.val == key: \n        return True \n    if key > root.val and root.right: \n        return search(root.right, key)\n    if key < root.val and root.left: \n        return search(root.left, key) \n    return False', 'traces': {}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    new_node = Node(key)\n    if not root: \n        root = new_node\n    if key < root.val: \n        if key > root.left.val: \n            new_node.left = root.left\n            root.left = new_node\n        else: \n            root.left = insert(root.left, key)\n    if key > root.val:\n        if key > root.right.val: \n            new_node.right = root.right\n            root.right = new_node\n        else: \n            root.right = insert(root.right, key) \n    return root', 'traces': {}}}
2021-02-18 15:49:14.456649,insert,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    if not root: \n        return False\n    if root.val == key: \n        return True \n    if key > root.val and root.right: \n        return search(root.right, key)\n    if key < root.val and root.left: \n        return search(root.left, key) \n    return False', 'traces': {}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    new_node = Node(key)\n    if not root: \n        return new_node\n    if key < root.val: \n        if key > root.left.val: \n            new_node.left = root.left\n            root.left = new_node\n        else: \n            root.left = insert(root.left, key)\n    if key > root.val:\n        if key > root.right.val: \n            new_node.right = root.right\n            root.right = new_node\n        else: \n            root.right = insert(root.right, key) \n    return root', 'traces': {}}}
2021-02-18 15:49:15.174568,insert,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    if not root: \n        return False\n    if root.val == key: \n        return True \n    if key > root.val and root.right: \n        return search(root.right, key)\n    if key < root.val and root.left: \n        return search(root.left, key) \n    return False', 'traces': {}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    new_node = Node(key)\n    if not root: \n        return new_node\n    if key < root.val: \n        if key > root.left.val: \n            new_node.left = root.left\n            root.left = new_node\n        else: \n            root.left = insert(root.left, key)\n    if key > root.val:\n        if key > root.right.val: \n            new_node.right = root.right\n            root.right = new_node\n        else: \n            root.right = insert(root.right, key) \n    return root', 'traces': {}}}
2021-02-18 15:49:37.459479,insert,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    if not root: \n        return False\n    if root.val == key: \n        return True \n    if key > root.val and root.right: \n        return search(root.right, key)\n    if key < root.val and root.left: \n        return search(root.left, key) \n    return False', 'traces': {}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    print(root.val)\n    new_node = Node(key)\n    if not root: \n        return new_node\n    if key < root.val: \n        if key > root.left.val: \n            new_node.left = root.left\n            root.left = new_node\n        else: \n            root.left = insert(root.left, key)\n    if key > root.val:\n        if key > root.right.val: \n            new_node.right = root.right\n            root.right = new_node\n        else: \n            root.right = insert(root.right, key) \n    return root', 'traces': {}}}
2021-02-18 15:50:30.549708,insert,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    if not root: \n        return False\n    if root.val == key: \n        return True \n    if key > root.val and root.right: \n        return search(root.right, key)\n    if key < root.val and root.left: \n        return search(root.left, key) \n    return False', 'traces': {}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    new_node = Node(key)\n    if not root: \n        return new_node\n    if key < root.val: \n        if root.left and key > root.left.val: \n            new_node.left = root.left\n            root.left = new_node\n        else: \n            root.left = insert(root.left, key)\n    if key > root.val:\n        if root.right and key > root.right.val: \n            new_node.right = root.right\n            root.right = new_node\n        else: \n            root.right = insert(root.right, key) \n    return root', 'traces': {}}}
2021-02-18 15:50:49.216673,insert,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    if not root: \n        return False\n    if root.val == key: \n        return True \n    if key > root.val and root.right: \n        return search(root.right, key)\n    if key < root.val and root.left: \n        return search(root.left, key) \n    return False', 'traces': {}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    new_node = Node(key)\n    if not root: \n        return new_node\n    if key < root.val: \n        if root.left and key > root.left.val: \n            new_node.left = root.left\n            root.left = new_node\n        else: \n            root.left = insert(root.left, key)\n    if key > root.val:\n        if root.right and key > root.right.val: \n            new_node.right = root.right\n            root.right = new_node\n        else: \n            root.right = insert(root.right, key) \n    return root', 'traces': {}}}
2021-02-18 15:52:05.750339,insert,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    if not root: \n        return False\n    if root.val == key: \n        return True \n    if key > root.val and root.right: \n        return search(root.right, key)\n    if key < root.val and root.left: \n        return search(root.left, key) \n    return False', 'traces': {}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    new_node = Node(key)\n    if not root: \n        return new_node\n    if key < root.val: \n        if root.left and key > root.left.val: \n            new_node.left = root.left\n            root.left = new_node\n        else: \n            root.left = insert(root.left, key)\n    if key > root.val:\n        if root.right and key < root.right.val: \n            new_node.right = root.right\n            root.right = new_node\n        else: \n            root.right = insert(root.right, key) \n    return root', 'traces': {}}}
2021-02-18 15:52:10.287787,insert,check-correct,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    if not root: \n        return False\n    if root.val == key: \n        return True \n    if key > root.val and root.right: \n        return search(root.right, key)\n    if key < root.val and root.left: \n        return search(root.left, key) \n    return False', 'traces': {}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    new_node = Node(key)\n    if not root: \n        return new_node\n    if key < root.val: \n        if root.left and key > root.left.val: \n            new_node.left = root.left\n            root.left = new_node\n        else: \n            root.left = insert(root.left, key)\n    if key > root.val:\n        if root.right and key < root.right.val: \n            new_node.right = root.right\n            root.right = new_node\n        else: \n            root.right = insert(root.right, key) \n    return root', 'traces': {}}}
2021-02-18 15:55:22.178607,insert,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    if not root: \n        return False\n    if root.val == key: \n        return True \n    if key > root.val and root.right: \n        return search(root.right, key)\n    if key < root.val and root.left: \n        return search(root.left, key) \n    return False', 'traces': {}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    new_node = Node(key)\n    if not root: \n        return new_node\n    if key < root.val: \n        if root.left and key > root.left.val: \n            new_node.left = root.left\n            root.left = new_node\n        else: \n            root.left = insert(root.left, key)\n    if key > root.val:\n        if root.right and key < root.right.val: \n            new_node.right = root.right\n            root.right = new_node\n        else: \n            root.right = insert(root.right, key) \n    return root', 'traces': {}}}
2021-02-18 15:55:43.496817,insert,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    if not root: \n        return False\n    if root.val == key: \n        return True \n    if key > root.val and root.right: \n        return search(root.right, key)\n    if key < root.val and root.left: \n        return search(root.left, key) \n    return False', 'traces': {}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    new_node = Node(key)\n    if not root: \n        return new_node\n    if key < root.val: \n        if root.left and key > root.left.val: \n            new_node.left = root.left\n            root.left = new_node\n        else: \n            root.left = insert(root.left, key)\n    if key > root.val:\n        if root.right and key < root.right.val: \n            new_node.right = root.right\n            root.right = new_node\n        else: \n            root.right = insert(root.right, key) \n    return root', 'traces': {}}}
2021-02-18 15:55:56.406471,insert,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    if not root: \n        return False\n    if root.val == key: \n        return True \n    if key > root.val and root.right: \n        return search(root.right, key)\n    if key < root.val and root.left: \n        return search(root.left, key) \n    return False', 'traces': {}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    new_node = Node(key)\n    if not root: \n        return new_node\n    if key < root.val: \n        if root.left and key > root.left.val: \n            new_node.left = root.left\n            root.left = new_node\n        else: \n            root.left = insert(root.left, key)\n    if key > root.val:\n        if root.right and key < root.right.val: \n            new_node.right = root.right\n            root.right = new_node\n        else: \n            root.right = insert(root.right, key) \n    return root', 'traces': {}}}
2021-02-18 16:00:29.082745,insert,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    if not root: \n        return False\n    if root.val == key: \n        return True \n    if key > root.val and root.right: \n        return search(root.right, key)\n    if key < root.val and root.left: \n        return search(root.left, key) \n    return False', 'traces': {}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    new_node = Node(key)\n    if not root: \n        return new_node\n    if key < root.val: \n        x = root \n        while x.left:\n            if key > x.left.val:\n                if key < x.left.left.val\n                    new_node.left = root.left.left\n                    root.left = new_node\n        else: \n            root.left = insert(root.left, key)\n    if key > root.val:\n        if root.right and key < root.right.val: \n            new_node.right = root.right\n            root.right = new_node\n        else: \n            root.right = insert(root.right, key) \n    return root', 'traces': {}}}
