2021-03-05 10:44:10.343841,page-change,1,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    return False', 'traces': {}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    return root', 'traces': {}}}
2021-03-05 10:44:23.678319,search,check-correct,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key): \n\tif root == None:\n\t\treturn False\n\telif key > root.val:\n\t\treturn search(root.right, key)\n\telif key < root.val:\n\t\treturn search(root.left, key)\n\telse:\n\t\treturn False', 'traces': {}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    return root', 'traces': {}}}
2021-03-05 10:45:12.108068,search,check-correct,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    if root == None:\n\t\treturn False\n\telif key > root.val:\n\t\treturn search(root.right, key)\n\telif key < root.val:\n\t\treturn search(root.left, key)\n\telse:\n\t\treturn False', 'traces': {}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    return root', 'traces': {}}}
2021-03-05 10:46:08.785387,search,check-correct,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    if root == None:\n\t\treturn False\n\telif root.val == key:\n\t\treturn True\n\telif key > root.val:\n\t\treturn search(root.right, key)\n\telif key < root.val:\n\t\treturn search(root.left, key)\n\telse:\n\t\treturn False', 'traces': {}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    return root', 'traces': {}}}
2021-03-05 10:46:10.315705,search,check-correct,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    if root == None:\n\t\treturn False\n\telif root.val == key:\n\t\treturn True\n\telif key > root.val:\n\t\treturn search(root.right, key)\n\telif key < root.val:\n\t\treturn search(root.left, key)\n\telse:\n\t\treturn False', 'traces': {}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    return root', 'traces': {}}}
2021-03-05 10:46:18.923317,search,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    if root == None:\n\t\treturn False\n\telif root.val == key:\n\t\treturn True\n\telif key > root.val:\n\t\treturn search(root.right, key)\n\telif key < root.val:\n\t\treturn search(root.left, key)\n\telse:\n\t\treturn False', 'traces': {}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    return root', 'traces': {}}}
2021-03-05 10:46:31.311041,search,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    if root == None:\n\t    return False\n\telif root.val == key:\n\t\treturn True\n\telif key > root.val:\n\t\treturn search(root.right, key)\n\telif key < root.val:\n\t\treturn search(root.left, key)\n\telse:\n\t\treturn False', 'traces': {}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    return root', 'traces': {}}}
2021-03-05 10:46:44.994731,search,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    if root == None:\n\t    return False\n    elif root.val == key:\n\t    return True\n    elif key > root.val:\n\t    return search(root.right, key)\n    elif key < root.val:\n\t    return search(root.left, key)\n    else:\n    \treturn False', 'traces': {}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    return root', 'traces': {}}}
2021-03-05 10:46:46.807641,search,check-correct,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    if root == None:\n\t    return False\n    elif root.val == key:\n\t    return True\n    elif key > root.val:\n\t    return search(root.right, key)\n    elif key < root.val:\n\t    return search(root.left, key)\n    else:\n    \treturn False', 'traces': {}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    return root', 'traces': {}}}
2021-03-05 10:46:48.180655,page-change,2,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    if root == None:\n\t    return False\n    elif root.val == key:\n\t    return True\n    elif key > root.val:\n\t    return search(root.right, key)\n    elif key < root.val:\n\t    return search(root.left, key)\n    else:\n    \treturn False', 'traces': {}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    return root', 'traces': {}}}
2021-03-05 10:47:15.629058,insert,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    if root == None:\n\t    return False\n    elif root.val == key:\n\t    return True\n    elif key > root.val:\n\t    return search(root.right, key)\n    elif key < root.val:\n\t    return search(root.left, key)\n    else:\n    \treturn False', 'traces': {}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n   baseNode = root\n    found = False;\n    while(not found):\n        if (key > root.val):\n            if (root.right == None):\n                root.right = Node(key)\n                found = True\n            else:\n                root = root.right\n    \n        elif (key < root.val):\n            if (root.left == None):\n                root.left = Node(key)\n                found = True\n            else:\n                root = root.left\n    return baseNode', 'traces': {}}}
2021-03-05 10:48:24.029303,insert,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    if root == None:\n\t    return False\n    elif root.val == key:\n\t    return True\n    elif key > root.val:\n\t    return search(root.right, key)\n    elif key < root.val:\n\t    return search(root.left, key)\n    else:\n    \treturn False', 'traces': {}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    baseNode = root\n    found = False;\n    while(not found):\n        if (key > root.val):\n            if (root.right == None):\n                root.right = Node(key)\n                found = True\n            else:\n                root = root.right\n    \n        elif (key < root.val):\n            if (root.left == None):\n                root.left = Node(key)\n                found = True\n            else:\n                root = root.left\n    return baseNode', 'traces': {}}}
2021-03-05 10:48:27.985256,insert,check-correct,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    if root == None:\n\t    return False\n    elif root.val == key:\n\t    return True\n    elif key > root.val:\n\t    return search(root.right, key)\n    elif key < root.val:\n\t    return search(root.left, key)\n    else:\n    \treturn False', 'traces': {}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    baseNode = root\n    found = False;\n    while(not found):\n        if (key > root.val):\n            if (root.right == None):\n                root.right = Node(key)\n                found = True\n            else:\n                root = root.right\n    \n        elif (key < root.val):\n            if (root.left == None):\n                root.left = Node(key)\n                found = True\n            else:\n                root = root.left\n    return baseNode', 'traces': {}}}
2021-03-05 10:49:17.519557,insert,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    if root == None:\n\t    return False\n    elif root.val == key:\n\t    return True\n    elif key > root.val:\n\t    return search(root.right, key)\n    elif key < root.val:\n\t    return search(root.left, key)\n    else:\n    \treturn False', 'traces': {}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    baseNode = root\n    found = False;\n    \n    while(not found):\n        if (key > root.val):\n            if (root.right == None):\n                root.right = Node(key)\n                found = True\n            else:\n                root = root.right\n    \n        elif (key < root.val):\n            if (root.left == None):\n                root.left = Node(key)\n                found = True\n            else:\n                root = root.left\n    return baseNode', 'traces': {}}}
2021-03-05 10:49:35.286816,insert,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    if root == None:\n\t    return False\n    elif root.val == key:\n\t    return True\n    elif key > root.val:\n\t    return search(root.right, key)\n    elif key < root.val:\n\t    return search(root.left, key)\n    else:\n    \treturn False', 'traces': {}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    baseNode = root\n    found = False;\n    \n    while(not found):\n        if (key > root.val):\n            if (root.right == None):\n                root.right = Node(key)\n                found = True\n            else:\n                root = root.right\n    \n        elif (key < root.val):\n            if (root.left == None):\n                root.left = Node(key)\n                found = True\n            else:\n                root = root.left\n    return baseNode', 'traces': {}}}
2021-03-05 10:50:35.784072,insert,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    if root == None:\n\t    return False\n    elif root.val == key:\n\t    return True\n    elif key > root.val:\n\t    return search(root.right, key)\n    elif key < root.val:\n\t    return search(root.left, key)\n    else:\n    \treturn False', 'traces': {}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    baseNode = root\n    found = False;\n    \n    while(not found):\n        if (root == None):\n            found = False\n        if (key > root.val):\n            if (root.right == None):\n                root.right = Node(key)\n                found = True\n            else:\n                root = root.right\n    \n        elif (key < root.val):\n            if (root.left == None):\n                root.left = Node(key)\n                found = True\n            else:\n                root = root.left\n    return baseNode', 'traces': {}}}
2021-03-05 10:50:38.138211,insert,check-correct,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    if root == None:\n\t    return False\n    elif root.val == key:\n\t    return True\n    elif key > root.val:\n\t    return search(root.right, key)\n    elif key < root.val:\n\t    return search(root.left, key)\n    else:\n    \treturn False', 'traces': {}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    baseNode = root\n    found = False;\n    \n    while(not found):\n        if (root == None):\n            found = False\n        if (key > root.val):\n            if (root.right == None):\n                root.right = Node(key)\n                found = True\n            else:\n                root = root.right\n    \n        elif (key < root.val):\n            if (root.left == None):\n                root.left = Node(key)\n                found = True\n            else:\n                root = root.left\n    return baseNode', 'traces': {}}}
2021-03-05 10:50:39.886525,insert,check-correct,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    if root == None:\n\t    return False\n    elif root.val == key:\n\t    return True\n    elif key > root.val:\n\t    return search(root.right, key)\n    elif key < root.val:\n\t    return search(root.left, key)\n    else:\n    \treturn False', 'traces': {}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    baseNode = root\n    found = False;\n    \n    while(not found):\n        if (root == None):\n            found = False\n        if (key > root.val):\n            if (root.right == None):\n                root.right = Node(key)\n                found = True\n            else:\n                root = root.right\n    \n        elif (key < root.val):\n            if (root.left == None):\n                root.left = Node(key)\n                found = True\n            else:\n                root = root.left\n    return baseNode', 'traces': {}}}
2021-03-05 10:51:52.704095,insert,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    if root == None:\n\t    return False\n    elif root.val == key:\n\t    return True\n    elif key > root.val:\n\t    return search(root.right, key)\n    elif key < root.val:\n\t    return search(root.left, key)\n    else:\n    \treturn False', 'traces': {}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    baseNode = root\n    found = False;\n    \n    while(not found):\n        if (root == None):\n            found = False\n        if (key > root.val):\n            if (root.right == None):\n                root.right = Node(key)\n                found = True\n            else:\n                root = root.right\n        elif (key < root.val):\n            if (root.left == None):\n                root.left = Node(key)\n                found = True\n            else:\n                root = root.left\n    return baseNode', 'traces': {}}}
2021-03-05 10:52:00.091514,insert,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    if root == None:\n\t    return False\n    elif root.val == key:\n\t    return True\n    elif key > root.val:\n\t    return search(root.right, key)\n    elif key < root.val:\n\t    return search(root.left, key)\n    else:\n    \treturn False', 'traces': {}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    baseNode = root\n    found = False;\n    \n    while(not found):\n        if (root == None):\n            found = False\n        if (key > root.val):\n            if (root.right == None):\n                root.right = Node(key)\n                found = True\n            else:\n                root = root.right\n        elif (key < root.val):\n            if (root.left == None):\n                root.left = Node(key)\n                found = True\n            else:\n                root = root.left\n    return baseNode', 'traces': {}}}
2021-03-05 10:52:09.213680,insert,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    if root == None:\n\t    return False\n    elif root.val == key:\n\t    return True\n    elif key > root.val:\n\t    return search(root.right, key)\n    elif key < root.val:\n\t    return search(root.left, key)\n    else:\n    \treturn False', 'traces': {}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    baseNode = root\n    found = False;\n    \n    while(not found):\n        if (root == None):\n            found = False\n        if (key > root.val):\n            if (root.right == None):\n                root.right = Node(key)\n                found = True\n            else:\n                root = root.right\n        elif (key < root.val):\n            if (root.left == None):\n                root.left = Node(key)\n                found = True\n            else:\n                root = root.left\n    return baseNode', 'traces': {}}}
