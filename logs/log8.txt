2021-02-22 16:46:27.290669,page-change,1,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    return False', 'traces': {}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    return root', 'traces': {}}}
2021-02-22 16:46:37.591887,search,move-right,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    return False', 'traces': {}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    return root', 'traces': {}}}
2021-02-22 16:46:38.498721,search,move-left,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    return False', 'traces': {}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    return root', 'traces': {}}}
2021-02-22 16:46:39.388562,search,move-right,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    return False', 'traces': {}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    return root', 'traces': {}}}
2021-02-22 16:46:39.997401,search,move-right,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    return False', 'traces': {}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    return root', 'traces': {}}}
2021-02-22 16:46:45.269730,search,return-false,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    return False', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 11}, {'action': 'move-left', 'root': 12, 'key': 11}, {'action': 'move-right', 'root': 9, 'key': 11}, {'action': 'move-right', 'root': 10, 'key': 11}, {'action': 'return-false', 'root': -1, 'key': 11}]}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    return root', 'traces': {}}}
2021-02-22 16:47:03.574209,search,move-right,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    return False', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 11}, {'action': 'move-left', 'root': 12, 'key': 11}, {'action': 'move-right', 'root': 9, 'key': 11}, {'action': 'move-right', 'root': 10, 'key': 11}, {'action': 'return-false', 'root': -1, 'key': 11}]}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    return root', 'traces': {}}}
2021-02-22 16:47:04.324779,search,return-true,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    return False', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 11}, {'action': 'move-left', 'root': 12, 'key': 11}, {'action': 'move-right', 'root': 9, 'key': 11}, {'action': 'move-right', 'root': 10, 'key': 11}, {'action': 'return-false', 'root': -1, 'key': 11}], '1': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}]}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    return root', 'traces': {}}}
2021-02-22 16:47:06.805626,search,move-left,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    return False', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 11}, {'action': 'move-left', 'root': 12, 'key': 11}, {'action': 'move-right', 'root': 9, 'key': 11}, {'action': 'move-right', 'root': 10, 'key': 11}, {'action': 'return-false', 'root': -1, 'key': 11}], '1': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}]}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    return root', 'traces': {}}}
2021-02-22 16:47:09.420623,search,move-right,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    return False', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 11}, {'action': 'move-left', 'root': 12, 'key': 11}, {'action': 'move-right', 'root': 9, 'key': 11}, {'action': 'move-right', 'root': 10, 'key': 11}, {'action': 'return-false', 'root': -1, 'key': 11}], '1': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}]}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    return root', 'traces': {}}}
2021-02-22 16:47:13.747344,search,move-right,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    return False', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 11}, {'action': 'move-left', 'root': 12, 'key': 11}, {'action': 'move-right', 'root': 9, 'key': 11}, {'action': 'move-right', 'root': 10, 'key': 11}, {'action': 'return-false', 'root': -1, 'key': 11}], '1': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}]}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    return root', 'traces': {}}}
2021-02-22 16:47:16.189409,search,return-false,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    return False', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 11}, {'action': 'move-left', 'root': 12, 'key': 11}, {'action': 'move-right', 'root': 9, 'key': 11}, {'action': 'move-right', 'root': 10, 'key': 11}, {'action': 'return-false', 'root': -1, 'key': 11}], '1': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '2': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-false', 'root': -1, 'key': 30}]}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    return root', 'traces': {}}}
2021-02-22 16:47:23.995708,search,move-right,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    return False', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 11}, {'action': 'move-left', 'root': 12, 'key': 11}, {'action': 'move-right', 'root': 9, 'key': 11}, {'action': 'move-right', 'root': 10, 'key': 11}, {'action': 'return-false', 'root': -1, 'key': 11}], '1': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '2': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-false', 'root': -1, 'key': 30}]}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    return root', 'traces': {}}}
2021-02-22 16:47:27.125385,search,return-true,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    return False', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 11}, {'action': 'move-left', 'root': 12, 'key': 11}, {'action': 'move-right', 'root': 9, 'key': 11}, {'action': 'move-right', 'root': 10, 'key': 11}, {'action': 'return-false', 'root': -1, 'key': 11}], '1': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '2': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-false', 'root': -1, 'key': 30}], '3': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}]}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    return root', 'traces': {}}}
2021-02-22 16:47:31.770120,search,move-left,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    return False', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 11}, {'action': 'move-left', 'root': 12, 'key': 11}, {'action': 'move-right', 'root': 9, 'key': 11}, {'action': 'move-right', 'root': 10, 'key': 11}, {'action': 'return-false', 'root': -1, 'key': 11}], '1': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '2': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-false', 'root': -1, 'key': 30}], '3': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}]}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    return root', 'traces': {}}}
2021-02-22 16:47:32.289388,search,move-right,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    return False', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 11}, {'action': 'move-left', 'root': 12, 'key': 11}, {'action': 'move-right', 'root': 9, 'key': 11}, {'action': 'move-right', 'root': 10, 'key': 11}, {'action': 'return-false', 'root': -1, 'key': 11}], '1': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '2': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-false', 'root': -1, 'key': 30}], '3': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}]}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    return root', 'traces': {}}}
2021-02-22 16:47:32.699674,search,move-right,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    return False', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 11}, {'action': 'move-left', 'root': 12, 'key': 11}, {'action': 'move-right', 'root': 9, 'key': 11}, {'action': 'move-right', 'root': 10, 'key': 11}, {'action': 'return-false', 'root': -1, 'key': 11}], '1': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '2': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-false', 'root': -1, 'key': 30}], '3': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}]}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    return root', 'traces': {}}}
2021-02-22 16:47:35.082368,search,return-true,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    return False', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 11}, {'action': 'move-left', 'root': 12, 'key': 11}, {'action': 'move-right', 'root': 9, 'key': 11}, {'action': 'move-right', 'root': 10, 'key': 11}, {'action': 'return-false', 'root': -1, 'key': 11}], '1': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '2': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-false', 'root': -1, 'key': 30}], '3': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '4': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-true', 'root': -1, 'key': 30}]}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    return root', 'traces': {}}}
2021-02-22 16:47:38.367920,search,move-right,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    return False', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 11}, {'action': 'move-left', 'root': 12, 'key': 11}, {'action': 'move-right', 'root': 9, 'key': 11}, {'action': 'move-right', 'root': 10, 'key': 11}, {'action': 'return-false', 'root': -1, 'key': 11}], '1': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '2': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-false', 'root': -1, 'key': 30}], '3': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '4': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-true', 'root': -1, 'key': 30}]}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    return root', 'traces': {}}}
2021-02-22 16:47:39.361719,search,move-left,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    return False', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 11}, {'action': 'move-left', 'root': 12, 'key': 11}, {'action': 'move-right', 'root': 9, 'key': 11}, {'action': 'move-right', 'root': 10, 'key': 11}, {'action': 'return-false', 'root': -1, 'key': 11}], '1': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '2': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-false', 'root': -1, 'key': 30}], '3': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '4': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-true', 'root': -1, 'key': 30}]}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    return root', 'traces': {}}}
2021-02-22 16:47:39.896317,search,move-right,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    return False', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 11}, {'action': 'move-left', 'root': 12, 'key': 11}, {'action': 'move-right', 'root': 9, 'key': 11}, {'action': 'move-right', 'root': 10, 'key': 11}, {'action': 'return-false', 'root': -1, 'key': 11}], '1': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '2': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-false', 'root': -1, 'key': 30}], '3': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '4': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-true', 'root': -1, 'key': 30}]}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    return root', 'traces': {}}}
2021-02-22 16:47:44.002253,search,move-right,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    return False', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 11}, {'action': 'move-left', 'root': 12, 'key': 11}, {'action': 'move-right', 'root': 9, 'key': 11}, {'action': 'move-right', 'root': 10, 'key': 11}, {'action': 'return-false', 'root': -1, 'key': 11}], '1': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '2': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-false', 'root': -1, 'key': 30}], '3': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '4': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-true', 'root': -1, 'key': 30}]}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    return root', 'traces': {}}}
2021-02-22 16:51:36.601525,search,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root == None:\n        return False   \n    elif root == key:\n        return True\n    else:\n        return (search(root.left, key) or search(root.right, key))\n    return False', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 11}, {'action': 'move-left', 'root': 12, 'key': 11}, {'action': 'move-right', 'root': 9, 'key': 11}, {'action': 'move-right', 'root': 10, 'key': 11}, {'action': 'return-false', 'root': -1, 'key': 11}], '1': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '2': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-false', 'root': -1, 'key': 30}], '3': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '4': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-true', 'root': -1, 'key': 30}]}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    return root', 'traces': {}}}
2021-02-22 16:51:42.289877,search,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root == None:\n        return False   \n    elif root == key:\n        return True\n    else:\n        return (search(root.left, key) or search(root.right, key))\n    return False', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 11}, {'action': 'move-left', 'root': 12, 'key': 11}, {'action': 'move-right', 'root': 9, 'key': 11}, {'action': 'move-right', 'root': 10, 'key': 11}, {'action': 'return-false', 'root': -1, 'key': 11}], '1': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '2': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-false', 'root': -1, 'key': 30}], '3': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '4': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-true', 'root': -1, 'key': 30}]}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    return root', 'traces': {}}}
2021-02-22 16:52:01.447571,search,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root == None:\n        return False   \n    elif root == key:\n        return True\n    else:\n        return (search(root.left, key) or search(root.right, key))', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 11}, {'action': 'move-left', 'root': 12, 'key': 11}, {'action': 'move-right', 'root': 9, 'key': 11}, {'action': 'move-right', 'root': 10, 'key': 11}, {'action': 'return-false', 'root': -1, 'key': 11}], '1': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '2': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-false', 'root': -1, 'key': 30}], '3': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '4': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-true', 'root': -1, 'key': 30}]}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    return root', 'traces': {}}}
2021-02-22 16:52:02.673548,search,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root == None:\n        return False   \n    elif root == key:\n        return True\n    else:\n        return (search(root.left, key) or search(root.right, key))', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 11}, {'action': 'move-left', 'root': 12, 'key': 11}, {'action': 'move-right', 'root': 9, 'key': 11}, {'action': 'move-right', 'root': 10, 'key': 11}, {'action': 'return-false', 'root': -1, 'key': 11}], '1': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '2': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-false', 'root': -1, 'key': 30}], '3': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '4': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-true', 'root': -1, 'key': 30}]}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    return root', 'traces': {}}}
2021-02-22 16:52:02.977290,search,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root == None:\n        return False   \n    elif root == key:\n        return True\n    else:\n        return (search(root.left, key) or search(root.right, key))', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 11}, {'action': 'move-left', 'root': 12, 'key': 11}, {'action': 'move-right', 'root': 9, 'key': 11}, {'action': 'move-right', 'root': 10, 'key': 11}, {'action': 'return-false', 'root': -1, 'key': 11}], '1': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '2': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-false', 'root': -1, 'key': 30}], '3': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '4': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-true', 'root': -1, 'key': 30}]}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    return root', 'traces': {}}}
2021-02-22 16:52:05.526968,search,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root == None:\n        return False   \n    elif root == key:\n        return True\n    else:\n        return (search(root.left, key) or search(root.right, key))', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 11}, {'action': 'move-left', 'root': 12, 'key': 11}, {'action': 'move-right', 'root': 9, 'key': 11}, {'action': 'move-right', 'root': 10, 'key': 11}, {'action': 'return-false', 'root': -1, 'key': 11}], '1': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '2': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-false', 'root': -1, 'key': 30}], '3': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '4': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-true', 'root': -1, 'key': 30}]}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    return root', 'traces': {}}}
2021-02-22 16:52:07.613753,search,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root == None:\n        return False   \n    elif root == key:\n        return True\n    else:\n        return (search(root.left, key) or search(root.right, key))', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 11}, {'action': 'move-left', 'root': 12, 'key': 11}, {'action': 'move-right', 'root': 9, 'key': 11}, {'action': 'move-right', 'root': 10, 'key': 11}, {'action': 'return-false', 'root': -1, 'key': 11}], '1': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '2': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-false', 'root': -1, 'key': 30}], '3': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '4': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-true', 'root': -1, 'key': 30}]}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    return root', 'traces': {}}}
2021-02-22 16:52:07.958391,search,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root == None:\n        return False   \n    elif root == key:\n        return True\n    else:\n        return (search(root.left, key) or search(root.right, key))', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 11}, {'action': 'move-left', 'root': 12, 'key': 11}, {'action': 'move-right', 'root': 9, 'key': 11}, {'action': 'move-right', 'root': 10, 'key': 11}, {'action': 'return-false', 'root': -1, 'key': 11}], '1': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '2': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-false', 'root': -1, 'key': 30}], '3': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '4': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-true', 'root': -1, 'key': 30}]}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    return root', 'traces': {}}}
2021-02-22 16:52:11.063533,search,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root == None:\n        return False   \n    elif root == key:\n        return True\n    else:\n        return (search(root.left, key) or search(root.right, key))', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 11}, {'action': 'move-left', 'root': 12, 'key': 11}, {'action': 'move-right', 'root': 9, 'key': 11}, {'action': 'move-right', 'root': 10, 'key': 11}, {'action': 'return-false', 'root': -1, 'key': 11}], '1': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '2': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-false', 'root': -1, 'key': 30}], '3': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '4': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-true', 'root': -1, 'key': 30}]}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    return root', 'traces': {}}}
2021-02-22 16:52:13.672160,search,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root == None:\n        return False   \n    elif root == key:\n        return True\n    else:\n        return (search(root.left, key) or search(root.right, key))', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 11}, {'action': 'move-left', 'root': 12, 'key': 11}, {'action': 'move-right', 'root': 9, 'key': 11}, {'action': 'move-right', 'root': 10, 'key': 11}, {'action': 'return-false', 'root': -1, 'key': 11}], '1': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '2': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-false', 'root': -1, 'key': 30}], '3': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '4': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-true', 'root': -1, 'key': 30}]}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    return root', 'traces': {}}}
2021-02-22 16:52:31.718683,search,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root == None:\n        return False   \n    elif root == key:\n        return True\n    else:\n        return (search(root.left, key) or search(root.right, key))', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 11}, {'action': 'move-left', 'root': 12, 'key': 11}, {'action': 'move-right', 'root': 9, 'key': 11}, {'action': 'move-right', 'root': 10, 'key': 11}, {'action': 'return-false', 'root': -1, 'key': 11}], '1': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '2': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-false', 'root': -1, 'key': 30}], '3': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '4': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-true', 'root': -1, 'key': 30}]}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    return root', 'traces': {}}}
2021-02-22 16:52:37.790514,search,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root == None:\n        return True   \n    elif root == key:\n        return True\n    else:\n        return (search(root.left, key) or search(root.right, key))', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 11}, {'action': 'move-left', 'root': 12, 'key': 11}, {'action': 'move-right', 'root': 9, 'key': 11}, {'action': 'move-right', 'root': 10, 'key': 11}, {'action': 'return-false', 'root': -1, 'key': 11}], '1': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '2': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-false', 'root': -1, 'key': 30}], '3': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '4': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-true', 'root': -1, 'key': 30}]}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    return root', 'traces': {}}}
2021-02-22 16:53:00.552301,search,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root.val == None:\n        return False   \n    elif root.val == key:\n        return True\n    else:\n        return (search(root.left, key) or search(root.right, key))', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 11}, {'action': 'move-left', 'root': 12, 'key': 11}, {'action': 'move-right', 'root': 9, 'key': 11}, {'action': 'move-right', 'root': 10, 'key': 11}, {'action': 'return-false', 'root': -1, 'key': 11}], '1': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '2': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-false', 'root': -1, 'key': 30}], '3': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '4': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-true', 'root': -1, 'key': 30}]}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    return root', 'traces': {}}}
2021-02-22 16:53:06.811008,search,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root.val == None:\n        return False   \n    elif root.val == key:\n        return True\n    else:\n        return (search(root.left, key) or search(root.right, key))', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 11}, {'action': 'move-left', 'root': 12, 'key': 11}, {'action': 'move-right', 'root': 9, 'key': 11}, {'action': 'move-right', 'root': 10, 'key': 11}, {'action': 'return-false', 'root': -1, 'key': 11}], '1': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '2': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-false', 'root': -1, 'key': 30}], '3': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '4': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-true', 'root': -1, 'key': 30}]}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    return root', 'traces': {}}}
2021-02-22 16:55:17.409192,search,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root.val == None:\n        return False   \n    elif root.val == key:\n        return True\n    else:\n        left = False\n        if (root.left != None) {\n            left = search(root.left, key)\n        }        \n        right = False\n        if (root.right != None) {\n            right = search(root.right, key)\n        }        \n        return (left or right)', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 11}, {'action': 'move-left', 'root': 12, 'key': 11}, {'action': 'move-right', 'root': 9, 'key': 11}, {'action': 'move-right', 'root': 10, 'key': 11}, {'action': 'return-false', 'root': -1, 'key': 11}], '1': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '2': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-false', 'root': -1, 'key': 30}], '3': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '4': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-true', 'root': -1, 'key': 30}]}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    return root', 'traces': {}}}
2021-02-22 16:55:33.620205,search,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root.val == None:\n        return False   \n    elif root.val == key:\n        return True\n    else:\n        left = False\n        if (root.left.val != None) {\n            left = search(root.left, key)\n        }        \n        right = False\n        if (root.right.val != None) {\n            right = search(root.right, key)\n        }        \n        return (left or right)', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 11}, {'action': 'move-left', 'root': 12, 'key': 11}, {'action': 'move-right', 'root': 9, 'key': 11}, {'action': 'move-right', 'root': 10, 'key': 11}, {'action': 'return-false', 'root': -1, 'key': 11}], '1': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '2': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-false', 'root': -1, 'key': 30}], '3': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '4': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-true', 'root': -1, 'key': 30}]}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    return root', 'traces': {}}}
2021-02-22 16:55:35.224945,search,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root.val == None:\n        return False   \n    elif root.val == key:\n        return True\n    else:\n        left = False\n        if (root.left.val != None) {\n            left = search(root.left, key)\n        }        \n        right = False\n        if (root.right.val != None) {\n            right = search(root.right, key)\n        }        \n        return (left or right)', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 11}, {'action': 'move-left', 'root': 12, 'key': 11}, {'action': 'move-right', 'root': 9, 'key': 11}, {'action': 'move-right', 'root': 10, 'key': 11}, {'action': 'return-false', 'root': -1, 'key': 11}], '1': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '2': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-false', 'root': -1, 'key': 30}], '3': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '4': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-true', 'root': -1, 'key': 30}]}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    return root', 'traces': {}}}
2021-02-22 16:55:35.369867,search,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root.val == None:\n        return False   \n    elif root.val == key:\n        return True\n    else:\n        left = False\n        if (root.left.val != None) {\n            left = search(root.left, key)\n        }        \n        right = False\n        if (root.right.val != None) {\n            right = search(root.right, key)\n        }        \n        return (left or right)', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 11}, {'action': 'move-left', 'root': 12, 'key': 11}, {'action': 'move-right', 'root': 9, 'key': 11}, {'action': 'move-right', 'root': 10, 'key': 11}, {'action': 'return-false', 'root': -1, 'key': 11}], '1': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '2': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-false', 'root': -1, 'key': 30}], '3': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '4': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-true', 'root': -1, 'key': 30}]}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    return root', 'traces': {}}}
2021-02-22 16:55:39.550999,search,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root.val == None:\n        return False   \n    elif root.val == key:\n        return True\n    else:\n        left = False\n        if (root.left.val != None) {\n            left = search(root.left, key)\n        }        \n        right = False\n        if (root.right.val != None) {\n            right = search(root.right, key)\n        }        \n        return (left or right)', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 11}, {'action': 'move-left', 'root': 12, 'key': 11}, {'action': 'move-right', 'root': 9, 'key': 11}, {'action': 'move-right', 'root': 10, 'key': 11}, {'action': 'return-false', 'root': -1, 'key': 11}], '1': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '2': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-false', 'root': -1, 'key': 30}], '3': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '4': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-true', 'root': -1, 'key': 30}]}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    return root', 'traces': {}}}
2021-02-22 16:55:39.750657,search,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root.val == None:\n        return False   \n    elif root.val == key:\n        return True\n    else:\n        left = False\n        if (root.left.val != None) {\n            left = search(root.left, key)\n        }        \n        right = False\n        if (root.right.val != None) {\n            right = search(root.right, key)\n        }        \n        return (left or right)', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 11}, {'action': 'move-left', 'root': 12, 'key': 11}, {'action': 'move-right', 'root': 9, 'key': 11}, {'action': 'move-right', 'root': 10, 'key': 11}, {'action': 'return-false', 'root': -1, 'key': 11}], '1': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '2': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-false', 'root': -1, 'key': 30}], '3': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '4': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-true', 'root': -1, 'key': 30}]}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    return root', 'traces': {}}}
2021-02-22 16:55:39.883800,search,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root.val == None:\n        return False   \n    elif root.val == key:\n        return True\n    else:\n        left = False\n        if (root.left.val != None) {\n            left = search(root.left, key)\n        }        \n        right = False\n        if (root.right.val != None) {\n            right = search(root.right, key)\n        }        \n        return (left or right)', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 11}, {'action': 'move-left', 'root': 12, 'key': 11}, {'action': 'move-right', 'root': 9, 'key': 11}, {'action': 'move-right', 'root': 10, 'key': 11}, {'action': 'return-false', 'root': -1, 'key': 11}], '1': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '2': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-false', 'root': -1, 'key': 30}], '3': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '4': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-true', 'root': -1, 'key': 30}]}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    return root', 'traces': {}}}
2021-02-22 16:55:40.090308,search,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root.val == None:\n        return False   \n    elif root.val == key:\n        return True\n    else:\n        left = False\n        if (root.left.val != None) {\n            left = search(root.left, key)\n        }        \n        right = False\n        if (root.right.val != None) {\n            right = search(root.right, key)\n        }        \n        return (left or right)', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 11}, {'action': 'move-left', 'root': 12, 'key': 11}, {'action': 'move-right', 'root': 9, 'key': 11}, {'action': 'move-right', 'root': 10, 'key': 11}, {'action': 'return-false', 'root': -1, 'key': 11}], '1': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '2': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-false', 'root': -1, 'key': 30}], '3': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '4': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-true', 'root': -1, 'key': 30}]}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    return root', 'traces': {}}}
2021-02-22 16:55:40.275691,search,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root.val == None:\n        return False   \n    elif root.val == key:\n        return True\n    else:\n        left = False\n        if (root.left.val != None) {\n            left = search(root.left, key)\n        }        \n        right = False\n        if (root.right.val != None) {\n            right = search(root.right, key)\n        }        \n        return (left or right)', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 11}, {'action': 'move-left', 'root': 12, 'key': 11}, {'action': 'move-right', 'root': 9, 'key': 11}, {'action': 'move-right', 'root': 10, 'key': 11}, {'action': 'return-false', 'root': -1, 'key': 11}], '1': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '2': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-false', 'root': -1, 'key': 30}], '3': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '4': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-true', 'root': -1, 'key': 30}]}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    return root', 'traces': {}}}
2021-02-22 16:55:40.402489,search,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root.val == None:\n        return False   \n    elif root.val == key:\n        return True\n    else:\n        left = False\n        if (root.left.val != None) {\n            left = search(root.left, key)\n        }        \n        right = False\n        if (root.right.val != None) {\n            right = search(root.right, key)\n        }        \n        return (left or right)', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 11}, {'action': 'move-left', 'root': 12, 'key': 11}, {'action': 'move-right', 'root': 9, 'key': 11}, {'action': 'move-right', 'root': 10, 'key': 11}, {'action': 'return-false', 'root': -1, 'key': 11}], '1': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '2': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-false', 'root': -1, 'key': 30}], '3': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '4': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-true', 'root': -1, 'key': 30}]}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    return root', 'traces': {}}}
2021-02-22 16:55:40.512224,search,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root.val == None:\n        return False   \n    elif root.val == key:\n        return True\n    else:\n        left = False\n        if (root.left.val != None) {\n            left = search(root.left, key)\n        }        \n        right = False\n        if (root.right.val != None) {\n            right = search(root.right, key)\n        }        \n        return (left or right)', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 11}, {'action': 'move-left', 'root': 12, 'key': 11}, {'action': 'move-right', 'root': 9, 'key': 11}, {'action': 'move-right', 'root': 10, 'key': 11}, {'action': 'return-false', 'root': -1, 'key': 11}], '1': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '2': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-false', 'root': -1, 'key': 30}], '3': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '4': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-true', 'root': -1, 'key': 30}]}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    return root', 'traces': {}}}
2021-02-22 16:55:40.707909,search,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root.val == None:\n        return False   \n    elif root.val == key:\n        return True\n    else:\n        left = False\n        if (root.left.val != None) {\n            left = search(root.left, key)\n        }        \n        right = False\n        if (root.right.val != None) {\n            right = search(root.right, key)\n        }        \n        return (left or right)', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 11}, {'action': 'move-left', 'root': 12, 'key': 11}, {'action': 'move-right', 'root': 9, 'key': 11}, {'action': 'move-right', 'root': 10, 'key': 11}, {'action': 'return-false', 'root': -1, 'key': 11}], '1': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '2': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-false', 'root': -1, 'key': 30}], '3': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '4': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-true', 'root': -1, 'key': 30}]}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    return root', 'traces': {}}}
2021-02-22 16:55:40.856683,search,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root.val == None:\n        return False   \n    elif root.val == key:\n        return True\n    else:\n        left = False\n        if (root.left.val != None) {\n            left = search(root.left, key)\n        }        \n        right = False\n        if (root.right.val != None) {\n            right = search(root.right, key)\n        }        \n        return (left or right)', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 11}, {'action': 'move-left', 'root': 12, 'key': 11}, {'action': 'move-right', 'root': 9, 'key': 11}, {'action': 'move-right', 'root': 10, 'key': 11}, {'action': 'return-false', 'root': -1, 'key': 11}], '1': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '2': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-false', 'root': -1, 'key': 30}], '3': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '4': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-true', 'root': -1, 'key': 30}]}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    return root', 'traces': {}}}
2021-02-22 16:56:12.306153,search,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root.val == None:\n        return False   \n    elif root.val == key:\n        return True\n    else:\n        left = False\n        if (root.left.val != None):\n            left = search(root.left, key) \n            \n        right = False\n        if (root.right.val != None):\n            right = search(root.right, key)\n       \n        return (left or right)', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 11}, {'action': 'move-left', 'root': 12, 'key': 11}, {'action': 'move-right', 'root': 9, 'key': 11}, {'action': 'move-right', 'root': 10, 'key': 11}, {'action': 'return-false', 'root': -1, 'key': 11}], '1': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '2': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-false', 'root': -1, 'key': 30}], '3': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '4': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-true', 'root': -1, 'key': 30}]}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    return root', 'traces': {}}}
2021-02-22 16:56:16.954870,search,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root.val == None:\n        return False   \n    elif root.val == key:\n        return True\n    else:\n        left = False\n        if (root.left != None):\n            left = search(root.left, key) \n            \n        right = False\n        if (root.right != None):\n            right = search(root.right, key)\n       \n        return (left or right)', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 11}, {'action': 'move-left', 'root': 12, 'key': 11}, {'action': 'move-right', 'root': 9, 'key': 11}, {'action': 'move-right', 'root': 10, 'key': 11}, {'action': 'return-false', 'root': -1, 'key': 11}], '1': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '2': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-false', 'root': -1, 'key': 30}], '3': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '4': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-true', 'root': -1, 'key': 30}]}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    return root', 'traces': {}}}
2021-02-22 16:56:22.777075,search,check-correct,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root.val == None:\n        return False   \n    elif root.val == key:\n        return True\n    else:\n        left = False\n        if (root.left != None):\n            left = search(root.left, key) \n            \n        right = False\n        if (root.right != None):\n            right = search(root.right, key)\n       \n        return (left or right)', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 11}, {'action': 'move-left', 'root': 12, 'key': 11}, {'action': 'move-right', 'root': 9, 'key': 11}, {'action': 'move-right', 'root': 10, 'key': 11}, {'action': 'return-false', 'root': -1, 'key': 11}], '1': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '2': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-false', 'root': -1, 'key': 30}], '3': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '4': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-true', 'root': -1, 'key': 30}]}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    return root', 'traces': {}}}
2021-02-22 16:56:25.221765,search,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root.val == None:\n        return False   \n    elif root.val == key:\n        return True\n    else:\n        left = False\n        if (root.left != None):\n            left = search(root.left, key) \n            \n        right = False\n        if (root.right != None):\n            right = search(root.right, key)\n       \n        return (left or right)', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 11}, {'action': 'move-left', 'root': 12, 'key': 11}, {'action': 'move-right', 'root': 9, 'key': 11}, {'action': 'move-right', 'root': 10, 'key': 11}, {'action': 'return-false', 'root': -1, 'key': 11}], '1': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '2': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-false', 'root': -1, 'key': 30}], '3': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '4': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-true', 'root': -1, 'key': 30}]}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    return root', 'traces': {}}}
2021-02-22 16:56:25.920299,search,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root.val == None:\n        return False   \n    elif root.val == key:\n        return True\n    else:\n        left = False\n        if (root.left != None):\n            left = search(root.left, key) \n            \n        right = False\n        if (root.right != None):\n            right = search(root.right, key)\n       \n        return (left or right)', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 11}, {'action': 'move-left', 'root': 12, 'key': 11}, {'action': 'move-right', 'root': 9, 'key': 11}, {'action': 'move-right', 'root': 10, 'key': 11}, {'action': 'return-false', 'root': -1, 'key': 11}], '1': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '2': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-false', 'root': -1, 'key': 30}], '3': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '4': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-true', 'root': -1, 'key': 30}]}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    return root', 'traces': {}}}
2021-02-22 16:56:30.981844,search,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root.val == None:\n        return False   \n    elif root.val == key:\n        return True\n    else:\n        left = False\n        if (root.left != None):\n            left = search(root.left, key) \n            \n        right = False\n        if (root.right != None):\n            right = search(root.right, key)\n       \n        return (left or right)', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 11}, {'action': 'move-left', 'root': 12, 'key': 11}, {'action': 'move-right', 'root': 9, 'key': 11}, {'action': 'move-right', 'root': 10, 'key': 11}, {'action': 'return-false', 'root': -1, 'key': 11}], '1': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '2': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-false', 'root': -1, 'key': 30}], '3': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '4': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-true', 'root': -1, 'key': 30}]}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    return root', 'traces': {}}}
2021-02-22 16:56:34.347669,search,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root.val == None:\n        return False   \n    elif root.val == key:\n        return True\n    else:\n        left = False\n        if (root.left != None):\n            left = search(root.left, key) \n            \n        right = False\n        if (root.right != None):\n            right = search(root.right, key)\n       \n        return (left or right)', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 11}, {'action': 'move-left', 'root': 12, 'key': 11}, {'action': 'move-right', 'root': 9, 'key': 11}, {'action': 'move-right', 'root': 10, 'key': 11}, {'action': 'return-false', 'root': -1, 'key': 11}], '1': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '2': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-false', 'root': -1, 'key': 30}], '3': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '4': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-true', 'root': -1, 'key': 30}]}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    return root', 'traces': {}}}
2021-02-22 16:56:35.013171,search,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root.val == None:\n        return False   \n    elif root.val == key:\n        return True\n    else:\n        left = False\n        if (root.left != None):\n            left = search(root.left, key) \n            \n        right = False\n        if (root.right != None):\n            right = search(root.right, key)\n       \n        return (left or right)', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 11}, {'action': 'move-left', 'root': 12, 'key': 11}, {'action': 'move-right', 'root': 9, 'key': 11}, {'action': 'move-right', 'root': 10, 'key': 11}, {'action': 'return-false', 'root': -1, 'key': 11}], '1': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '2': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-false', 'root': -1, 'key': 30}], '3': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '4': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-true', 'root': -1, 'key': 30}]}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    return root', 'traces': {}}}
2021-02-22 16:56:35.096191,search,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root.val == None:\n        return False   \n    elif root.val == key:\n        return True\n    else:\n        left = False\n        if (root.left != None):\n            left = search(root.left, key) \n            \n        right = False\n        if (root.right != None):\n            right = search(root.right, key)\n       \n        return (left or right)', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 11}, {'action': 'move-left', 'root': 12, 'key': 11}, {'action': 'move-right', 'root': 9, 'key': 11}, {'action': 'move-right', 'root': 10, 'key': 11}, {'action': 'return-false', 'root': -1, 'key': 11}], '1': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '2': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-false', 'root': -1, 'key': 30}], '3': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '4': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-true', 'root': -1, 'key': 30}]}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    return root', 'traces': {}}}
2021-02-22 16:56:39.790978,search,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root.val == None:\n        return False   \n    elif root.val == key:\n        return True\n    else:\n        left = False\n        if (root.left != None):\n            left = search(root.left, key) \n            \n        right = False\n        if (root.right != None):\n            right = search(root.right, key)\n       \n        return (left or right)', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 11}, {'action': 'move-left', 'root': 12, 'key': 11}, {'action': 'move-right', 'root': 9, 'key': 11}, {'action': 'move-right', 'root': 10, 'key': 11}, {'action': 'return-false', 'root': -1, 'key': 11}], '1': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '2': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-false', 'root': -1, 'key': 30}], '3': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '4': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-true', 'root': -1, 'key': 30}]}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    return root', 'traces': {}}}
2021-02-22 16:56:40.112144,search,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root.val == None:\n        return False   \n    elif root.val == key:\n        return True\n    else:\n        left = False\n        if (root.left != None):\n            left = search(root.left, key) \n            \n        right = False\n        if (root.right != None):\n            right = search(root.right, key)\n       \n        return (left or right)', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 11}, {'action': 'move-left', 'root': 12, 'key': 11}, {'action': 'move-right', 'root': 9, 'key': 11}, {'action': 'move-right', 'root': 10, 'key': 11}, {'action': 'return-false', 'root': -1, 'key': 11}], '1': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '2': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-false', 'root': -1, 'key': 30}], '3': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '4': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-true', 'root': -1, 'key': 30}]}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    return root', 'traces': {}}}
2021-02-22 16:56:40.320980,search,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root.val == None:\n        return False   \n    elif root.val == key:\n        return True\n    else:\n        left = False\n        if (root.left != None):\n            left = search(root.left, key) \n            \n        right = False\n        if (root.right != None):\n            right = search(root.right, key)\n       \n        return (left or right)', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 11}, {'action': 'move-left', 'root': 12, 'key': 11}, {'action': 'move-right', 'root': 9, 'key': 11}, {'action': 'move-right', 'root': 10, 'key': 11}, {'action': 'return-false', 'root': -1, 'key': 11}], '1': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '2': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-false', 'root': -1, 'key': 30}], '3': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '4': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-true', 'root': -1, 'key': 30}]}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    return root', 'traces': {}}}
2021-02-22 16:56:43.298153,search,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root.val == None:\n        return False   \n    elif root.val == key:\n        return True\n    else:\n        left = False\n        if (root.left != None):\n            left = search(root.left, key) \n            \n        right = False\n        if (root.right != None):\n            right = search(root.right, key)\n       \n        return (left or right)', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 11}, {'action': 'move-left', 'root': 12, 'key': 11}, {'action': 'move-right', 'root': 9, 'key': 11}, {'action': 'move-right', 'root': 10, 'key': 11}, {'action': 'return-false', 'root': -1, 'key': 11}], '1': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '2': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-false', 'root': -1, 'key': 30}], '3': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '4': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-true', 'root': -1, 'key': 30}]}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    return root', 'traces': {}}}
2021-02-22 16:56:43.542605,search,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root.val == None:\n        return False   \n    elif root.val == key:\n        return True\n    else:\n        left = False\n        if (root.left != None):\n            left = search(root.left, key) \n            \n        right = False\n        if (root.right != None):\n            right = search(root.right, key)\n       \n        return (left or right)', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 11}, {'action': 'move-left', 'root': 12, 'key': 11}, {'action': 'move-right', 'root': 9, 'key': 11}, {'action': 'move-right', 'root': 10, 'key': 11}, {'action': 'return-false', 'root': -1, 'key': 11}], '1': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '2': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-false', 'root': -1, 'key': 30}], '3': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '4': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-true', 'root': -1, 'key': 30}]}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    return root', 'traces': {}}}
2021-02-22 16:56:43.725346,search,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root.val == None:\n        return False   \n    elif root.val == key:\n        return True\n    else:\n        left = False\n        if (root.left != None):\n            left = search(root.left, key) \n            \n        right = False\n        if (root.right != None):\n            right = search(root.right, key)\n       \n        return (left or right)', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 11}, {'action': 'move-left', 'root': 12, 'key': 11}, {'action': 'move-right', 'root': 9, 'key': 11}, {'action': 'move-right', 'root': 10, 'key': 11}, {'action': 'return-false', 'root': -1, 'key': 11}], '1': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '2': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-false', 'root': -1, 'key': 30}], '3': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '4': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-true', 'root': -1, 'key': 30}]}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    return root', 'traces': {}}}
2021-02-22 16:56:45.948059,search,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root.val == None:\n        return False   \n    elif root.val == key:\n        return True\n    else:\n        left = False\n        if (root.left != None):\n            left = search(root.left, key) \n            \n        right = False\n        if (root.right != None):\n            right = search(root.right, key)\n       \n        return (left or right)', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 11}, {'action': 'move-left', 'root': 12, 'key': 11}, {'action': 'move-right', 'root': 9, 'key': 11}, {'action': 'move-right', 'root': 10, 'key': 11}, {'action': 'return-false', 'root': -1, 'key': 11}], '1': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '2': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-false', 'root': -1, 'key': 30}], '3': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '4': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-true', 'root': -1, 'key': 30}]}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    return root', 'traces': {}}}
2021-02-22 16:56:46.466789,search,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root.val == None:\n        return False   \n    elif root.val == key:\n        return True\n    else:\n        left = False\n        if (root.left != None):\n            left = search(root.left, key) \n            \n        right = False\n        if (root.right != None):\n            right = search(root.right, key)\n       \n        return (left or right)', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 11}, {'action': 'move-left', 'root': 12, 'key': 11}, {'action': 'move-right', 'root': 9, 'key': 11}, {'action': 'move-right', 'root': 10, 'key': 11}, {'action': 'return-false', 'root': -1, 'key': 11}], '1': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '2': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-false', 'root': -1, 'key': 30}], '3': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '4': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-true', 'root': -1, 'key': 30}]}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    return root', 'traces': {}}}
2021-02-22 16:56:48.753977,search,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root.val == None:\n        return False   \n    elif root.val == key:\n        return True\n    else:\n        left = False\n        if (root.left != None):\n            left = search(root.left, key) \n            \n        right = False\n        if (root.right != None):\n            right = search(root.right, key)\n       \n        return (left or right)', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 11}, {'action': 'move-left', 'root': 12, 'key': 11}, {'action': 'move-right', 'root': 9, 'key': 11}, {'action': 'move-right', 'root': 10, 'key': 11}, {'action': 'return-false', 'root': -1, 'key': 11}], '1': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '2': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-false', 'root': -1, 'key': 30}], '3': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '4': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-true', 'root': -1, 'key': 30}]}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    return root', 'traces': {}}}
2021-02-22 16:56:49.209002,search,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root.val == None:\n        return False   \n    elif root.val == key:\n        return True\n    else:\n        left = False\n        if (root.left != None):\n            left = search(root.left, key) \n            \n        right = False\n        if (root.right != None):\n            right = search(root.right, key)\n       \n        return (left or right)', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 11}, {'action': 'move-left', 'root': 12, 'key': 11}, {'action': 'move-right', 'root': 9, 'key': 11}, {'action': 'move-right', 'root': 10, 'key': 11}, {'action': 'return-false', 'root': -1, 'key': 11}], '1': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '2': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-false', 'root': -1, 'key': 30}], '3': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '4': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-true', 'root': -1, 'key': 30}]}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    return root', 'traces': {}}}
2021-02-22 16:56:49.419709,search,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root.val == None:\n        return False   \n    elif root.val == key:\n        return True\n    else:\n        left = False\n        if (root.left != None):\n            left = search(root.left, key) \n            \n        right = False\n        if (root.right != None):\n            right = search(root.right, key)\n       \n        return (left or right)', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 11}, {'action': 'move-left', 'root': 12, 'key': 11}, {'action': 'move-right', 'root': 9, 'key': 11}, {'action': 'move-right', 'root': 10, 'key': 11}, {'action': 'return-false', 'root': -1, 'key': 11}], '1': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '2': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-false', 'root': -1, 'key': 30}], '3': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '4': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-true', 'root': -1, 'key': 30}]}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    return root', 'traces': {}}}
2021-02-22 16:56:53.296318,search,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root.val == None:\n        return False   \n    elif root.val == key:\n        return True\n    else:\n        left = False\n        if (root.left != None):\n            left = search(root.left, key) \n            \n        right = False\n        if (root.right != None):\n            right = search(root.right, key)\n       \n        return (left or right)', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 11}, {'action': 'move-left', 'root': 12, 'key': 11}, {'action': 'move-right', 'root': 9, 'key': 11}, {'action': 'move-right', 'root': 10, 'key': 11}, {'action': 'return-false', 'root': -1, 'key': 11}], '1': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '2': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-false', 'root': -1, 'key': 30}], '3': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '4': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-true', 'root': -1, 'key': 30}]}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    return root', 'traces': {}}}
2021-02-22 16:56:54.089126,search,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root.val == None:\n        return False   \n    elif root.val == key:\n        return True\n    else:\n        left = False\n        if (root.left != None):\n            left = search(root.left, key) \n            \n        right = False\n        if (root.right != None):\n            right = search(root.right, key)\n       \n        return (left or right)', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 11}, {'action': 'move-left', 'root': 12, 'key': 11}, {'action': 'move-right', 'root': 9, 'key': 11}, {'action': 'move-right', 'root': 10, 'key': 11}, {'action': 'return-false', 'root': -1, 'key': 11}], '1': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '2': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-false', 'root': -1, 'key': 30}], '3': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '4': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-true', 'root': -1, 'key': 30}]}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    return root', 'traces': {}}}
2021-02-22 16:56:57.192703,search,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root.val == None:\n        return False   \n    elif root.val == key:\n        return True\n    else:\n        left = False\n        if (root.left != None):\n            left = search(root.left, key) \n            \n        right = False\n        if (root.right != None):\n            right = search(root.right, key)\n       \n        return (left or right)', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 11}, {'action': 'move-left', 'root': 12, 'key': 11}, {'action': 'move-right', 'root': 9, 'key': 11}, {'action': 'move-right', 'root': 10, 'key': 11}, {'action': 'return-false', 'root': -1, 'key': 11}], '1': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '2': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-false', 'root': -1, 'key': 30}], '3': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '4': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-true', 'root': -1, 'key': 30}]}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    return root', 'traces': {}}}
2021-02-22 16:57:03.152545,search,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root.val == None:\n        return False   \n    elif root.val == key:\n        return True\n    else:\n        left = False\n        if (root.left != None):\n            left = search(root.left, key) \n            \n        right = False\n        if (root.right != None):\n            right = search(root.right, key)\n       \n        return (left or right)', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 11}, {'action': 'move-left', 'root': 12, 'key': 11}, {'action': 'move-right', 'root': 9, 'key': 11}, {'action': 'move-right', 'root': 10, 'key': 11}, {'action': 'return-false', 'root': -1, 'key': 11}], '1': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '2': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-false', 'root': -1, 'key': 30}], '3': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '4': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-true', 'root': -1, 'key': 30}]}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    return root', 'traces': {}}}
2021-02-22 16:57:30.792302,search,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root.val == None:\n        return False   \n    elif root.val == key:\n        return True\n    else:\n        left = False\n        if (root.left != None):\n            left = search(root.left, key) \n            \n        right = False\n        if (root.right != None):\n            right = search(root.right, key)\n       \n        return (left or right)', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 11}, {'action': 'move-left', 'root': 12, 'key': 11}, {'action': 'move-right', 'root': 9, 'key': 11}, {'action': 'move-right', 'root': 10, 'key': 11}, {'action': 'return-false', 'root': -1, 'key': 11}], '1': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '2': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-false', 'root': -1, 'key': 30}], '3': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '4': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-true', 'root': -1, 'key': 30}]}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    return root', 'traces': {}}}
2021-02-22 16:57:34.448267,search,check-correct,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root.val == None:\n        return False   \n    elif root.val == key:\n        return True\n    else:\n        left = False\n        if (root.left != None):\n            left = search(root.left, key) \n            \n        right = False\n        if (root.right != None):\n            right = search(root.right, key)\n       \n        return (left or right)', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 11}, {'action': 'move-left', 'root': 12, 'key': 11}, {'action': 'move-right', 'root': 9, 'key': 11}, {'action': 'move-right', 'root': 10, 'key': 11}, {'action': 'return-false', 'root': -1, 'key': 11}], '1': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '2': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-false', 'root': -1, 'key': 30}], '3': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '4': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-true', 'root': -1, 'key': 30}]}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    return root', 'traces': {}}}
2021-02-22 16:57:40.696115,search,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root.val == None:\n        return False   \n    elif root.val == key:\n        return True\n    else:\n        left = False\n        if (root.left != None):\n            left = search(root.left, key) \n            \n        right = False\n        if (root.right != None):\n            right = search(root.right, key)\n       \n        return (left or right)', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 11}, {'action': 'move-left', 'root': 12, 'key': 11}, {'action': 'move-right', 'root': 9, 'key': 11}, {'action': 'move-right', 'root': 10, 'key': 11}, {'action': 'return-false', 'root': -1, 'key': 11}], '1': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '2': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-false', 'root': -1, 'key': 30}], '3': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '4': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-true', 'root': -1, 'key': 30}]}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    return root', 'traces': {}}}
2021-02-22 16:57:41.302797,search,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root.val == None:\n        return False   \n    elif root.val == key:\n        return True\n    else:\n        left = False\n        if (root.left != None):\n            left = search(root.left, key) \n            \n        right = False\n        if (root.right != None):\n            right = search(root.right, key)\n       \n        return (left or right)', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 11}, {'action': 'move-left', 'root': 12, 'key': 11}, {'action': 'move-right', 'root': 9, 'key': 11}, {'action': 'move-right', 'root': 10, 'key': 11}, {'action': 'return-false', 'root': -1, 'key': 11}], '1': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '2': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-false', 'root': -1, 'key': 30}], '3': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '4': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-true', 'root': -1, 'key': 30}]}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    return root', 'traces': {}}}
2021-02-22 16:57:44.160215,search,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root.val == None:\n        return False   \n    elif root.val == key:\n        return True\n    else:\n        left = False\n        if (root.left != None):\n            left = search(root.left, key) \n            \n        right = False\n        if (root.right != None):\n            right = search(root.right, key)\n       \n        return (left or right)', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 11}, {'action': 'move-left', 'root': 12, 'key': 11}, {'action': 'move-right', 'root': 9, 'key': 11}, {'action': 'move-right', 'root': 10, 'key': 11}, {'action': 'return-false', 'root': -1, 'key': 11}], '1': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '2': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-false', 'root': -1, 'key': 30}], '3': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '4': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-true', 'root': -1, 'key': 30}]}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    return root', 'traces': {}}}
2021-02-22 16:57:47.290583,search,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root.val == None:\n        return False   \n    elif root.val == key:\n        return True\n    else:\n        left = False\n        if (root.left != None):\n            left = search(root.left, key) \n            \n        right = False\n        if (root.right != None):\n            right = search(root.right, key)\n       \n        return (left or right)', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 11}, {'action': 'move-left', 'root': 12, 'key': 11}, {'action': 'move-right', 'root': 9, 'key': 11}, {'action': 'move-right', 'root': 10, 'key': 11}, {'action': 'return-false', 'root': -1, 'key': 11}], '1': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '2': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-false', 'root': -1, 'key': 30}], '3': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '4': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-true', 'root': -1, 'key': 30}]}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    return root', 'traces': {}}}
2021-02-22 16:57:47.456988,search,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root.val == None:\n        return False   \n    elif root.val == key:\n        return True\n    else:\n        left = False\n        if (root.left != None):\n            left = search(root.left, key) \n            \n        right = False\n        if (root.right != None):\n            right = search(root.right, key)\n       \n        return (left or right)', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 11}, {'action': 'move-left', 'root': 12, 'key': 11}, {'action': 'move-right', 'root': 9, 'key': 11}, {'action': 'move-right', 'root': 10, 'key': 11}, {'action': 'return-false', 'root': -1, 'key': 11}], '1': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '2': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-false', 'root': -1, 'key': 30}], '3': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '4': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-true', 'root': -1, 'key': 30}]}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    return root', 'traces': {}}}
2021-02-22 16:57:47.607984,search,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root.val == None:\n        return False   \n    elif root.val == key:\n        return True\n    else:\n        left = False\n        if (root.left != None):\n            left = search(root.left, key) \n            \n        right = False\n        if (root.right != None):\n            right = search(root.right, key)\n       \n        return (left or right)', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 11}, {'action': 'move-left', 'root': 12, 'key': 11}, {'action': 'move-right', 'root': 9, 'key': 11}, {'action': 'move-right', 'root': 10, 'key': 11}, {'action': 'return-false', 'root': -1, 'key': 11}], '1': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '2': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-false', 'root': -1, 'key': 30}], '3': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '4': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-true', 'root': -1, 'key': 30}]}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    return root', 'traces': {}}}
2021-02-22 16:57:50.556012,search,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root.val == None:\n        return False   \n    elif root.val == key:\n        return True\n    else:\n        left = False\n        if (root.left != None):\n            left = search(root.left, key) \n            \n        right = False\n        if (root.right != None):\n            right = search(root.right, key)\n       \n        return (left or right)', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 11}, {'action': 'move-left', 'root': 12, 'key': 11}, {'action': 'move-right', 'root': 9, 'key': 11}, {'action': 'move-right', 'root': 10, 'key': 11}, {'action': 'return-false', 'root': -1, 'key': 11}], '1': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '2': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-false', 'root': -1, 'key': 30}], '3': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '4': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-true', 'root': -1, 'key': 30}]}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    return root', 'traces': {}}}
2021-02-22 16:57:50.676631,search,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root.val == None:\n        return False   \n    elif root.val == key:\n        return True\n    else:\n        left = False\n        if (root.left != None):\n            left = search(root.left, key) \n            \n        right = False\n        if (root.right != None):\n            right = search(root.right, key)\n       \n        return (left or right)', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 11}, {'action': 'move-left', 'root': 12, 'key': 11}, {'action': 'move-right', 'root': 9, 'key': 11}, {'action': 'move-right', 'root': 10, 'key': 11}, {'action': 'return-false', 'root': -1, 'key': 11}], '1': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '2': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-false', 'root': -1, 'key': 30}], '3': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '4': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-true', 'root': -1, 'key': 30}]}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    return root', 'traces': {}}}
2021-02-22 16:57:50.841428,search,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root.val == None:\n        return False   \n    elif root.val == key:\n        return True\n    else:\n        left = False\n        if (root.left != None):\n            left = search(root.left, key) \n            \n        right = False\n        if (root.right != None):\n            right = search(root.right, key)\n       \n        return (left or right)', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 11}, {'action': 'move-left', 'root': 12, 'key': 11}, {'action': 'move-right', 'root': 9, 'key': 11}, {'action': 'move-right', 'root': 10, 'key': 11}, {'action': 'return-false', 'root': -1, 'key': 11}], '1': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '2': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-false', 'root': -1, 'key': 30}], '3': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '4': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-true', 'root': -1, 'key': 30}]}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    return root', 'traces': {}}}
2021-02-22 16:57:53.310469,search,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root.val == None:\n        return False   \n    elif root.val == key:\n        return True\n    else:\n        left = False\n        if (root.left != None):\n            left = search(root.left, key) \n            \n        right = False\n        if (root.right != None):\n            right = search(root.right, key)\n       \n        return (left or right)', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 11}, {'action': 'move-left', 'root': 12, 'key': 11}, {'action': 'move-right', 'root': 9, 'key': 11}, {'action': 'move-right', 'root': 10, 'key': 11}, {'action': 'return-false', 'root': -1, 'key': 11}], '1': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '2': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-false', 'root': -1, 'key': 30}], '3': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '4': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-true', 'root': -1, 'key': 30}]}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    return root', 'traces': {}}}
2021-02-22 16:57:53.473634,search,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root.val == None:\n        return False   \n    elif root.val == key:\n        return True\n    else:\n        left = False\n        if (root.left != None):\n            left = search(root.left, key) \n            \n        right = False\n        if (root.right != None):\n            right = search(root.right, key)\n       \n        return (left or right)', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 11}, {'action': 'move-left', 'root': 12, 'key': 11}, {'action': 'move-right', 'root': 9, 'key': 11}, {'action': 'move-right', 'root': 10, 'key': 11}, {'action': 'return-false', 'root': -1, 'key': 11}], '1': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '2': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-false', 'root': -1, 'key': 30}], '3': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '4': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-true', 'root': -1, 'key': 30}]}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    return root', 'traces': {}}}
2021-02-22 16:57:56.283106,search,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root.val == None:\n        return False   \n    elif root.val == key:\n        return True\n    else:\n        left = False\n        if (root.left != None):\n            left = search(root.left, key) \n            \n        right = False\n        if (root.right != None):\n            right = search(root.right, key)\n       \n        return (left or right)', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 11}, {'action': 'move-left', 'root': 12, 'key': 11}, {'action': 'move-right', 'root': 9, 'key': 11}, {'action': 'move-right', 'root': 10, 'key': 11}, {'action': 'return-false', 'root': -1, 'key': 11}], '1': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '2': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-false', 'root': -1, 'key': 30}], '3': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '4': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-true', 'root': -1, 'key': 30}]}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    return root', 'traces': {}}}
2021-02-22 16:57:56.749965,search,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root.val == None:\n        return False   \n    elif root.val == key:\n        return True\n    else:\n        left = False\n        if (root.left != None):\n            left = search(root.left, key) \n            \n        right = False\n        if (root.right != None):\n            right = search(root.right, key)\n       \n        return (left or right)', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 11}, {'action': 'move-left', 'root': 12, 'key': 11}, {'action': 'move-right', 'root': 9, 'key': 11}, {'action': 'move-right', 'root': 10, 'key': 11}, {'action': 'return-false', 'root': -1, 'key': 11}], '1': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '2': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-false', 'root': -1, 'key': 30}], '3': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '4': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-true', 'root': -1, 'key': 30}]}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    return root', 'traces': {}}}
2021-02-22 16:57:59.672245,search,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root.val == None:\n        return False   \n    elif root.val == key:\n        return True\n    else:\n        left = False\n        if (root.left != None):\n            left = search(root.left, key) \n            \n        right = False\n        if (root.right != None):\n            right = search(root.right, key)\n       \n        return (left or right)', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 11}, {'action': 'move-left', 'root': 12, 'key': 11}, {'action': 'move-right', 'root': 9, 'key': 11}, {'action': 'move-right', 'root': 10, 'key': 11}, {'action': 'return-false', 'root': -1, 'key': 11}], '1': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '2': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-false', 'root': -1, 'key': 30}], '3': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '4': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-true', 'root': -1, 'key': 30}]}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    return root', 'traces': {}}}
2021-02-22 16:57:59.879153,search,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root.val == None:\n        return False   \n    elif root.val == key:\n        return True\n    else:\n        left = False\n        if (root.left != None):\n            left = search(root.left, key) \n            \n        right = False\n        if (root.right != None):\n            right = search(root.right, key)\n       \n        return (left or right)', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 11}, {'action': 'move-left', 'root': 12, 'key': 11}, {'action': 'move-right', 'root': 9, 'key': 11}, {'action': 'move-right', 'root': 10, 'key': 11}, {'action': 'return-false', 'root': -1, 'key': 11}], '1': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '2': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-false', 'root': -1, 'key': 30}], '3': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '4': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-true', 'root': -1, 'key': 30}]}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    return root', 'traces': {}}}
2021-02-22 16:58:00.064748,search,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root.val == None:\n        return False   \n    elif root.val == key:\n        return True\n    else:\n        left = False\n        if (root.left != None):\n            left = search(root.left, key) \n            \n        right = False\n        if (root.right != None):\n            right = search(root.right, key)\n       \n        return (left or right)', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 11}, {'action': 'move-left', 'root': 12, 'key': 11}, {'action': 'move-right', 'root': 9, 'key': 11}, {'action': 'move-right', 'root': 10, 'key': 11}, {'action': 'return-false', 'root': -1, 'key': 11}], '1': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '2': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-false', 'root': -1, 'key': 30}], '3': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '4': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-true', 'root': -1, 'key': 30}]}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    return root', 'traces': {}}}
2021-02-22 16:58:03.138634,search,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root.val == None:\n        return False   \n    elif root.val == key:\n        return True\n    else:\n        left = False\n        if (root.left != None):\n            left = search(root.left, key) \n            \n        right = False\n        if (root.right != None):\n            right = search(root.right, key)\n       \n        return (left or right)', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 11}, {'action': 'move-left', 'root': 12, 'key': 11}, {'action': 'move-right', 'root': 9, 'key': 11}, {'action': 'move-right', 'root': 10, 'key': 11}, {'action': 'return-false', 'root': -1, 'key': 11}], '1': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '2': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-false', 'root': -1, 'key': 30}], '3': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '4': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-true', 'root': -1, 'key': 30}]}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    return root', 'traces': {}}}
2021-02-22 16:58:03.327337,search,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root.val == None:\n        return False   \n    elif root.val == key:\n        return True\n    else:\n        left = False\n        if (root.left != None):\n            left = search(root.left, key) \n            \n        right = False\n        if (root.right != None):\n            right = search(root.right, key)\n       \n        return (left or right)', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 11}, {'action': 'move-left', 'root': 12, 'key': 11}, {'action': 'move-right', 'root': 9, 'key': 11}, {'action': 'move-right', 'root': 10, 'key': 11}, {'action': 'return-false', 'root': -1, 'key': 11}], '1': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '2': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-false', 'root': -1, 'key': 30}], '3': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '4': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-true', 'root': -1, 'key': 30}]}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    return root', 'traces': {}}}
2021-02-22 16:58:03.522237,search,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root.val == None:\n        return False   \n    elif root.val == key:\n        return True\n    else:\n        left = False\n        if (root.left != None):\n            left = search(root.left, key) \n            \n        right = False\n        if (root.right != None):\n            right = search(root.right, key)\n       \n        return (left or right)', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 11}, {'action': 'move-left', 'root': 12, 'key': 11}, {'action': 'move-right', 'root': 9, 'key': 11}, {'action': 'move-right', 'root': 10, 'key': 11}, {'action': 'return-false', 'root': -1, 'key': 11}], '1': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '2': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-false', 'root': -1, 'key': 30}], '3': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '4': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-true', 'root': -1, 'key': 30}]}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    return root', 'traces': {}}}
2021-02-22 16:58:05.714878,search,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root.val == None:\n        return False   \n    elif root.val == key:\n        return True\n    else:\n        left = False\n        if (root.left != None):\n            left = search(root.left, key) \n            \n        right = False\n        if (root.right != None):\n            right = search(root.right, key)\n       \n        return (left or right)', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 11}, {'action': 'move-left', 'root': 12, 'key': 11}, {'action': 'move-right', 'root': 9, 'key': 11}, {'action': 'move-right', 'root': 10, 'key': 11}, {'action': 'return-false', 'root': -1, 'key': 11}], '1': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '2': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-false', 'root': -1, 'key': 30}], '3': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '4': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-true', 'root': -1, 'key': 30}]}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    return root', 'traces': {}}}
2021-02-22 16:58:05.835063,search,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root.val == None:\n        return False   \n    elif root.val == key:\n        return True\n    else:\n        left = False\n        if (root.left != None):\n            left = search(root.left, key) \n            \n        right = False\n        if (root.right != None):\n            right = search(root.right, key)\n       \n        return (left or right)', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 11}, {'action': 'move-left', 'root': 12, 'key': 11}, {'action': 'move-right', 'root': 9, 'key': 11}, {'action': 'move-right', 'root': 10, 'key': 11}, {'action': 'return-false', 'root': -1, 'key': 11}], '1': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '2': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-false', 'root': -1, 'key': 30}], '3': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '4': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-true', 'root': -1, 'key': 30}]}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    return root', 'traces': {}}}
2021-02-22 16:58:06.090961,search,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root.val == None:\n        return False   \n    elif root.val == key:\n        return True\n    else:\n        left = False\n        if (root.left != None):\n            left = search(root.left, key) \n            \n        right = False\n        if (root.right != None):\n            right = search(root.right, key)\n       \n        return (left or right)', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 11}, {'action': 'move-left', 'root': 12, 'key': 11}, {'action': 'move-right', 'root': 9, 'key': 11}, {'action': 'move-right', 'root': 10, 'key': 11}, {'action': 'return-false', 'root': -1, 'key': 11}], '1': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '2': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-false', 'root': -1, 'key': 30}], '3': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '4': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-true', 'root': -1, 'key': 30}]}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    return root', 'traces': {}}}
2021-02-22 16:58:11.690175,search,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root.val == None:\n        return False   \n    elif root.val == key:\n        return True\n    else:\n        left = False\n        if (root.left != None):\n            left = search(root.left, key) \n            \n        right = False\n        if (root.right != None):\n            right = search(root.right, key)\n       \n        return (left or right)', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 11}, {'action': 'move-left', 'root': 12, 'key': 11}, {'action': 'move-right', 'root': 9, 'key': 11}, {'action': 'move-right', 'root': 10, 'key': 11}, {'action': 'return-false', 'root': -1, 'key': 11}], '1': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '2': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-false', 'root': -1, 'key': 30}], '3': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '4': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-true', 'root': -1, 'key': 30}]}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    return root', 'traces': {}}}
2021-02-22 16:58:16.187298,search,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root.val == None:\n        return False   \n    elif root.val == key:\n        return True\n    else:\n        left = False\n        if (root.left != None):\n            left = search(root.left, key) \n            \n        right = False\n        if (root.right != None):\n            right = search(root.right, key)\n       \n        return (left or right)', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 11}, {'action': 'move-left', 'root': 12, 'key': 11}, {'action': 'move-right', 'root': 9, 'key': 11}, {'action': 'move-right', 'root': 10, 'key': 11}, {'action': 'return-false', 'root': -1, 'key': 11}], '1': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '2': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-false', 'root': -1, 'key': 30}], '3': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '4': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-true', 'root': -1, 'key': 30}]}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    return root', 'traces': {}}}
2021-02-22 16:58:19.797338,search,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root.val == None:\n        return False   \n    elif root.val == key:\n        return True\n    else:\n        left = False\n        if (root.left != None):\n            left = search(root.left, key) \n            \n        right = False\n        if (root.right != None):\n            right = search(root.right, key)\n       \n        return (left or right)', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 11}, {'action': 'move-left', 'root': 12, 'key': 11}, {'action': 'move-right', 'root': 9, 'key': 11}, {'action': 'move-right', 'root': 10, 'key': 11}, {'action': 'return-false', 'root': -1, 'key': 11}], '1': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '2': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-false', 'root': -1, 'key': 30}], '3': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '4': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-true', 'root': -1, 'key': 30}]}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    return root', 'traces': {}}}
2021-02-22 16:58:21.866726,search,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root.val == None:\n        return False   \n    elif root.val == key:\n        return True\n    else:\n        left = False\n        if (root.left != None):\n            left = search(root.left, key) \n            \n        right = False\n        if (root.right != None):\n            right = search(root.right, key)\n       \n        return (left or right)', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 11}, {'action': 'move-left', 'root': 12, 'key': 11}, {'action': 'move-right', 'root': 9, 'key': 11}, {'action': 'move-right', 'root': 10, 'key': 11}, {'action': 'return-false', 'root': -1, 'key': 11}], '1': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '2': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-false', 'root': -1, 'key': 30}], '3': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '4': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-true', 'root': -1, 'key': 30}]}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    return root', 'traces': {}}}
2021-02-22 16:58:21.994545,search,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root.val == None:\n        return False   \n    elif root.val == key:\n        return True\n    else:\n        left = False\n        if (root.left != None):\n            left = search(root.left, key) \n            \n        right = False\n        if (root.right != None):\n            right = search(root.right, key)\n       \n        return (left or right)', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 11}, {'action': 'move-left', 'root': 12, 'key': 11}, {'action': 'move-right', 'root': 9, 'key': 11}, {'action': 'move-right', 'root': 10, 'key': 11}, {'action': 'return-false', 'root': -1, 'key': 11}], '1': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '2': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-false', 'root': -1, 'key': 30}], '3': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '4': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-true', 'root': -1, 'key': 30}]}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    return root', 'traces': {}}}
2021-02-22 16:58:25.451873,search,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root.val == None:\n        return False   \n    elif root.val == key:\n        return True\n    else:\n        left = False\n        if (root.left != None):\n            left = search(root.left, key) \n            \n        right = False\n        if (root.right != None):\n            right = search(root.right, key)\n       \n        return (left or right)', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 11}, {'action': 'move-left', 'root': 12, 'key': 11}, {'action': 'move-right', 'root': 9, 'key': 11}, {'action': 'move-right', 'root': 10, 'key': 11}, {'action': 'return-false', 'root': -1, 'key': 11}], '1': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '2': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-false', 'root': -1, 'key': 30}], '3': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '4': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-true', 'root': -1, 'key': 30}]}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    return root', 'traces': {}}}
2021-02-22 16:58:27.843904,search,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root.val == None:\n        return False   \n    elif root.val == key:\n        return True\n    else:\n        left = False\n        if (root.left != None):\n            left = search(root.left, key) \n            \n        right = False\n        if (root.right != None):\n            right = search(root.right, key)\n       \n        return (left or right)', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 11}, {'action': 'move-left', 'root': 12, 'key': 11}, {'action': 'move-right', 'root': 9, 'key': 11}, {'action': 'move-right', 'root': 10, 'key': 11}, {'action': 'return-false', 'root': -1, 'key': 11}], '1': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '2': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-false', 'root': -1, 'key': 30}], '3': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '4': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-true', 'root': -1, 'key': 30}]}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    return root', 'traces': {}}}
2021-02-22 16:58:30.743845,search,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root.val == None:\n        return False   \n    elif root.val == key:\n        return True\n    else:\n        left = False\n        if (root.left != None):\n            left = search(root.left, key) \n            \n        right = False\n        if (root.right != None):\n            right = search(root.right, key)\n       \n        return (left or right)', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 11}, {'action': 'move-left', 'root': 12, 'key': 11}, {'action': 'move-right', 'root': 9, 'key': 11}, {'action': 'move-right', 'root': 10, 'key': 11}, {'action': 'return-false', 'root': -1, 'key': 11}], '1': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '2': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-false', 'root': -1, 'key': 30}], '3': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '4': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-true', 'root': -1, 'key': 30}]}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    return root', 'traces': {}}}
2021-02-22 16:58:33.719473,search,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root.val == None:\n        return False   \n    elif root.val == key:\n        return True\n    else:\n        left = False\n        if (root.left != None):\n            left = search(root.left, key) \n            \n        right = False\n        if (root.right != None):\n            right = search(root.right, key)\n       \n        return (left or right)', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 11}, {'action': 'move-left', 'root': 12, 'key': 11}, {'action': 'move-right', 'root': 9, 'key': 11}, {'action': 'move-right', 'root': 10, 'key': 11}, {'action': 'return-false', 'root': -1, 'key': 11}], '1': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '2': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-false', 'root': -1, 'key': 30}], '3': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '4': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-true', 'root': -1, 'key': 30}]}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    return root', 'traces': {}}}
2021-02-22 16:58:36.542094,search,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root.val == None:\n        return False   \n    elif root.val == key:\n        return True\n    else:\n        left = False\n        if (root.left != None):\n            left = search(root.left, key) \n            \n        right = False\n        if (root.right != None):\n            right = search(root.right, key)\n       \n        return (left or right)', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 11}, {'action': 'move-left', 'root': 12, 'key': 11}, {'action': 'move-right', 'root': 9, 'key': 11}, {'action': 'move-right', 'root': 10, 'key': 11}, {'action': 'return-false', 'root': -1, 'key': 11}], '1': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '2': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-false', 'root': -1, 'key': 30}], '3': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '4': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-true', 'root': -1, 'key': 30}]}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    return root', 'traces': {}}}
2021-02-22 16:58:39.453306,search,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root.val == None:\n        return False   \n    elif root.val == key:\n        return True\n    else:\n        left = False\n        if (root.left != None):\n            left = search(root.left, key) \n            \n        right = False\n        if (root.right != None):\n            right = search(root.right, key)\n       \n        return (left or right)', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 11}, {'action': 'move-left', 'root': 12, 'key': 11}, {'action': 'move-right', 'root': 9, 'key': 11}, {'action': 'move-right', 'root': 10, 'key': 11}, {'action': 'return-false', 'root': -1, 'key': 11}], '1': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '2': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-false', 'root': -1, 'key': 30}], '3': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '4': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-true', 'root': -1, 'key': 30}]}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    return root', 'traces': {}}}
2021-02-22 16:58:43.400282,search,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root.val == None:\n        return False   \n    elif root.val == key:\n        return True\n    else:\n        left = False\n        if (root.left != None):\n            left = search(root.left, key) \n            \n        right = False\n        if (root.right != None):\n            right = search(root.right, key)\n       \n        return (left or right)', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 11}, {'action': 'move-left', 'root': 12, 'key': 11}, {'action': 'move-right', 'root': 9, 'key': 11}, {'action': 'move-right', 'root': 10, 'key': 11}, {'action': 'return-false', 'root': -1, 'key': 11}], '1': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '2': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-false', 'root': -1, 'key': 30}], '3': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '4': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-true', 'root': -1, 'key': 30}]}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    return root', 'traces': {}}}
2021-02-22 16:58:44.166926,search,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root.val == None:\n        return False   \n    elif root.val == key:\n        return True\n    else:\n        left = False\n        if (root.left != None):\n            left = search(root.left, key) \n            \n        right = False\n        if (root.right != None):\n            right = search(root.right, key)\n       \n        return (left or right)', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 11}, {'action': 'move-left', 'root': 12, 'key': 11}, {'action': 'move-right', 'root': 9, 'key': 11}, {'action': 'move-right', 'root': 10, 'key': 11}, {'action': 'return-false', 'root': -1, 'key': 11}], '1': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '2': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-false', 'root': -1, 'key': 30}], '3': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '4': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-true', 'root': -1, 'key': 30}]}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    return root', 'traces': {}}}
2021-02-22 16:58:46.172035,search,check-correct,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root.val == None:\n        return False   \n    elif root.val == key:\n        return True\n    else:\n        left = False\n        if (root.left != None):\n            left = search(root.left, key) \n            \n        right = False\n        if (root.right != None):\n            right = search(root.right, key)\n       \n        return (left or right)', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 11}, {'action': 'move-left', 'root': 12, 'key': 11}, {'action': 'move-right', 'root': 9, 'key': 11}, {'action': 'move-right', 'root': 10, 'key': 11}, {'action': 'return-false', 'root': -1, 'key': 11}], '1': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '2': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-false', 'root': -1, 'key': 30}], '3': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '4': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-true', 'root': -1, 'key': 30}]}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    return root', 'traces': {}}}
2021-02-22 17:00:29.465875,search,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root.val == None:\n        return False   \n    elif root.val == key:\n        return True\n    else:\n        if key < root.val:\n            left = search(root.left, key)\n        else:\n            right = search(root.right, key)\n    \n#    else:\n#        left = False\n#        if (root.left != None):\n#            left = search(root.left, key) \n#            \n#        right = False\n#        if (root.right != None):\n#            right = search(root.right, key)\n#       \n#        return (left or right)', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 11}, {'action': 'move-left', 'root': 12, 'key': 11}, {'action': 'move-right', 'root': 9, 'key': 11}, {'action': 'move-right', 'root': 10, 'key': 11}, {'action': 'return-false', 'root': -1, 'key': 11}], '1': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '2': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-false', 'root': -1, 'key': 30}], '3': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '4': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-true', 'root': -1, 'key': 30}]}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    return root', 'traces': {}}}
2021-02-22 17:00:48.902252,search,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root.val == None:\n        return False   \n    elif root.val == key:\n        return True\n    else:\n        if key < root.val:\n            return search(root.left, key)\n        else:\n            return search(root.right, key)\n    \n#    else:\n#        left = False\n#        if (root.left != None):\n#            left = search(root.left, key) \n#            \n#        right = False\n#        if (root.right != None):\n#            right = search(root.right, key)\n#       \n#        return (left or right)', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 11}, {'action': 'move-left', 'root': 12, 'key': 11}, {'action': 'move-right', 'root': 9, 'key': 11}, {'action': 'move-right', 'root': 10, 'key': 11}, {'action': 'return-false', 'root': -1, 'key': 11}], '1': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '2': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-false', 'root': -1, 'key': 30}], '3': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '4': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-true', 'root': -1, 'key': 30}]}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    return root', 'traces': {}}}
2021-02-22 17:01:00.884140,search,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root.val == None:\n        return False   \n    elif root.val == key:\n        return True\n    else:\n        if key < root.val:\n            return search(root.left, key)\n        else:\n            return search(root.right, key)\n    \n#    else:\n#        left = False\n#        if (root.left != None):\n#            left = search(root.left, key) \n#            \n#        right = False\n#        if (root.right != None):\n#            right = search(root.right, key)\n#       \n#        return (left or right)', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 11}, {'action': 'move-left', 'root': 12, 'key': 11}, {'action': 'move-right', 'root': 9, 'key': 11}, {'action': 'move-right', 'root': 10, 'key': 11}, {'action': 'return-false', 'root': -1, 'key': 11}], '1': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '2': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-false', 'root': -1, 'key': 30}], '3': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '4': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-true', 'root': -1, 'key': 30}]}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    return root', 'traces': {}}}
2021-02-22 17:01:07.993917,search,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root.val == None:\n        return False   \n    elif root.val == key:\n        return True\n    else:\n        if key < root.val:\n            return search(root.left, key)\n        else:\n            return search(root.right, key)\n    \n#    else:\n#        left = False\n#        if (root.left != None):\n#            left = search(root.left, key) \n#            \n#        right = False\n#        if (root.right != None):\n#            right = search(root.right, key)\n#       \n#        return (left or right)', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 11}, {'action': 'move-left', 'root': 12, 'key': 11}, {'action': 'move-right', 'root': 9, 'key': 11}, {'action': 'move-right', 'root': 10, 'key': 11}, {'action': 'return-false', 'root': -1, 'key': 11}], '1': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '2': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-false', 'root': -1, 'key': 30}], '3': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '4': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-true', 'root': -1, 'key': 30}]}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    return root', 'traces': {}}}
2021-02-22 17:01:32.814416,search,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root == None:\n        return False   \n    if root.val == None:\n        return False   \n    elif root.val == key:\n        return True\n    else:\n        if key < root.val:\n            return search(root.left, key)\n        else:\n            return search(root.right, key)\n    \n#    else:\n#        left = False\n#        if (root.left != None):\n#            left = search(root.left, key) \n#            \n#        right = False\n#        if (root.right != None):\n#            right = search(root.right, key)\n#       \n#        return (left or right)', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 11}, {'action': 'move-left', 'root': 12, 'key': 11}, {'action': 'move-right', 'root': 9, 'key': 11}, {'action': 'move-right', 'root': 10, 'key': 11}, {'action': 'return-false', 'root': -1, 'key': 11}], '1': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '2': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-false', 'root': -1, 'key': 30}], '3': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '4': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-true', 'root': -1, 'key': 30}]}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    return root', 'traces': {}}}
2021-02-22 17:01:35.400669,search,check-correct,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root == None:\n        return False   \n    if root.val == None:\n        return False   \n    elif root.val == key:\n        return True\n    else:\n        if key < root.val:\n            return search(root.left, key)\n        else:\n            return search(root.right, key)\n    \n#    else:\n#        left = False\n#        if (root.left != None):\n#            left = search(root.left, key) \n#            \n#        right = False\n#        if (root.right != None):\n#            right = search(root.right, key)\n#       \n#        return (left or right)', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 11}, {'action': 'move-left', 'root': 12, 'key': 11}, {'action': 'move-right', 'root': 9, 'key': 11}, {'action': 'move-right', 'root': 10, 'key': 11}, {'action': 'return-false', 'root': -1, 'key': 11}], '1': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '2': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-false', 'root': -1, 'key': 30}], '3': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '4': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-true', 'root': -1, 'key': 30}]}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    return root', 'traces': {}}}
2021-02-22 17:01:37.583203,page-change,2,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root == None:\n        return False   \n    if root.val == None:\n        return False   \n    elif root.val == key:\n        return True\n    else:\n        if key < root.val:\n            return search(root.left, key)\n        else:\n            return search(root.right, key)\n    \n#    else:\n#        left = False\n#        if (root.left != None):\n#            left = search(root.left, key) \n#            \n#        right = False\n#        if (root.right != None):\n#            right = search(root.right, key)\n#       \n#        return (left or right)', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 11}, {'action': 'move-left', 'root': 12, 'key': 11}, {'action': 'move-right', 'root': 9, 'key': 11}, {'action': 'move-right', 'root': 10, 'key': 11}, {'action': 'return-false', 'root': -1, 'key': 11}], '1': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '2': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-false', 'root': -1, 'key': 30}], '3': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '4': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-true', 'root': -1, 'key': 30}]}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    return root', 'traces': {}}}
2021-02-22 17:01:40.965789,insert,move-right,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root == None:\n        return False   \n    if root.val == None:\n        return False   \n    elif root.val == key:\n        return True\n    else:\n        if key < root.val:\n            return search(root.left, key)\n        else:\n            return search(root.right, key)\n    \n#    else:\n#        left = False\n#        if (root.left != None):\n#            left = search(root.left, key) \n#            \n#        right = False\n#        if (root.right != None):\n#            right = search(root.right, key)\n#       \n#        return (left or right)', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 11}, {'action': 'move-left', 'root': 12, 'key': 11}, {'action': 'move-right', 'root': 9, 'key': 11}, {'action': 'move-right', 'root': 10, 'key': 11}, {'action': 'return-false', 'root': -1, 'key': 11}], '1': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '2': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-false', 'root': -1, 'key': 30}], '3': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '4': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-true', 'root': -1, 'key': 30}]}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    return root', 'traces': {}}}
2021-02-22 17:01:41.534136,insert,move-right,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root == None:\n        return False   \n    if root.val == None:\n        return False   \n    elif root.val == key:\n        return True\n    else:\n        if key < root.val:\n            return search(root.left, key)\n        else:\n            return search(root.right, key)\n    \n#    else:\n#        left = False\n#        if (root.left != None):\n#            left = search(root.left, key) \n#            \n#        right = False\n#        if (root.right != None):\n#            right = search(root.right, key)\n#       \n#        return (left or right)', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 11}, {'action': 'move-left', 'root': 12, 'key': 11}, {'action': 'move-right', 'root': 9, 'key': 11}, {'action': 'move-right', 'root': 10, 'key': 11}, {'action': 'return-false', 'root': -1, 'key': 11}], '1': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '2': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-false', 'root': -1, 'key': 30}], '3': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '4': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-true', 'root': -1, 'key': 30}]}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    return root', 'traces': {}}}
2021-02-22 17:01:42.998516,insert,move-left,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root == None:\n        return False   \n    if root.val == None:\n        return False   \n    elif root.val == key:\n        return True\n    else:\n        if key < root.val:\n            return search(root.left, key)\n        else:\n            return search(root.right, key)\n    \n#    else:\n#        left = False\n#        if (root.left != None):\n#            left = search(root.left, key) \n#            \n#        right = False\n#        if (root.right != None):\n#            right = search(root.right, key)\n#       \n#        return (left or right)', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 11}, {'action': 'move-left', 'root': 12, 'key': 11}, {'action': 'move-right', 'root': 9, 'key': 11}, {'action': 'move-right', 'root': 10, 'key': 11}, {'action': 'return-false', 'root': -1, 'key': 11}], '1': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '2': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-false', 'root': -1, 'key': 30}], '3': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '4': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-true', 'root': -1, 'key': 30}]}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    return root', 'traces': {}}}
2021-02-22 17:01:47.591889,insert,move-right,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root == None:\n        return False   \n    if root.val == None:\n        return False   \n    elif root.val == key:\n        return True\n    else:\n        if key < root.val:\n            return search(root.left, key)\n        else:\n            return search(root.right, key)\n    \n#    else:\n#        left = False\n#        if (root.left != None):\n#            left = search(root.left, key) \n#            \n#        right = False\n#        if (root.right != None):\n#            right = search(root.right, key)\n#       \n#        return (left or right)', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 11}, {'action': 'move-left', 'root': 12, 'key': 11}, {'action': 'move-right', 'root': 9, 'key': 11}, {'action': 'move-right', 'root': 10, 'key': 11}, {'action': 'return-false', 'root': -1, 'key': 11}], '1': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '2': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-false', 'root': -1, 'key': 30}], '3': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '4': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-true', 'root': -1, 'key': 30}]}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    return root', 'traces': {}}}
2021-02-22 17:01:48.364783,insert,insert,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root == None:\n        return False   \n    if root.val == None:\n        return False   \n    elif root.val == key:\n        return True\n    else:\n        if key < root.val:\n            return search(root.left, key)\n        else:\n            return search(root.right, key)\n    \n#    else:\n#        left = False\n#        if (root.left != None):\n#            left = search(root.left, key) \n#            \n#        right = False\n#        if (root.right != None):\n#            right = search(root.right, key)\n#       \n#        return (left or right)', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 11}, {'action': 'move-left', 'root': 12, 'key': 11}, {'action': 'move-right', 'root': 9, 'key': 11}, {'action': 'move-right', 'root': 10, 'key': 11}, {'action': 'return-false', 'root': -1, 'key': 11}], '1': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '2': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-false', 'root': -1, 'key': 30}], '3': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '4': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-true', 'root': -1, 'key': 30}]}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    return root', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 14}, {'action': 'move-right', 'root': 12, 'key': 14}, {'action': 'move-left', 'root': 15, 'key': 14}, {'action': 'move-right', 'root': 13, 'key': 14}, {'action': 'insert', 'root': -1, 'key': 14}]}}}
2021-02-22 17:01:50.208972,insert,move-right,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root == None:\n        return False   \n    if root.val == None:\n        return False   \n    elif root.val == key:\n        return True\n    else:\n        if key < root.val:\n            return search(root.left, key)\n        else:\n            return search(root.right, key)\n    \n#    else:\n#        left = False\n#        if (root.left != None):\n#            left = search(root.left, key) \n#            \n#        right = False\n#        if (root.right != None):\n#            right = search(root.right, key)\n#       \n#        return (left or right)', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 11}, {'action': 'move-left', 'root': 12, 'key': 11}, {'action': 'move-right', 'root': 9, 'key': 11}, {'action': 'move-right', 'root': 10, 'key': 11}, {'action': 'return-false', 'root': -1, 'key': 11}], '1': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '2': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-false', 'root': -1, 'key': 30}], '3': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '4': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-true', 'root': -1, 'key': 30}]}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    return root', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 14}, {'action': 'move-right', 'root': 12, 'key': 14}, {'action': 'move-left', 'root': 15, 'key': 14}, {'action': 'move-right', 'root': 13, 'key': 14}, {'action': 'insert', 'root': -1, 'key': 14}]}}}
2021-02-22 17:01:50.626321,insert,move-left,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root == None:\n        return False   \n    if root.val == None:\n        return False   \n    elif root.val == key:\n        return True\n    else:\n        if key < root.val:\n            return search(root.left, key)\n        else:\n            return search(root.right, key)\n    \n#    else:\n#        left = False\n#        if (root.left != None):\n#            left = search(root.left, key) \n#            \n#        right = False\n#        if (root.right != None):\n#            right = search(root.right, key)\n#       \n#        return (left or right)', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 11}, {'action': 'move-left', 'root': 12, 'key': 11}, {'action': 'move-right', 'root': 9, 'key': 11}, {'action': 'move-right', 'root': 10, 'key': 11}, {'action': 'return-false', 'root': -1, 'key': 11}], '1': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '2': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-false', 'root': -1, 'key': 30}], '3': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '4': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-true', 'root': -1, 'key': 30}]}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    return root', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 14}, {'action': 'move-right', 'root': 12, 'key': 14}, {'action': 'move-left', 'root': 15, 'key': 14}, {'action': 'move-right', 'root': 13, 'key': 14}, {'action': 'insert', 'root': -1, 'key': 14}]}}}
2021-02-22 17:01:51.214917,insert,insert,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root == None:\n        return False   \n    if root.val == None:\n        return False   \n    elif root.val == key:\n        return True\n    else:\n        if key < root.val:\n            return search(root.left, key)\n        else:\n            return search(root.right, key)\n    \n#    else:\n#        left = False\n#        if (root.left != None):\n#            left = search(root.left, key) \n#            \n#        right = False\n#        if (root.right != None):\n#            right = search(root.right, key)\n#       \n#        return (left or right)', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 11}, {'action': 'move-left', 'root': 12, 'key': 11}, {'action': 'move-right', 'root': 9, 'key': 11}, {'action': 'move-right', 'root': 10, 'key': 11}, {'action': 'return-false', 'root': -1, 'key': 11}], '1': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '2': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-false', 'root': -1, 'key': 30}], '3': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '4': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-true', 'root': -1, 'key': 30}]}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    return root', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 14}, {'action': 'move-right', 'root': 12, 'key': 14}, {'action': 'move-left', 'root': 15, 'key': 14}, {'action': 'move-right', 'root': 13, 'key': 14}, {'action': 'insert', 'root': -1, 'key': 14}], '1': [{'action': 'move-right', 'root': 5, 'key': 6}, {'action': 'move-left', 'root': 7, 'key': 6}, {'action': 'insert', 'root': -1, 'key': 6}]}}}
2021-02-22 17:02:30.504156,insert,move-left,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root == None:\n        return False   \n    if root.val == None:\n        return False   \n    elif root.val == key:\n        return True\n    else:\n        if key < root.val:\n            return search(root.left, key)\n        else:\n            return search(root.right, key)\n    \n#    else:\n#        left = False\n#        if (root.left != None):\n#            left = search(root.left, key) \n#            \n#        right = False\n#        if (root.right != None):\n#            right = search(root.right, key)\n#       \n#        return (left or right)', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 11}, {'action': 'move-left', 'root': 12, 'key': 11}, {'action': 'move-right', 'root': 9, 'key': 11}, {'action': 'move-right', 'root': 10, 'key': 11}, {'action': 'return-false', 'root': -1, 'key': 11}], '1': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '2': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-false', 'root': -1, 'key': 30}], '3': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '4': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-true', 'root': -1, 'key': 30}]}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    return root', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 14}, {'action': 'move-right', 'root': 12, 'key': 14}, {'action': 'move-left', 'root': 15, 'key': 14}, {'action': 'move-right', 'root': 13, 'key': 14}, {'action': 'insert', 'root': -1, 'key': 14}], '1': [{'action': 'move-right', 'root': 5, 'key': 6}, {'action': 'move-left', 'root': 7, 'key': 6}, {'action': 'insert', 'root': -1, 'key': 6}]}}}
2021-02-22 17:02:31.043574,insert,move-left,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root == None:\n        return False   \n    if root.val == None:\n        return False   \n    elif root.val == key:\n        return True\n    else:\n        if key < root.val:\n            return search(root.left, key)\n        else:\n            return search(root.right, key)\n    \n#    else:\n#        left = False\n#        if (root.left != None):\n#            left = search(root.left, key) \n#            \n#        right = False\n#        if (root.right != None):\n#            right = search(root.right, key)\n#       \n#        return (left or right)', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 11}, {'action': 'move-left', 'root': 12, 'key': 11}, {'action': 'move-right', 'root': 9, 'key': 11}, {'action': 'move-right', 'root': 10, 'key': 11}, {'action': 'return-false', 'root': -1, 'key': 11}], '1': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '2': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-false', 'root': -1, 'key': 30}], '3': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '4': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-true', 'root': -1, 'key': 30}]}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    return root', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 14}, {'action': 'move-right', 'root': 12, 'key': 14}, {'action': 'move-left', 'root': 15, 'key': 14}, {'action': 'move-right', 'root': 13, 'key': 14}, {'action': 'insert', 'root': -1, 'key': 14}], '1': [{'action': 'move-right', 'root': 5, 'key': 6}, {'action': 'move-left', 'root': 7, 'key': 6}, {'action': 'insert', 'root': -1, 'key': 6}]}}}
2021-02-22 17:02:31.785689,insert,move-right,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root == None:\n        return False   \n    if root.val == None:\n        return False   \n    elif root.val == key:\n        return True\n    else:\n        if key < root.val:\n            return search(root.left, key)\n        else:\n            return search(root.right, key)\n    \n#    else:\n#        left = False\n#        if (root.left != None):\n#            left = search(root.left, key) \n#            \n#        right = False\n#        if (root.right != None):\n#            right = search(root.right, key)\n#       \n#        return (left or right)', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 11}, {'action': 'move-left', 'root': 12, 'key': 11}, {'action': 'move-right', 'root': 9, 'key': 11}, {'action': 'move-right', 'root': 10, 'key': 11}, {'action': 'return-false', 'root': -1, 'key': 11}], '1': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '2': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-false', 'root': -1, 'key': 30}], '3': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '4': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-true', 'root': -1, 'key': 30}]}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    return root', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 14}, {'action': 'move-right', 'root': 12, 'key': 14}, {'action': 'move-left', 'root': 15, 'key': 14}, {'action': 'move-right', 'root': 13, 'key': 14}, {'action': 'insert', 'root': -1, 'key': 14}], '1': [{'action': 'move-right', 'root': 5, 'key': 6}, {'action': 'move-left', 'root': 7, 'key': 6}, {'action': 'insert', 'root': -1, 'key': 6}]}}}
2021-02-22 17:02:32.654454,insert,insert,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root == None:\n        return False   \n    if root.val == None:\n        return False   \n    elif root.val == key:\n        return True\n    else:\n        if key < root.val:\n            return search(root.left, key)\n        else:\n            return search(root.right, key)\n    \n#    else:\n#        left = False\n#        if (root.left != None):\n#            left = search(root.left, key) \n#            \n#        right = False\n#        if (root.right != None):\n#            right = search(root.right, key)\n#       \n#        return (left or right)', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 11}, {'action': 'move-left', 'root': 12, 'key': 11}, {'action': 'move-right', 'root': 9, 'key': 11}, {'action': 'move-right', 'root': 10, 'key': 11}, {'action': 'return-false', 'root': -1, 'key': 11}], '1': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '2': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-false', 'root': -1, 'key': 30}], '3': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '4': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-true', 'root': -1, 'key': 30}]}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    return root', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 14}, {'action': 'move-right', 'root': 12, 'key': 14}, {'action': 'move-left', 'root': 15, 'key': 14}, {'action': 'move-right', 'root': 13, 'key': 14}, {'action': 'insert', 'root': -1, 'key': 14}], '1': [{'action': 'move-right', 'root': 5, 'key': 6}, {'action': 'move-left', 'root': 7, 'key': 6}, {'action': 'insert', 'root': -1, 'key': 6}], '2': [{'action': 'move-left', 'root': 8, 'key': 2}, {'action': 'move-left', 'root': 3, 'key': 2}, {'action': 'move-right', 'root': 1, 'key': 2}, {'action': 'insert', 'root': -1, 'key': 2}]}}}
2021-02-22 17:02:36.283517,insert,move-left,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root == None:\n        return False   \n    if root.val == None:\n        return False   \n    elif root.val == key:\n        return True\n    else:\n        if key < root.val:\n            return search(root.left, key)\n        else:\n            return search(root.right, key)\n    \n#    else:\n#        left = False\n#        if (root.left != None):\n#            left = search(root.left, key) \n#            \n#        right = False\n#        if (root.right != None):\n#            right = search(root.right, key)\n#       \n#        return (left or right)', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 11}, {'action': 'move-left', 'root': 12, 'key': 11}, {'action': 'move-right', 'root': 9, 'key': 11}, {'action': 'move-right', 'root': 10, 'key': 11}, {'action': 'return-false', 'root': -1, 'key': 11}], '1': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '2': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-false', 'root': -1, 'key': 30}], '3': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '4': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-true', 'root': -1, 'key': 30}]}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    return root', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 14}, {'action': 'move-right', 'root': 12, 'key': 14}, {'action': 'move-left', 'root': 15, 'key': 14}, {'action': 'move-right', 'root': 13, 'key': 14}, {'action': 'insert', 'root': -1, 'key': 14}], '1': [{'action': 'move-right', 'root': 5, 'key': 6}, {'action': 'move-left', 'root': 7, 'key': 6}, {'action': 'insert', 'root': -1, 'key': 6}], '2': [{'action': 'move-left', 'root': 8, 'key': 2}, {'action': 'move-left', 'root': 3, 'key': 2}, {'action': 'move-right', 'root': 1, 'key': 2}, {'action': 'insert', 'root': -1, 'key': 2}]}}}
2021-02-22 17:02:36.630500,insert,move-right,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root == None:\n        return False   \n    if root.val == None:\n        return False   \n    elif root.val == key:\n        return True\n    else:\n        if key < root.val:\n            return search(root.left, key)\n        else:\n            return search(root.right, key)\n    \n#    else:\n#        left = False\n#        if (root.left != None):\n#            left = search(root.left, key) \n#            \n#        right = False\n#        if (root.right != None):\n#            right = search(root.right, key)\n#       \n#        return (left or right)', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 11}, {'action': 'move-left', 'root': 12, 'key': 11}, {'action': 'move-right', 'root': 9, 'key': 11}, {'action': 'move-right', 'root': 10, 'key': 11}, {'action': 'return-false', 'root': -1, 'key': 11}], '1': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '2': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-false', 'root': -1, 'key': 30}], '3': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '4': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-true', 'root': -1, 'key': 30}]}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    return root', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 14}, {'action': 'move-right', 'root': 12, 'key': 14}, {'action': 'move-left', 'root': 15, 'key': 14}, {'action': 'move-right', 'root': 13, 'key': 14}, {'action': 'insert', 'root': -1, 'key': 14}], '1': [{'action': 'move-right', 'root': 5, 'key': 6}, {'action': 'move-left', 'root': 7, 'key': 6}, {'action': 'insert', 'root': -1, 'key': 6}], '2': [{'action': 'move-left', 'root': 8, 'key': 2}, {'action': 'move-left', 'root': 3, 'key': 2}, {'action': 'move-right', 'root': 1, 'key': 2}, {'action': 'insert', 'root': -1, 'key': 2}]}}}
2021-02-22 17:02:36.827565,insert,move-right,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root == None:\n        return False   \n    if root.val == None:\n        return False   \n    elif root.val == key:\n        return True\n    else:\n        if key < root.val:\n            return search(root.left, key)\n        else:\n            return search(root.right, key)\n    \n#    else:\n#        left = False\n#        if (root.left != None):\n#            left = search(root.left, key) \n#            \n#        right = False\n#        if (root.right != None):\n#            right = search(root.right, key)\n#       \n#        return (left or right)', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 11}, {'action': 'move-left', 'root': 12, 'key': 11}, {'action': 'move-right', 'root': 9, 'key': 11}, {'action': 'move-right', 'root': 10, 'key': 11}, {'action': 'return-false', 'root': -1, 'key': 11}], '1': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '2': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-false', 'root': -1, 'key': 30}], '3': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '4': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-true', 'root': -1, 'key': 30}]}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    return root', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 14}, {'action': 'move-right', 'root': 12, 'key': 14}, {'action': 'move-left', 'root': 15, 'key': 14}, {'action': 'move-right', 'root': 13, 'key': 14}, {'action': 'insert', 'root': -1, 'key': 14}], '1': [{'action': 'move-right', 'root': 5, 'key': 6}, {'action': 'move-left', 'root': 7, 'key': 6}, {'action': 'insert', 'root': -1, 'key': 6}], '2': [{'action': 'move-left', 'root': 8, 'key': 2}, {'action': 'move-left', 'root': 3, 'key': 2}, {'action': 'move-right', 'root': 1, 'key': 2}, {'action': 'insert', 'root': -1, 'key': 2}]}}}
2021-02-22 17:02:38.039895,insert,move-right,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root == None:\n        return False   \n    if root.val == None:\n        return False   \n    elif root.val == key:\n        return True\n    else:\n        if key < root.val:\n            return search(root.left, key)\n        else:\n            return search(root.right, key)\n    \n#    else:\n#        left = False\n#        if (root.left != None):\n#            left = search(root.left, key) \n#            \n#        right = False\n#        if (root.right != None):\n#            right = search(root.right, key)\n#       \n#        return (left or right)', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 11}, {'action': 'move-left', 'root': 12, 'key': 11}, {'action': 'move-right', 'root': 9, 'key': 11}, {'action': 'move-right', 'root': 10, 'key': 11}, {'action': 'return-false', 'root': -1, 'key': 11}], '1': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '2': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-false', 'root': -1, 'key': 30}], '3': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '4': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-true', 'root': -1, 'key': 30}]}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    return root', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 14}, {'action': 'move-right', 'root': 12, 'key': 14}, {'action': 'move-left', 'root': 15, 'key': 14}, {'action': 'move-right', 'root': 13, 'key': 14}, {'action': 'insert', 'root': -1, 'key': 14}], '1': [{'action': 'move-right', 'root': 5, 'key': 6}, {'action': 'move-left', 'root': 7, 'key': 6}, {'action': 'insert', 'root': -1, 'key': 6}], '2': [{'action': 'move-left', 'root': 8, 'key': 2}, {'action': 'move-left', 'root': 3, 'key': 2}, {'action': 'move-right', 'root': 1, 'key': 2}, {'action': 'insert', 'root': -1, 'key': 2}]}}}
2021-02-22 17:02:38.670808,insert,insert,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root == None:\n        return False   \n    if root.val == None:\n        return False   \n    elif root.val == key:\n        return True\n    else:\n        if key < root.val:\n            return search(root.left, key)\n        else:\n            return search(root.right, key)\n    \n#    else:\n#        left = False\n#        if (root.left != None):\n#            left = search(root.left, key) \n#            \n#        right = False\n#        if (root.right != None):\n#            right = search(root.right, key)\n#       \n#        return (left or right)', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 11}, {'action': 'move-left', 'root': 12, 'key': 11}, {'action': 'move-right', 'root': 9, 'key': 11}, {'action': 'move-right', 'root': 10, 'key': 11}, {'action': 'return-false', 'root': -1, 'key': 11}], '1': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '2': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-false', 'root': -1, 'key': 30}], '3': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '4': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-true', 'root': -1, 'key': 30}]}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    return root', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 14}, {'action': 'move-right', 'root': 12, 'key': 14}, {'action': 'move-left', 'root': 15, 'key': 14}, {'action': 'move-right', 'root': 13, 'key': 14}, {'action': 'insert', 'root': -1, 'key': 14}], '1': [{'action': 'move-right', 'root': 5, 'key': 6}, {'action': 'move-left', 'root': 7, 'key': 6}, {'action': 'insert', 'root': -1, 'key': 6}], '2': [{'action': 'move-left', 'root': 8, 'key': 2}, {'action': 'move-left', 'root': 3, 'key': 2}, {'action': 'move-right', 'root': 1, 'key': 2}, {'action': 'insert', 'root': -1, 'key': 2}], '3': [{'action': 'move-left', 'root': 50, 'key': 43}, {'action': 'move-right', 'root': 17, 'key': 43}, {'action': 'move-right', 'root': 23, 'key': 43}, {'action': 'insert', 'root': -1, 'key': 43}]}}}
2021-02-22 17:02:52.869841,insert,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root == None:\n        return False   \n    if root.val == None:\n        return False   \n    elif root.val == key:\n        return True\n    else:\n        if key < root.val:\n            return search(root.left, key)\n        else:\n            return search(root.right, key)\n    \n#    else:\n#        left = False\n#        if (root.left != None):\n#            left = search(root.left, key) \n#            \n#        right = False\n#        if (root.right != None):\n#            right = search(root.right, key)\n#       \n#        return (left or right)', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 11}, {'action': 'move-left', 'root': 12, 'key': 11}, {'action': 'move-right', 'root': 9, 'key': 11}, {'action': 'move-right', 'root': 10, 'key': 11}, {'action': 'return-false', 'root': -1, 'key': 11}], '1': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '2': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-false', 'root': -1, 'key': 30}], '3': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '4': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-true', 'root': -1, 'key': 30}]}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    return root', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 14}, {'action': 'move-right', 'root': 12, 'key': 14}, {'action': 'move-left', 'root': 15, 'key': 14}, {'action': 'move-right', 'root': 13, 'key': 14}, {'action': 'insert', 'root': -1, 'key': 14}], '1': [{'action': 'move-right', 'root': 5, 'key': 6}, {'action': 'move-left', 'root': 7, 'key': 6}, {'action': 'insert', 'root': -1, 'key': 6}], '2': [{'action': 'move-left', 'root': 8, 'key': 2}, {'action': 'move-left', 'root': 3, 'key': 2}, {'action': 'move-right', 'root': 1, 'key': 2}, {'action': 'insert', 'root': -1, 'key': 2}], '3': [{'action': 'move-left', 'root': 50, 'key': 43}, {'action': 'move-right', 'root': 17, 'key': 43}, {'action': 'move-right', 'root': 23, 'key': 43}, {'action': 'insert', 'root': -1, 'key': 43}]}}}
2021-02-22 17:02:58.895988,insert,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root == None:\n        return False   \n    if root.val == None:\n        return False   \n    elif root.val == key:\n        return True\n    else:\n        if key < root.val:\n            return search(root.left, key)\n        else:\n            return search(root.right, key)\n    \n#    else:\n#        left = False\n#        if (root.left != None):\n#            left = search(root.left, key) \n#            \n#        right = False\n#        if (root.right != None):\n#            right = search(root.right, key)\n#       \n#        return (left or right)', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 11}, {'action': 'move-left', 'root': 12, 'key': 11}, {'action': 'move-right', 'root': 9, 'key': 11}, {'action': 'move-right', 'root': 10, 'key': 11}, {'action': 'return-false', 'root': -1, 'key': 11}], '1': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '2': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-false', 'root': -1, 'key': 30}], '3': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '4': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-true', 'root': -1, 'key': 30}]}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    return root', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 14}, {'action': 'move-right', 'root': 12, 'key': 14}, {'action': 'move-left', 'root': 15, 'key': 14}, {'action': 'move-right', 'root': 13, 'key': 14}, {'action': 'insert', 'root': -1, 'key': 14}], '1': [{'action': 'move-right', 'root': 5, 'key': 6}, {'action': 'move-left', 'root': 7, 'key': 6}, {'action': 'insert', 'root': -1, 'key': 6}], '2': [{'action': 'move-left', 'root': 8, 'key': 2}, {'action': 'move-left', 'root': 3, 'key': 2}, {'action': 'move-right', 'root': 1, 'key': 2}, {'action': 'insert', 'root': -1, 'key': 2}], '3': [{'action': 'move-left', 'root': 50, 'key': 43}, {'action': 'move-right', 'root': 17, 'key': 43}, {'action': 'move-right', 'root': 23, 'key': 43}, {'action': 'insert', 'root': -1, 'key': 43}]}}}
2021-02-22 17:06:11.400522,insert,move-right,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root == None:\n        return False   \n    if root.val == None:\n        return False   \n    elif root.val == key:\n        return True\n    else:\n        if key < root.val:\n            return search(root.left, key)\n        else:\n            return search(root.right, key)\n    \n#    else:\n#        left = False\n#        if (root.left != None):\n#            left = search(root.left, key) \n#            \n#        right = False\n#        if (root.right != None):\n#            right = search(root.right, key)\n#       \n#        return (left or right)', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 11}, {'action': 'move-left', 'root': 12, 'key': 11}, {'action': 'move-right', 'root': 9, 'key': 11}, {'action': 'move-right', 'root': 10, 'key': 11}, {'action': 'return-false', 'root': -1, 'key': 11}], '1': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '2': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-false', 'root': -1, 'key': 30}], '3': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '4': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-true', 'root': -1, 'key': 30}]}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    if key > root:\n        if key < root.right:\n            \n    else:\n        \n    return root', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 14}, {'action': 'move-right', 'root': 12, 'key': 14}, {'action': 'move-left', 'root': 15, 'key': 14}, {'action': 'move-right', 'root': 13, 'key': 14}, {'action': 'insert', 'root': -1, 'key': 14}], '1': [{'action': 'move-right', 'root': 5, 'key': 6}, {'action': 'move-left', 'root': 7, 'key': 6}, {'action': 'insert', 'root': -1, 'key': 6}], '2': [{'action': 'move-left', 'root': 8, 'key': 2}, {'action': 'move-left', 'root': 3, 'key': 2}, {'action': 'move-right', 'root': 1, 'key': 2}, {'action': 'insert', 'root': -1, 'key': 2}], '3': [{'action': 'move-left', 'root': 50, 'key': 43}, {'action': 'move-right', 'root': 17, 'key': 43}, {'action': 'move-right', 'root': 23, 'key': 43}, {'action': 'insert', 'root': -1, 'key': 43}]}}}
2021-02-22 17:06:11.720910,insert,move-right,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root == None:\n        return False   \n    if root.val == None:\n        return False   \n    elif root.val == key:\n        return True\n    else:\n        if key < root.val:\n            return search(root.left, key)\n        else:\n            return search(root.right, key)\n    \n#    else:\n#        left = False\n#        if (root.left != None):\n#            left = search(root.left, key) \n#            \n#        right = False\n#        if (root.right != None):\n#            right = search(root.right, key)\n#       \n#        return (left or right)', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 11}, {'action': 'move-left', 'root': 12, 'key': 11}, {'action': 'move-right', 'root': 9, 'key': 11}, {'action': 'move-right', 'root': 10, 'key': 11}, {'action': 'return-false', 'root': -1, 'key': 11}], '1': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '2': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-false', 'root': -1, 'key': 30}], '3': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '4': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-true', 'root': -1, 'key': 30}]}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    if key > root:\n        if key < root.right:\n            \n    else:\n        \n    return root', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 14}, {'action': 'move-right', 'root': 12, 'key': 14}, {'action': 'move-left', 'root': 15, 'key': 14}, {'action': 'move-right', 'root': 13, 'key': 14}, {'action': 'insert', 'root': -1, 'key': 14}], '1': [{'action': 'move-right', 'root': 5, 'key': 6}, {'action': 'move-left', 'root': 7, 'key': 6}, {'action': 'insert', 'root': -1, 'key': 6}], '2': [{'action': 'move-left', 'root': 8, 'key': 2}, {'action': 'move-left', 'root': 3, 'key': 2}, {'action': 'move-right', 'root': 1, 'key': 2}, {'action': 'insert', 'root': -1, 'key': 2}], '3': [{'action': 'move-left', 'root': 50, 'key': 43}, {'action': 'move-right', 'root': 17, 'key': 43}, {'action': 'move-right', 'root': 23, 'key': 43}, {'action': 'insert', 'root': -1, 'key': 43}]}}}
2021-02-22 17:06:12.276539,insert,insert,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root == None:\n        return False   \n    if root.val == None:\n        return False   \n    elif root.val == key:\n        return True\n    else:\n        if key < root.val:\n            return search(root.left, key)\n        else:\n            return search(root.right, key)\n    \n#    else:\n#        left = False\n#        if (root.left != None):\n#            left = search(root.left, key) \n#            \n#        right = False\n#        if (root.right != None):\n#            right = search(root.right, key)\n#       \n#        return (left or right)', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 11}, {'action': 'move-left', 'root': 12, 'key': 11}, {'action': 'move-right', 'root': 9, 'key': 11}, {'action': 'move-right', 'root': 10, 'key': 11}, {'action': 'return-false', 'root': -1, 'key': 11}], '1': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '2': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-false', 'root': -1, 'key': 30}], '3': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '4': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-true', 'root': -1, 'key': 30}]}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    if key > root:\n        if key < root.right:\n            \n    else:\n        \n    return root', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 14}, {'action': 'move-right', 'root': 12, 'key': 14}, {'action': 'move-left', 'root': 15, 'key': 14}, {'action': 'move-right', 'root': 13, 'key': 14}, {'action': 'insert', 'root': -1, 'key': 14}], '1': [{'action': 'move-right', 'root': 5, 'key': 6}, {'action': 'move-left', 'root': 7, 'key': 6}, {'action': 'insert', 'root': -1, 'key': 6}], '2': [{'action': 'move-left', 'root': 8, 'key': 2}, {'action': 'move-left', 'root': 3, 'key': 2}, {'action': 'move-right', 'root': 1, 'key': 2}, {'action': 'insert', 'root': -1, 'key': 2}], '3': [{'action': 'move-left', 'root': 50, 'key': 43}, {'action': 'move-right', 'root': 17, 'key': 43}, {'action': 'move-right', 'root': 23, 'key': 43}, {'action': 'insert', 'root': -1, 'key': 43}], '4': [{'action': 'move-right', 'root': 5, 'key': 9}, {'action': 'move-right', 'root': 7, 'key': 9}, {'action': 'insert', 'root': -1, 'key': 9}]}}}
2021-02-22 17:06:14.366034,insert,move-right,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root == None:\n        return False   \n    if root.val == None:\n        return False   \n    elif root.val == key:\n        return True\n    else:\n        if key < root.val:\n            return search(root.left, key)\n        else:\n            return search(root.right, key)\n    \n#    else:\n#        left = False\n#        if (root.left != None):\n#            left = search(root.left, key) \n#            \n#        right = False\n#        if (root.right != None):\n#            right = search(root.right, key)\n#       \n#        return (left or right)', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 11}, {'action': 'move-left', 'root': 12, 'key': 11}, {'action': 'move-right', 'root': 9, 'key': 11}, {'action': 'move-right', 'root': 10, 'key': 11}, {'action': 'return-false', 'root': -1, 'key': 11}], '1': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '2': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-false', 'root': -1, 'key': 30}], '3': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '4': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-true', 'root': -1, 'key': 30}]}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    if key > root:\n        if key < root.right:\n            \n    else:\n        \n    return root', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 14}, {'action': 'move-right', 'root': 12, 'key': 14}, {'action': 'move-left', 'root': 15, 'key': 14}, {'action': 'move-right', 'root': 13, 'key': 14}, {'action': 'insert', 'root': -1, 'key': 14}], '1': [{'action': 'move-right', 'root': 5, 'key': 6}, {'action': 'move-left', 'root': 7, 'key': 6}, {'action': 'insert', 'root': -1, 'key': 6}], '2': [{'action': 'move-left', 'root': 8, 'key': 2}, {'action': 'move-left', 'root': 3, 'key': 2}, {'action': 'move-right', 'root': 1, 'key': 2}, {'action': 'insert', 'root': -1, 'key': 2}], '3': [{'action': 'move-left', 'root': 50, 'key': 43}, {'action': 'move-right', 'root': 17, 'key': 43}, {'action': 'move-right', 'root': 23, 'key': 43}, {'action': 'insert', 'root': -1, 'key': 43}], '4': [{'action': 'move-right', 'root': 5, 'key': 9}, {'action': 'move-right', 'root': 7, 'key': 9}, {'action': 'insert', 'root': -1, 'key': 9}]}}}
2021-02-22 17:06:14.604138,insert,move-right,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root == None:\n        return False   \n    if root.val == None:\n        return False   \n    elif root.val == key:\n        return True\n    else:\n        if key < root.val:\n            return search(root.left, key)\n        else:\n            return search(root.right, key)\n    \n#    else:\n#        left = False\n#        if (root.left != None):\n#            left = search(root.left, key) \n#            \n#        right = False\n#        if (root.right != None):\n#            right = search(root.right, key)\n#       \n#        return (left or right)', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 11}, {'action': 'move-left', 'root': 12, 'key': 11}, {'action': 'move-right', 'root': 9, 'key': 11}, {'action': 'move-right', 'root': 10, 'key': 11}, {'action': 'return-false', 'root': -1, 'key': 11}], '1': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '2': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-false', 'root': -1, 'key': 30}], '3': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '4': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-true', 'root': -1, 'key': 30}]}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    if key > root:\n        if key < root.right:\n            \n    else:\n        \n    return root', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 14}, {'action': 'move-right', 'root': 12, 'key': 14}, {'action': 'move-left', 'root': 15, 'key': 14}, {'action': 'move-right', 'root': 13, 'key': 14}, {'action': 'insert', 'root': -1, 'key': 14}], '1': [{'action': 'move-right', 'root': 5, 'key': 6}, {'action': 'move-left', 'root': 7, 'key': 6}, {'action': 'insert', 'root': -1, 'key': 6}], '2': [{'action': 'move-left', 'root': 8, 'key': 2}, {'action': 'move-left', 'root': 3, 'key': 2}, {'action': 'move-right', 'root': 1, 'key': 2}, {'action': 'insert', 'root': -1, 'key': 2}], '3': [{'action': 'move-left', 'root': 50, 'key': 43}, {'action': 'move-right', 'root': 17, 'key': 43}, {'action': 'move-right', 'root': 23, 'key': 43}, {'action': 'insert', 'root': -1, 'key': 43}], '4': [{'action': 'move-right', 'root': 5, 'key': 9}, {'action': 'move-right', 'root': 7, 'key': 9}, {'action': 'insert', 'root': -1, 'key': 9}]}}}
2021-02-22 17:06:15.051598,insert,move-right,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root == None:\n        return False   \n    if root.val == None:\n        return False   \n    elif root.val == key:\n        return True\n    else:\n        if key < root.val:\n            return search(root.left, key)\n        else:\n            return search(root.right, key)\n    \n#    else:\n#        left = False\n#        if (root.left != None):\n#            left = search(root.left, key) \n#            \n#        right = False\n#        if (root.right != None):\n#            right = search(root.right, key)\n#       \n#        return (left or right)', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 11}, {'action': 'move-left', 'root': 12, 'key': 11}, {'action': 'move-right', 'root': 9, 'key': 11}, {'action': 'move-right', 'root': 10, 'key': 11}, {'action': 'return-false', 'root': -1, 'key': 11}], '1': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '2': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-false', 'root': -1, 'key': 30}], '3': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '4': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-true', 'root': -1, 'key': 30}]}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    if key > root:\n        if key < root.right:\n            \n    else:\n        \n    return root', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 14}, {'action': 'move-right', 'root': 12, 'key': 14}, {'action': 'move-left', 'root': 15, 'key': 14}, {'action': 'move-right', 'root': 13, 'key': 14}, {'action': 'insert', 'root': -1, 'key': 14}], '1': [{'action': 'move-right', 'root': 5, 'key': 6}, {'action': 'move-left', 'root': 7, 'key': 6}, {'action': 'insert', 'root': -1, 'key': 6}], '2': [{'action': 'move-left', 'root': 8, 'key': 2}, {'action': 'move-left', 'root': 3, 'key': 2}, {'action': 'move-right', 'root': 1, 'key': 2}, {'action': 'insert', 'root': -1, 'key': 2}], '3': [{'action': 'move-left', 'root': 50, 'key': 43}, {'action': 'move-right', 'root': 17, 'key': 43}, {'action': 'move-right', 'root': 23, 'key': 43}, {'action': 'insert', 'root': -1, 'key': 43}], '4': [{'action': 'move-right', 'root': 5, 'key': 9}, {'action': 'move-right', 'root': 7, 'key': 9}, {'action': 'insert', 'root': -1, 'key': 9}]}}}
2021-02-22 17:06:27.753174,insert,move-right,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root == None:\n        return False   \n    if root.val == None:\n        return False   \n    elif root.val == key:\n        return True\n    else:\n        if key < root.val:\n            return search(root.left, key)\n        else:\n            return search(root.right, key)\n    \n#    else:\n#        left = False\n#        if (root.left != None):\n#            left = search(root.left, key) \n#            \n#        right = False\n#        if (root.right != None):\n#            right = search(root.right, key)\n#       \n#        return (left or right)', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 11}, {'action': 'move-left', 'root': 12, 'key': 11}, {'action': 'move-right', 'root': 9, 'key': 11}, {'action': 'move-right', 'root': 10, 'key': 11}, {'action': 'return-false', 'root': -1, 'key': 11}], '1': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '2': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-false', 'root': -1, 'key': 30}], '3': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '4': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-true', 'root': -1, 'key': 30}]}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    if key > root:\n        if key < root.right:\n            \n    else:\n        \n    return root', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 14}, {'action': 'move-right', 'root': 12, 'key': 14}, {'action': 'move-left', 'root': 15, 'key': 14}, {'action': 'move-right', 'root': 13, 'key': 14}, {'action': 'insert', 'root': -1, 'key': 14}], '1': [{'action': 'move-right', 'root': 5, 'key': 6}, {'action': 'move-left', 'root': 7, 'key': 6}, {'action': 'insert', 'root': -1, 'key': 6}], '2': [{'action': 'move-left', 'root': 8, 'key': 2}, {'action': 'move-left', 'root': 3, 'key': 2}, {'action': 'move-right', 'root': 1, 'key': 2}, {'action': 'insert', 'root': -1, 'key': 2}], '3': [{'action': 'move-left', 'root': 50, 'key': 43}, {'action': 'move-right', 'root': 17, 'key': 43}, {'action': 'move-right', 'root': 23, 'key': 43}, {'action': 'insert', 'root': -1, 'key': 43}], '4': [{'action': 'move-right', 'root': 5, 'key': 9}, {'action': 'move-right', 'root': 7, 'key': 9}, {'action': 'insert', 'root': -1, 'key': 9}]}}}
2021-02-22 17:06:29.083861,insert,insert,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root == None:\n        return False   \n    if root.val == None:\n        return False   \n    elif root.val == key:\n        return True\n    else:\n        if key < root.val:\n            return search(root.left, key)\n        else:\n            return search(root.right, key)\n    \n#    else:\n#        left = False\n#        if (root.left != None):\n#            left = search(root.left, key) \n#            \n#        right = False\n#        if (root.right != None):\n#            right = search(root.right, key)\n#       \n#        return (left or right)', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 11}, {'action': 'move-left', 'root': 12, 'key': 11}, {'action': 'move-right', 'root': 9, 'key': 11}, {'action': 'move-right', 'root': 10, 'key': 11}, {'action': 'return-false', 'root': -1, 'key': 11}], '1': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '2': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-false', 'root': -1, 'key': 30}], '3': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '4': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-true', 'root': -1, 'key': 30}]}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    if key > root:\n        if key < root.right:\n            \n    else:\n        \n    return root', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 14}, {'action': 'move-right', 'root': 12, 'key': 14}, {'action': 'move-left', 'root': 15, 'key': 14}, {'action': 'move-right', 'root': 13, 'key': 14}, {'action': 'insert', 'root': -1, 'key': 14}], '1': [{'action': 'move-right', 'root': 5, 'key': 6}, {'action': 'move-left', 'root': 7, 'key': 6}, {'action': 'insert', 'root': -1, 'key': 6}], '2': [{'action': 'move-left', 'root': 8, 'key': 2}, {'action': 'move-left', 'root': 3, 'key': 2}, {'action': 'move-right', 'root': 1, 'key': 2}, {'action': 'insert', 'root': -1, 'key': 2}], '3': [{'action': 'move-left', 'root': 50, 'key': 43}, {'action': 'move-right', 'root': 17, 'key': 43}, {'action': 'move-right', 'root': 23, 'key': 43}, {'action': 'insert', 'root': -1, 'key': 43}], '4': [{'action': 'move-right', 'root': 5, 'key': 9}, {'action': 'move-right', 'root': 7, 'key': 9}, {'action': 'insert', 'root': -1, 'key': 9}], '5': [{'action': 'move-right', 'root': 8, 'key': 15}, {'action': 'move-right', 'root': 10, 'key': 15}, {'action': 'move-right', 'root': 12, 'key': 15}, {'action': 'move-right', 'root': 13, 'key': 15}, {'action': 'insert', 'root': -1, 'key': 15}]}}}
2021-02-22 17:06:32.074863,insert,move-left,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root == None:\n        return False   \n    if root.val == None:\n        return False   \n    elif root.val == key:\n        return True\n    else:\n        if key < root.val:\n            return search(root.left, key)\n        else:\n            return search(root.right, key)\n    \n#    else:\n#        left = False\n#        if (root.left != None):\n#            left = search(root.left, key) \n#            \n#        right = False\n#        if (root.right != None):\n#            right = search(root.right, key)\n#       \n#        return (left or right)', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 11}, {'action': 'move-left', 'root': 12, 'key': 11}, {'action': 'move-right', 'root': 9, 'key': 11}, {'action': 'move-right', 'root': 10, 'key': 11}, {'action': 'return-false', 'root': -1, 'key': 11}], '1': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '2': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-false', 'root': -1, 'key': 30}], '3': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '4': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-true', 'root': -1, 'key': 30}]}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    if key > root:\n        if key < root.right:\n            \n    else:\n        \n    return root', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 14}, {'action': 'move-right', 'root': 12, 'key': 14}, {'action': 'move-left', 'root': 15, 'key': 14}, {'action': 'move-right', 'root': 13, 'key': 14}, {'action': 'insert', 'root': -1, 'key': 14}], '1': [{'action': 'move-right', 'root': 5, 'key': 6}, {'action': 'move-left', 'root': 7, 'key': 6}, {'action': 'insert', 'root': -1, 'key': 6}], '2': [{'action': 'move-left', 'root': 8, 'key': 2}, {'action': 'move-left', 'root': 3, 'key': 2}, {'action': 'move-right', 'root': 1, 'key': 2}, {'action': 'insert', 'root': -1, 'key': 2}], '3': [{'action': 'move-left', 'root': 50, 'key': 43}, {'action': 'move-right', 'root': 17, 'key': 43}, {'action': 'move-right', 'root': 23, 'key': 43}, {'action': 'insert', 'root': -1, 'key': 43}], '4': [{'action': 'move-right', 'root': 5, 'key': 9}, {'action': 'move-right', 'root': 7, 'key': 9}, {'action': 'insert', 'root': -1, 'key': 9}], '5': [{'action': 'move-right', 'root': 8, 'key': 15}, {'action': 'move-right', 'root': 10, 'key': 15}, {'action': 'move-right', 'root': 12, 'key': 15}, {'action': 'move-right', 'root': 13, 'key': 15}, {'action': 'insert', 'root': -1, 'key': 15}]}}}
2021-02-22 17:06:35.552360,insert,move-right,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root == None:\n        return False   \n    if root.val == None:\n        return False   \n    elif root.val == key:\n        return True\n    else:\n        if key < root.val:\n            return search(root.left, key)\n        else:\n            return search(root.right, key)\n    \n#    else:\n#        left = False\n#        if (root.left != None):\n#            left = search(root.left, key) \n#            \n#        right = False\n#        if (root.right != None):\n#            right = search(root.right, key)\n#       \n#        return (left or right)', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 11}, {'action': 'move-left', 'root': 12, 'key': 11}, {'action': 'move-right', 'root': 9, 'key': 11}, {'action': 'move-right', 'root': 10, 'key': 11}, {'action': 'return-false', 'root': -1, 'key': 11}], '1': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '2': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-false', 'root': -1, 'key': 30}], '3': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '4': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-true', 'root': -1, 'key': 30}]}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    if key > root:\n        if key < root.right:\n            \n    else:\n        \n    return root', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 14}, {'action': 'move-right', 'root': 12, 'key': 14}, {'action': 'move-left', 'root': 15, 'key': 14}, {'action': 'move-right', 'root': 13, 'key': 14}, {'action': 'insert', 'root': -1, 'key': 14}], '1': [{'action': 'move-right', 'root': 5, 'key': 6}, {'action': 'move-left', 'root': 7, 'key': 6}, {'action': 'insert', 'root': -1, 'key': 6}], '2': [{'action': 'move-left', 'root': 8, 'key': 2}, {'action': 'move-left', 'root': 3, 'key': 2}, {'action': 'move-right', 'root': 1, 'key': 2}, {'action': 'insert', 'root': -1, 'key': 2}], '3': [{'action': 'move-left', 'root': 50, 'key': 43}, {'action': 'move-right', 'root': 17, 'key': 43}, {'action': 'move-right', 'root': 23, 'key': 43}, {'action': 'insert', 'root': -1, 'key': 43}], '4': [{'action': 'move-right', 'root': 5, 'key': 9}, {'action': 'move-right', 'root': 7, 'key': 9}, {'action': 'insert', 'root': -1, 'key': 9}], '5': [{'action': 'move-right', 'root': 8, 'key': 15}, {'action': 'move-right', 'root': 10, 'key': 15}, {'action': 'move-right', 'root': 12, 'key': 15}, {'action': 'move-right', 'root': 13, 'key': 15}, {'action': 'insert', 'root': -1, 'key': 15}]}}}
2021-02-22 17:06:35.811145,insert,move-right,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root == None:\n        return False   \n    if root.val == None:\n        return False   \n    elif root.val == key:\n        return True\n    else:\n        if key < root.val:\n            return search(root.left, key)\n        else:\n            return search(root.right, key)\n    \n#    else:\n#        left = False\n#        if (root.left != None):\n#            left = search(root.left, key) \n#            \n#        right = False\n#        if (root.right != None):\n#            right = search(root.right, key)\n#       \n#        return (left or right)', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 11}, {'action': 'move-left', 'root': 12, 'key': 11}, {'action': 'move-right', 'root': 9, 'key': 11}, {'action': 'move-right', 'root': 10, 'key': 11}, {'action': 'return-false', 'root': -1, 'key': 11}], '1': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '2': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-false', 'root': -1, 'key': 30}], '3': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '4': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-true', 'root': -1, 'key': 30}]}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    if key > root:\n        if key < root.right:\n            \n    else:\n        \n    return root', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 14}, {'action': 'move-right', 'root': 12, 'key': 14}, {'action': 'move-left', 'root': 15, 'key': 14}, {'action': 'move-right', 'root': 13, 'key': 14}, {'action': 'insert', 'root': -1, 'key': 14}], '1': [{'action': 'move-right', 'root': 5, 'key': 6}, {'action': 'move-left', 'root': 7, 'key': 6}, {'action': 'insert', 'root': -1, 'key': 6}], '2': [{'action': 'move-left', 'root': 8, 'key': 2}, {'action': 'move-left', 'root': 3, 'key': 2}, {'action': 'move-right', 'root': 1, 'key': 2}, {'action': 'insert', 'root': -1, 'key': 2}], '3': [{'action': 'move-left', 'root': 50, 'key': 43}, {'action': 'move-right', 'root': 17, 'key': 43}, {'action': 'move-right', 'root': 23, 'key': 43}, {'action': 'insert', 'root': -1, 'key': 43}], '4': [{'action': 'move-right', 'root': 5, 'key': 9}, {'action': 'move-right', 'root': 7, 'key': 9}, {'action': 'insert', 'root': -1, 'key': 9}], '5': [{'action': 'move-right', 'root': 8, 'key': 15}, {'action': 'move-right', 'root': 10, 'key': 15}, {'action': 'move-right', 'root': 12, 'key': 15}, {'action': 'move-right', 'root': 13, 'key': 15}, {'action': 'insert', 'root': -1, 'key': 15}]}}}
2021-02-22 17:06:36.574326,insert,insert,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root == None:\n        return False   \n    if root.val == None:\n        return False   \n    elif root.val == key:\n        return True\n    else:\n        if key < root.val:\n            return search(root.left, key)\n        else:\n            return search(root.right, key)\n    \n#    else:\n#        left = False\n#        if (root.left != None):\n#            left = search(root.left, key) \n#            \n#        right = False\n#        if (root.right != None):\n#            right = search(root.right, key)\n#       \n#        return (left or right)', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 11}, {'action': 'move-left', 'root': 12, 'key': 11}, {'action': 'move-right', 'root': 9, 'key': 11}, {'action': 'move-right', 'root': 10, 'key': 11}, {'action': 'return-false', 'root': -1, 'key': 11}], '1': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '2': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-false', 'root': -1, 'key': 30}], '3': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '4': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-true', 'root': -1, 'key': 30}]}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    if key > root:\n        if key < root.right:\n            \n    else:\n        \n    return root', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 14}, {'action': 'move-right', 'root': 12, 'key': 14}, {'action': 'move-left', 'root': 15, 'key': 14}, {'action': 'move-right', 'root': 13, 'key': 14}, {'action': 'insert', 'root': -1, 'key': 14}], '1': [{'action': 'move-right', 'root': 5, 'key': 6}, {'action': 'move-left', 'root': 7, 'key': 6}, {'action': 'insert', 'root': -1, 'key': 6}], '2': [{'action': 'move-left', 'root': 8, 'key': 2}, {'action': 'move-left', 'root': 3, 'key': 2}, {'action': 'move-right', 'root': 1, 'key': 2}, {'action': 'insert', 'root': -1, 'key': 2}], '3': [{'action': 'move-left', 'root': 50, 'key': 43}, {'action': 'move-right', 'root': 17, 'key': 43}, {'action': 'move-right', 'root': 23, 'key': 43}, {'action': 'insert', 'root': -1, 'key': 43}], '4': [{'action': 'move-right', 'root': 5, 'key': 9}, {'action': 'move-right', 'root': 7, 'key': 9}, {'action': 'insert', 'root': -1, 'key': 9}], '5': [{'action': 'move-right', 'root': 8, 'key': 15}, {'action': 'move-right', 'root': 10, 'key': 15}, {'action': 'move-right', 'root': 12, 'key': 15}, {'action': 'move-right', 'root': 13, 'key': 15}, {'action': 'insert', 'root': -1, 'key': 15}], '6': [{'action': 'move-left', 'root': 50, 'key': 43}, {'action': 'move-right', 'root': 17, 'key': 43}, {'action': 'move-right', 'root': 23, 'key': 43}, {'action': 'insert', 'root': -1, 'key': 43}]}}}
2021-02-22 17:08:24.887479,insert,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root == None:\n        return False   \n    if root.val == None:\n        return False   \n    elif root.val == key:\n        return True\n    else:\n        if key < root.val:\n            return search(root.left, key)\n        else:\n            return search(root.right, key)\n    \n#    else:\n#        left = False\n#        if (root.left != None):\n#            left = search(root.left, key) \n#            \n#        right = False\n#        if (root.right != None):\n#            right = search(root.right, key)\n#       \n#        return (left or right)', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 11}, {'action': 'move-left', 'root': 12, 'key': 11}, {'action': 'move-right', 'root': 9, 'key': 11}, {'action': 'move-right', 'root': 10, 'key': 11}, {'action': 'return-false', 'root': -1, 'key': 11}], '1': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '2': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-false', 'root': -1, 'key': 30}], '3': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '4': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-true', 'root': -1, 'key': 30}]}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    if key > root:\n        if root.right.val == None:\n            root.right.val = key\n        else:\n            root.right.val = insert(root.right, key)\n    else:\n        if root.left.val == None:\n            root.left.val = key\n        else:\n            root.left.val = insert(root.left, key)\n    return root', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 14}, {'action': 'move-right', 'root': 12, 'key': 14}, {'action': 'move-left', 'root': 15, 'key': 14}, {'action': 'move-right', 'root': 13, 'key': 14}, {'action': 'insert', 'root': -1, 'key': 14}], '1': [{'action': 'move-right', 'root': 5, 'key': 6}, {'action': 'move-left', 'root': 7, 'key': 6}, {'action': 'insert', 'root': -1, 'key': 6}], '2': [{'action': 'move-left', 'root': 8, 'key': 2}, {'action': 'move-left', 'root': 3, 'key': 2}, {'action': 'move-right', 'root': 1, 'key': 2}, {'action': 'insert', 'root': -1, 'key': 2}], '3': [{'action': 'move-left', 'root': 50, 'key': 43}, {'action': 'move-right', 'root': 17, 'key': 43}, {'action': 'move-right', 'root': 23, 'key': 43}, {'action': 'insert', 'root': -1, 'key': 43}], '4': [{'action': 'move-right', 'root': 5, 'key': 9}, {'action': 'move-right', 'root': 7, 'key': 9}, {'action': 'insert', 'root': -1, 'key': 9}], '5': [{'action': 'move-right', 'root': 8, 'key': 15}, {'action': 'move-right', 'root': 10, 'key': 15}, {'action': 'move-right', 'root': 12, 'key': 15}, {'action': 'move-right', 'root': 13, 'key': 15}, {'action': 'insert', 'root': -1, 'key': 15}], '6': [{'action': 'move-left', 'root': 50, 'key': 43}, {'action': 'move-right', 'root': 17, 'key': 43}, {'action': 'move-right', 'root': 23, 'key': 43}, {'action': 'insert', 'root': -1, 'key': 43}]}}}
2021-02-22 17:08:32.121931,insert,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root == None:\n        return False   \n    if root.val == None:\n        return False   \n    elif root.val == key:\n        return True\n    else:\n        if key < root.val:\n            return search(root.left, key)\n        else:\n            return search(root.right, key)\n    \n#    else:\n#        left = False\n#        if (root.left != None):\n#            left = search(root.left, key) \n#            \n#        right = False\n#        if (root.right != None):\n#            right = search(root.right, key)\n#       \n#        return (left or right)', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 11}, {'action': 'move-left', 'root': 12, 'key': 11}, {'action': 'move-right', 'root': 9, 'key': 11}, {'action': 'move-right', 'root': 10, 'key': 11}, {'action': 'return-false', 'root': -1, 'key': 11}], '1': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '2': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-false', 'root': -1, 'key': 30}], '3': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '4': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-true', 'root': -1, 'key': 30}]}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    if key > root.val:\n        if root.right.val == None:\n            root.right.val = key\n        else:\n            root.right.val = insert(root.right, key)\n    else:\n        if root.left.val == None:\n            root.left.val = key\n        else:\n            root.left.val = insert(root.left, key)\n    return root', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 14}, {'action': 'move-right', 'root': 12, 'key': 14}, {'action': 'move-left', 'root': 15, 'key': 14}, {'action': 'move-right', 'root': 13, 'key': 14}, {'action': 'insert', 'root': -1, 'key': 14}], '1': [{'action': 'move-right', 'root': 5, 'key': 6}, {'action': 'move-left', 'root': 7, 'key': 6}, {'action': 'insert', 'root': -1, 'key': 6}], '2': [{'action': 'move-left', 'root': 8, 'key': 2}, {'action': 'move-left', 'root': 3, 'key': 2}, {'action': 'move-right', 'root': 1, 'key': 2}, {'action': 'insert', 'root': -1, 'key': 2}], '3': [{'action': 'move-left', 'root': 50, 'key': 43}, {'action': 'move-right', 'root': 17, 'key': 43}, {'action': 'move-right', 'root': 23, 'key': 43}, {'action': 'insert', 'root': -1, 'key': 43}], '4': [{'action': 'move-right', 'root': 5, 'key': 9}, {'action': 'move-right', 'root': 7, 'key': 9}, {'action': 'insert', 'root': -1, 'key': 9}], '5': [{'action': 'move-right', 'root': 8, 'key': 15}, {'action': 'move-right', 'root': 10, 'key': 15}, {'action': 'move-right', 'root': 12, 'key': 15}, {'action': 'move-right', 'root': 13, 'key': 15}, {'action': 'insert', 'root': -1, 'key': 15}], '6': [{'action': 'move-left', 'root': 50, 'key': 43}, {'action': 'move-right', 'root': 17, 'key': 43}, {'action': 'move-right', 'root': 23, 'key': 43}, {'action': 'insert', 'root': -1, 'key': 43}]}}}
2021-02-22 17:08:32.755041,insert,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root == None:\n        return False   \n    if root.val == None:\n        return False   \n    elif root.val == key:\n        return True\n    else:\n        if key < root.val:\n            return search(root.left, key)\n        else:\n            return search(root.right, key)\n    \n#    else:\n#        left = False\n#        if (root.left != None):\n#            left = search(root.left, key) \n#            \n#        right = False\n#        if (root.right != None):\n#            right = search(root.right, key)\n#       \n#        return (left or right)', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 11}, {'action': 'move-left', 'root': 12, 'key': 11}, {'action': 'move-right', 'root': 9, 'key': 11}, {'action': 'move-right', 'root': 10, 'key': 11}, {'action': 'return-false', 'root': -1, 'key': 11}], '1': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '2': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-false', 'root': -1, 'key': 30}], '3': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '4': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-true', 'root': -1, 'key': 30}]}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    if key > root.val:\n        if root.right.val == None:\n            root.right.val = key\n        else:\n            root.right.val = insert(root.right, key)\n    else:\n        if root.left.val == None:\n            root.left.val = key\n        else:\n            root.left.val = insert(root.left, key)\n    return root', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 14}, {'action': 'move-right', 'root': 12, 'key': 14}, {'action': 'move-left', 'root': 15, 'key': 14}, {'action': 'move-right', 'root': 13, 'key': 14}, {'action': 'insert', 'root': -1, 'key': 14}], '1': [{'action': 'move-right', 'root': 5, 'key': 6}, {'action': 'move-left', 'root': 7, 'key': 6}, {'action': 'insert', 'root': -1, 'key': 6}], '2': [{'action': 'move-left', 'root': 8, 'key': 2}, {'action': 'move-left', 'root': 3, 'key': 2}, {'action': 'move-right', 'root': 1, 'key': 2}, {'action': 'insert', 'root': -1, 'key': 2}], '3': [{'action': 'move-left', 'root': 50, 'key': 43}, {'action': 'move-right', 'root': 17, 'key': 43}, {'action': 'move-right', 'root': 23, 'key': 43}, {'action': 'insert', 'root': -1, 'key': 43}], '4': [{'action': 'move-right', 'root': 5, 'key': 9}, {'action': 'move-right', 'root': 7, 'key': 9}, {'action': 'insert', 'root': -1, 'key': 9}], '5': [{'action': 'move-right', 'root': 8, 'key': 15}, {'action': 'move-right', 'root': 10, 'key': 15}, {'action': 'move-right', 'root': 12, 'key': 15}, {'action': 'move-right', 'root': 13, 'key': 15}, {'action': 'insert', 'root': -1, 'key': 15}], '6': [{'action': 'move-left', 'root': 50, 'key': 43}, {'action': 'move-right', 'root': 17, 'key': 43}, {'action': 'move-right', 'root': 23, 'key': 43}, {'action': 'insert', 'root': -1, 'key': 43}]}}}
2021-02-22 17:08:33.347140,insert,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root == None:\n        return False   \n    if root.val == None:\n        return False   \n    elif root.val == key:\n        return True\n    else:\n        if key < root.val:\n            return search(root.left, key)\n        else:\n            return search(root.right, key)\n    \n#    else:\n#        left = False\n#        if (root.left != None):\n#            left = search(root.left, key) \n#            \n#        right = False\n#        if (root.right != None):\n#            right = search(root.right, key)\n#       \n#        return (left or right)', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 11}, {'action': 'move-left', 'root': 12, 'key': 11}, {'action': 'move-right', 'root': 9, 'key': 11}, {'action': 'move-right', 'root': 10, 'key': 11}, {'action': 'return-false', 'root': -1, 'key': 11}], '1': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '2': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-false', 'root': -1, 'key': 30}], '3': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '4': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-true', 'root': -1, 'key': 30}]}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    if key > root.val:\n        if root.right.val == None:\n            root.right.val = key\n        else:\n            root.right.val = insert(root.right, key)\n    else:\n        if root.left.val == None:\n            root.left.val = key\n        else:\n            root.left.val = insert(root.left, key)\n    return root', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 14}, {'action': 'move-right', 'root': 12, 'key': 14}, {'action': 'move-left', 'root': 15, 'key': 14}, {'action': 'move-right', 'root': 13, 'key': 14}, {'action': 'insert', 'root': -1, 'key': 14}], '1': [{'action': 'move-right', 'root': 5, 'key': 6}, {'action': 'move-left', 'root': 7, 'key': 6}, {'action': 'insert', 'root': -1, 'key': 6}], '2': [{'action': 'move-left', 'root': 8, 'key': 2}, {'action': 'move-left', 'root': 3, 'key': 2}, {'action': 'move-right', 'root': 1, 'key': 2}, {'action': 'insert', 'root': -1, 'key': 2}], '3': [{'action': 'move-left', 'root': 50, 'key': 43}, {'action': 'move-right', 'root': 17, 'key': 43}, {'action': 'move-right', 'root': 23, 'key': 43}, {'action': 'insert', 'root': -1, 'key': 43}], '4': [{'action': 'move-right', 'root': 5, 'key': 9}, {'action': 'move-right', 'root': 7, 'key': 9}, {'action': 'insert', 'root': -1, 'key': 9}], '5': [{'action': 'move-right', 'root': 8, 'key': 15}, {'action': 'move-right', 'root': 10, 'key': 15}, {'action': 'move-right', 'root': 12, 'key': 15}, {'action': 'move-right', 'root': 13, 'key': 15}, {'action': 'insert', 'root': -1, 'key': 15}], '6': [{'action': 'move-left', 'root': 50, 'key': 43}, {'action': 'move-right', 'root': 17, 'key': 43}, {'action': 'move-right', 'root': 23, 'key': 43}, {'action': 'insert', 'root': -1, 'key': 43}]}}}
2021-02-22 17:08:33.502094,insert,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root == None:\n        return False   \n    if root.val == None:\n        return False   \n    elif root.val == key:\n        return True\n    else:\n        if key < root.val:\n            return search(root.left, key)\n        else:\n            return search(root.right, key)\n    \n#    else:\n#        left = False\n#        if (root.left != None):\n#            left = search(root.left, key) \n#            \n#        right = False\n#        if (root.right != None):\n#            right = search(root.right, key)\n#       \n#        return (left or right)', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 11}, {'action': 'move-left', 'root': 12, 'key': 11}, {'action': 'move-right', 'root': 9, 'key': 11}, {'action': 'move-right', 'root': 10, 'key': 11}, {'action': 'return-false', 'root': -1, 'key': 11}], '1': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '2': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-false', 'root': -1, 'key': 30}], '3': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '4': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-true', 'root': -1, 'key': 30}]}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    if key > root.val:\n        if root.right.val == None:\n            root.right.val = key\n        else:\n            root.right.val = insert(root.right, key)\n    else:\n        if root.left.val == None:\n            root.left.val = key\n        else:\n            root.left.val = insert(root.left, key)\n    return root', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 14}, {'action': 'move-right', 'root': 12, 'key': 14}, {'action': 'move-left', 'root': 15, 'key': 14}, {'action': 'move-right', 'root': 13, 'key': 14}, {'action': 'insert', 'root': -1, 'key': 14}], '1': [{'action': 'move-right', 'root': 5, 'key': 6}, {'action': 'move-left', 'root': 7, 'key': 6}, {'action': 'insert', 'root': -1, 'key': 6}], '2': [{'action': 'move-left', 'root': 8, 'key': 2}, {'action': 'move-left', 'root': 3, 'key': 2}, {'action': 'move-right', 'root': 1, 'key': 2}, {'action': 'insert', 'root': -1, 'key': 2}], '3': [{'action': 'move-left', 'root': 50, 'key': 43}, {'action': 'move-right', 'root': 17, 'key': 43}, {'action': 'move-right', 'root': 23, 'key': 43}, {'action': 'insert', 'root': -1, 'key': 43}], '4': [{'action': 'move-right', 'root': 5, 'key': 9}, {'action': 'move-right', 'root': 7, 'key': 9}, {'action': 'insert', 'root': -1, 'key': 9}], '5': [{'action': 'move-right', 'root': 8, 'key': 15}, {'action': 'move-right', 'root': 10, 'key': 15}, {'action': 'move-right', 'root': 12, 'key': 15}, {'action': 'move-right', 'root': 13, 'key': 15}, {'action': 'insert', 'root': -1, 'key': 15}], '6': [{'action': 'move-left', 'root': 50, 'key': 43}, {'action': 'move-right', 'root': 17, 'key': 43}, {'action': 'move-right', 'root': 23, 'key': 43}, {'action': 'insert', 'root': -1, 'key': 43}]}}}
2021-02-22 17:09:00.744105,insert,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root == None:\n        return False   \n    if root.val == None:\n        return False   \n    elif root.val == key:\n        return True\n    else:\n        if key < root.val:\n            return search(root.left, key)\n        else:\n            return search(root.right, key)\n    \n#    else:\n#        left = False\n#        if (root.left != None):\n#            left = search(root.left, key) \n#            \n#        right = False\n#        if (root.right != None):\n#            right = search(root.right, key)\n#       \n#        return (left or right)', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 11}, {'action': 'move-left', 'root': 12, 'key': 11}, {'action': 'move-right', 'root': 9, 'key': 11}, {'action': 'move-right', 'root': 10, 'key': 11}, {'action': 'return-false', 'root': -1, 'key': 11}], '1': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '2': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-false', 'root': -1, 'key': 30}], '3': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '4': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-true', 'root': -1, 'key': 30}]}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    \n    if root == None:\n        return root\n    if key > root.val:\n        if root.right.val == None:\n            root.right.val = key\n        else:\n            root.right.val = insert(root.right, key)\n    else:\n        if root.left.val == None:\n            root.left.val = key\n        else:\n            root.left.val = insert(root.left, key)\n    return root', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 14}, {'action': 'move-right', 'root': 12, 'key': 14}, {'action': 'move-left', 'root': 15, 'key': 14}, {'action': 'move-right', 'root': 13, 'key': 14}, {'action': 'insert', 'root': -1, 'key': 14}], '1': [{'action': 'move-right', 'root': 5, 'key': 6}, {'action': 'move-left', 'root': 7, 'key': 6}, {'action': 'insert', 'root': -1, 'key': 6}], '2': [{'action': 'move-left', 'root': 8, 'key': 2}, {'action': 'move-left', 'root': 3, 'key': 2}, {'action': 'move-right', 'root': 1, 'key': 2}, {'action': 'insert', 'root': -1, 'key': 2}], '3': [{'action': 'move-left', 'root': 50, 'key': 43}, {'action': 'move-right', 'root': 17, 'key': 43}, {'action': 'move-right', 'root': 23, 'key': 43}, {'action': 'insert', 'root': -1, 'key': 43}], '4': [{'action': 'move-right', 'root': 5, 'key': 9}, {'action': 'move-right', 'root': 7, 'key': 9}, {'action': 'insert', 'root': -1, 'key': 9}], '5': [{'action': 'move-right', 'root': 8, 'key': 15}, {'action': 'move-right', 'root': 10, 'key': 15}, {'action': 'move-right', 'root': 12, 'key': 15}, {'action': 'move-right', 'root': 13, 'key': 15}, {'action': 'insert', 'root': -1, 'key': 15}], '6': [{'action': 'move-left', 'root': 50, 'key': 43}, {'action': 'move-right', 'root': 17, 'key': 43}, {'action': 'move-right', 'root': 23, 'key': 43}, {'action': 'insert', 'root': -1, 'key': 43}]}}}
2021-02-22 17:09:01.748024,insert,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root == None:\n        return False   \n    if root.val == None:\n        return False   \n    elif root.val == key:\n        return True\n    else:\n        if key < root.val:\n            return search(root.left, key)\n        else:\n            return search(root.right, key)\n    \n#    else:\n#        left = False\n#        if (root.left != None):\n#            left = search(root.left, key) \n#            \n#        right = False\n#        if (root.right != None):\n#            right = search(root.right, key)\n#       \n#        return (left or right)', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 11}, {'action': 'move-left', 'root': 12, 'key': 11}, {'action': 'move-right', 'root': 9, 'key': 11}, {'action': 'move-right', 'root': 10, 'key': 11}, {'action': 'return-false', 'root': -1, 'key': 11}], '1': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '2': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-false', 'root': -1, 'key': 30}], '3': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '4': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-true', 'root': -1, 'key': 30}]}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    \n    if root == None:\n        return root\n    if key > root.val:\n        if root.right.val == None:\n            root.right.val = key\n        else:\n            root.right.val = insert(root.right, key)\n    else:\n        if root.left.val == None:\n            root.left.val = key\n        else:\n            root.left.val = insert(root.left, key)\n    return root', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 14}, {'action': 'move-right', 'root': 12, 'key': 14}, {'action': 'move-left', 'root': 15, 'key': 14}, {'action': 'move-right', 'root': 13, 'key': 14}, {'action': 'insert', 'root': -1, 'key': 14}], '1': [{'action': 'move-right', 'root': 5, 'key': 6}, {'action': 'move-left', 'root': 7, 'key': 6}, {'action': 'insert', 'root': -1, 'key': 6}], '2': [{'action': 'move-left', 'root': 8, 'key': 2}, {'action': 'move-left', 'root': 3, 'key': 2}, {'action': 'move-right', 'root': 1, 'key': 2}, {'action': 'insert', 'root': -1, 'key': 2}], '3': [{'action': 'move-left', 'root': 50, 'key': 43}, {'action': 'move-right', 'root': 17, 'key': 43}, {'action': 'move-right', 'root': 23, 'key': 43}, {'action': 'insert', 'root': -1, 'key': 43}], '4': [{'action': 'move-right', 'root': 5, 'key': 9}, {'action': 'move-right', 'root': 7, 'key': 9}, {'action': 'insert', 'root': -1, 'key': 9}], '5': [{'action': 'move-right', 'root': 8, 'key': 15}, {'action': 'move-right', 'root': 10, 'key': 15}, {'action': 'move-right', 'root': 12, 'key': 15}, {'action': 'move-right', 'root': 13, 'key': 15}, {'action': 'insert', 'root': -1, 'key': 15}], '6': [{'action': 'move-left', 'root': 50, 'key': 43}, {'action': 'move-right', 'root': 17, 'key': 43}, {'action': 'move-right', 'root': 23, 'key': 43}, {'action': 'insert', 'root': -1, 'key': 43}]}}}
2021-02-22 17:09:01.961762,insert,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root == None:\n        return False   \n    if root.val == None:\n        return False   \n    elif root.val == key:\n        return True\n    else:\n        if key < root.val:\n            return search(root.left, key)\n        else:\n            return search(root.right, key)\n    \n#    else:\n#        left = False\n#        if (root.left != None):\n#            left = search(root.left, key) \n#            \n#        right = False\n#        if (root.right != None):\n#            right = search(root.right, key)\n#       \n#        return (left or right)', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 11}, {'action': 'move-left', 'root': 12, 'key': 11}, {'action': 'move-right', 'root': 9, 'key': 11}, {'action': 'move-right', 'root': 10, 'key': 11}, {'action': 'return-false', 'root': -1, 'key': 11}], '1': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '2': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-false', 'root': -1, 'key': 30}], '3': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '4': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-true', 'root': -1, 'key': 30}]}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    \n    if root == None:\n        return root\n    if key > root.val:\n        if root.right.val == None:\n            root.right.val = key\n        else:\n            root.right.val = insert(root.right, key)\n    else:\n        if root.left.val == None:\n            root.left.val = key\n        else:\n            root.left.val = insert(root.left, key)\n    return root', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 14}, {'action': 'move-right', 'root': 12, 'key': 14}, {'action': 'move-left', 'root': 15, 'key': 14}, {'action': 'move-right', 'root': 13, 'key': 14}, {'action': 'insert', 'root': -1, 'key': 14}], '1': [{'action': 'move-right', 'root': 5, 'key': 6}, {'action': 'move-left', 'root': 7, 'key': 6}, {'action': 'insert', 'root': -1, 'key': 6}], '2': [{'action': 'move-left', 'root': 8, 'key': 2}, {'action': 'move-left', 'root': 3, 'key': 2}, {'action': 'move-right', 'root': 1, 'key': 2}, {'action': 'insert', 'root': -1, 'key': 2}], '3': [{'action': 'move-left', 'root': 50, 'key': 43}, {'action': 'move-right', 'root': 17, 'key': 43}, {'action': 'move-right', 'root': 23, 'key': 43}, {'action': 'insert', 'root': -1, 'key': 43}], '4': [{'action': 'move-right', 'root': 5, 'key': 9}, {'action': 'move-right', 'root': 7, 'key': 9}, {'action': 'insert', 'root': -1, 'key': 9}], '5': [{'action': 'move-right', 'root': 8, 'key': 15}, {'action': 'move-right', 'root': 10, 'key': 15}, {'action': 'move-right', 'root': 12, 'key': 15}, {'action': 'move-right', 'root': 13, 'key': 15}, {'action': 'insert', 'root': -1, 'key': 15}], '6': [{'action': 'move-left', 'root': 50, 'key': 43}, {'action': 'move-right', 'root': 17, 'key': 43}, {'action': 'move-right', 'root': 23, 'key': 43}, {'action': 'insert', 'root': -1, 'key': 43}]}}}
2021-02-22 17:09:02.105920,insert,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root == None:\n        return False   \n    if root.val == None:\n        return False   \n    elif root.val == key:\n        return True\n    else:\n        if key < root.val:\n            return search(root.left, key)\n        else:\n            return search(root.right, key)\n    \n#    else:\n#        left = False\n#        if (root.left != None):\n#            left = search(root.left, key) \n#            \n#        right = False\n#        if (root.right != None):\n#            right = search(root.right, key)\n#       \n#        return (left or right)', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 11}, {'action': 'move-left', 'root': 12, 'key': 11}, {'action': 'move-right', 'root': 9, 'key': 11}, {'action': 'move-right', 'root': 10, 'key': 11}, {'action': 'return-false', 'root': -1, 'key': 11}], '1': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '2': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-false', 'root': -1, 'key': 30}], '3': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '4': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-true', 'root': -1, 'key': 30}]}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    \n    if root == None:\n        return root\n    if key > root.val:\n        if root.right.val == None:\n            root.right.val = key\n        else:\n            root.right.val = insert(root.right, key)\n    else:\n        if root.left.val == None:\n            root.left.val = key\n        else:\n            root.left.val = insert(root.left, key)\n    return root', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 14}, {'action': 'move-right', 'root': 12, 'key': 14}, {'action': 'move-left', 'root': 15, 'key': 14}, {'action': 'move-right', 'root': 13, 'key': 14}, {'action': 'insert', 'root': -1, 'key': 14}], '1': [{'action': 'move-right', 'root': 5, 'key': 6}, {'action': 'move-left', 'root': 7, 'key': 6}, {'action': 'insert', 'root': -1, 'key': 6}], '2': [{'action': 'move-left', 'root': 8, 'key': 2}, {'action': 'move-left', 'root': 3, 'key': 2}, {'action': 'move-right', 'root': 1, 'key': 2}, {'action': 'insert', 'root': -1, 'key': 2}], '3': [{'action': 'move-left', 'root': 50, 'key': 43}, {'action': 'move-right', 'root': 17, 'key': 43}, {'action': 'move-right', 'root': 23, 'key': 43}, {'action': 'insert', 'root': -1, 'key': 43}], '4': [{'action': 'move-right', 'root': 5, 'key': 9}, {'action': 'move-right', 'root': 7, 'key': 9}, {'action': 'insert', 'root': -1, 'key': 9}], '5': [{'action': 'move-right', 'root': 8, 'key': 15}, {'action': 'move-right', 'root': 10, 'key': 15}, {'action': 'move-right', 'root': 12, 'key': 15}, {'action': 'move-right', 'root': 13, 'key': 15}, {'action': 'insert', 'root': -1, 'key': 15}], '6': [{'action': 'move-left', 'root': 50, 'key': 43}, {'action': 'move-right', 'root': 17, 'key': 43}, {'action': 'move-right', 'root': 23, 'key': 43}, {'action': 'insert', 'root': -1, 'key': 43}]}}}
2021-02-22 17:09:09.279650,insert,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root == None:\n        return False   \n    if root.val == None:\n        return False   \n    elif root.val == key:\n        return True\n    else:\n        if key < root.val:\n            return search(root.left, key)\n        else:\n            return search(root.right, key)\n    \n#    else:\n#        left = False\n#        if (root.left != None):\n#            left = search(root.left, key) \n#            \n#        right = False\n#        if (root.right != None):\n#            right = search(root.right, key)\n#       \n#        return (left or right)', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 11}, {'action': 'move-left', 'root': 12, 'key': 11}, {'action': 'move-right', 'root': 9, 'key': 11}, {'action': 'move-right', 'root': 10, 'key': 11}, {'action': 'return-false', 'root': -1, 'key': 11}], '1': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '2': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-false', 'root': -1, 'key': 30}], '3': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '4': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-true', 'root': -1, 'key': 30}]}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    if key > root.val:\n        if root.right.val == None:\n            root.right.val = key\n        else:\n            root.right.val = insert(root.right, key)\n    else:\n        if root.left.val == None:\n            root.left.val = key\n        else:\n            root.left.val = insert(root.left, key)\n    return root', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 14}, {'action': 'move-right', 'root': 12, 'key': 14}, {'action': 'move-left', 'root': 15, 'key': 14}, {'action': 'move-right', 'root': 13, 'key': 14}, {'action': 'insert', 'root': -1, 'key': 14}], '1': [{'action': 'move-right', 'root': 5, 'key': 6}, {'action': 'move-left', 'root': 7, 'key': 6}, {'action': 'insert', 'root': -1, 'key': 6}], '2': [{'action': 'move-left', 'root': 8, 'key': 2}, {'action': 'move-left', 'root': 3, 'key': 2}, {'action': 'move-right', 'root': 1, 'key': 2}, {'action': 'insert', 'root': -1, 'key': 2}], '3': [{'action': 'move-left', 'root': 50, 'key': 43}, {'action': 'move-right', 'root': 17, 'key': 43}, {'action': 'move-right', 'root': 23, 'key': 43}, {'action': 'insert', 'root': -1, 'key': 43}], '4': [{'action': 'move-right', 'root': 5, 'key': 9}, {'action': 'move-right', 'root': 7, 'key': 9}, {'action': 'insert', 'root': -1, 'key': 9}], '5': [{'action': 'move-right', 'root': 8, 'key': 15}, {'action': 'move-right', 'root': 10, 'key': 15}, {'action': 'move-right', 'root': 12, 'key': 15}, {'action': 'move-right', 'root': 13, 'key': 15}, {'action': 'insert', 'root': -1, 'key': 15}], '6': [{'action': 'move-left', 'root': 50, 'key': 43}, {'action': 'move-right', 'root': 17, 'key': 43}, {'action': 'move-right', 'root': 23, 'key': 43}, {'action': 'insert', 'root': -1, 'key': 43}]}}}
2021-02-22 17:09:23.121475,insert,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root == None:\n        return False   \n    if root.val == None:\n        return False   \n    elif root.val == key:\n        return True\n    else:\n        if key < root.val:\n            return search(root.left, key)\n        else:\n            return search(root.right, key)\n    \n#    else:\n#        left = False\n#        if (root.left != None):\n#            left = search(root.left, key) \n#            \n#        right = False\n#        if (root.right != None):\n#            right = search(root.right, key)\n#       \n#        return (left or right)', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 11}, {'action': 'move-left', 'root': 12, 'key': 11}, {'action': 'move-right', 'root': 9, 'key': 11}, {'action': 'move-right', 'root': 10, 'key': 11}, {'action': 'return-false', 'root': -1, 'key': 11}], '1': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '2': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-false', 'root': -1, 'key': 30}], '3': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '4': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-true', 'root': -1, 'key': 30}]}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    if key > root.val:\n        if root.right.val == None:\n            root.right.val = key\n        else:\n            root.right.val = insert(root.right, key)\n    else:\n        if root.left.val == None:\n            root.left.val = key\n        else:\n            root.left.val = insert(root.left, key)\n    return root', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 14}, {'action': 'move-right', 'root': 12, 'key': 14}, {'action': 'move-left', 'root': 15, 'key': 14}, {'action': 'move-right', 'root': 13, 'key': 14}, {'action': 'insert', 'root': -1, 'key': 14}], '1': [{'action': 'move-right', 'root': 5, 'key': 6}, {'action': 'move-left', 'root': 7, 'key': 6}, {'action': 'insert', 'root': -1, 'key': 6}], '2': [{'action': 'move-left', 'root': 8, 'key': 2}, {'action': 'move-left', 'root': 3, 'key': 2}, {'action': 'move-right', 'root': 1, 'key': 2}, {'action': 'insert', 'root': -1, 'key': 2}], '3': [{'action': 'move-left', 'root': 50, 'key': 43}, {'action': 'move-right', 'root': 17, 'key': 43}, {'action': 'move-right', 'root': 23, 'key': 43}, {'action': 'insert', 'root': -1, 'key': 43}], '4': [{'action': 'move-right', 'root': 5, 'key': 9}, {'action': 'move-right', 'root': 7, 'key': 9}, {'action': 'insert', 'root': -1, 'key': 9}], '5': [{'action': 'move-right', 'root': 8, 'key': 15}, {'action': 'move-right', 'root': 10, 'key': 15}, {'action': 'move-right', 'root': 12, 'key': 15}, {'action': 'move-right', 'root': 13, 'key': 15}, {'action': 'insert', 'root': -1, 'key': 15}], '6': [{'action': 'move-left', 'root': 50, 'key': 43}, {'action': 'move-right', 'root': 17, 'key': 43}, {'action': 'move-right', 'root': 23, 'key': 43}, {'action': 'insert', 'root': -1, 'key': 43}]}}}
2021-02-22 17:09:23.725780,insert,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root == None:\n        return False   \n    if root.val == None:\n        return False   \n    elif root.val == key:\n        return True\n    else:\n        if key < root.val:\n            return search(root.left, key)\n        else:\n            return search(root.right, key)\n    \n#    else:\n#        left = False\n#        if (root.left != None):\n#            left = search(root.left, key) \n#            \n#        right = False\n#        if (root.right != None):\n#            right = search(root.right, key)\n#       \n#        return (left or right)', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 11}, {'action': 'move-left', 'root': 12, 'key': 11}, {'action': 'move-right', 'root': 9, 'key': 11}, {'action': 'move-right', 'root': 10, 'key': 11}, {'action': 'return-false', 'root': -1, 'key': 11}], '1': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '2': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-false', 'root': -1, 'key': 30}], '3': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '4': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-true', 'root': -1, 'key': 30}]}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    if key > root.val:\n        if root.right.val == None:\n            root.right.val = key\n        else:\n            root.right.val = insert(root.right, key)\n    else:\n        if root.left.val == None:\n            root.left.val = key\n        else:\n            root.left.val = insert(root.left, key)\n    return root', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 14}, {'action': 'move-right', 'root': 12, 'key': 14}, {'action': 'move-left', 'root': 15, 'key': 14}, {'action': 'move-right', 'root': 13, 'key': 14}, {'action': 'insert', 'root': -1, 'key': 14}], '1': [{'action': 'move-right', 'root': 5, 'key': 6}, {'action': 'move-left', 'root': 7, 'key': 6}, {'action': 'insert', 'root': -1, 'key': 6}], '2': [{'action': 'move-left', 'root': 8, 'key': 2}, {'action': 'move-left', 'root': 3, 'key': 2}, {'action': 'move-right', 'root': 1, 'key': 2}, {'action': 'insert', 'root': -1, 'key': 2}], '3': [{'action': 'move-left', 'root': 50, 'key': 43}, {'action': 'move-right', 'root': 17, 'key': 43}, {'action': 'move-right', 'root': 23, 'key': 43}, {'action': 'insert', 'root': -1, 'key': 43}], '4': [{'action': 'move-right', 'root': 5, 'key': 9}, {'action': 'move-right', 'root': 7, 'key': 9}, {'action': 'insert', 'root': -1, 'key': 9}], '5': [{'action': 'move-right', 'root': 8, 'key': 15}, {'action': 'move-right', 'root': 10, 'key': 15}, {'action': 'move-right', 'root': 12, 'key': 15}, {'action': 'move-right', 'root': 13, 'key': 15}, {'action': 'insert', 'root': -1, 'key': 15}], '6': [{'action': 'move-left', 'root': 50, 'key': 43}, {'action': 'move-right', 'root': 17, 'key': 43}, {'action': 'move-right', 'root': 23, 'key': 43}, {'action': 'insert', 'root': -1, 'key': 43}]}}}
2021-02-22 17:09:23.900649,insert,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root == None:\n        return False   \n    if root.val == None:\n        return False   \n    elif root.val == key:\n        return True\n    else:\n        if key < root.val:\n            return search(root.left, key)\n        else:\n            return search(root.right, key)\n    \n#    else:\n#        left = False\n#        if (root.left != None):\n#            left = search(root.left, key) \n#            \n#        right = False\n#        if (root.right != None):\n#            right = search(root.right, key)\n#       \n#        return (left or right)', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 11}, {'action': 'move-left', 'root': 12, 'key': 11}, {'action': 'move-right', 'root': 9, 'key': 11}, {'action': 'move-right', 'root': 10, 'key': 11}, {'action': 'return-false', 'root': -1, 'key': 11}], '1': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '2': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-false', 'root': -1, 'key': 30}], '3': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '4': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-true', 'root': -1, 'key': 30}]}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    if key > root.val:\n        if root.right.val == None:\n            root.right.val = key\n        else:\n            root.right.val = insert(root.right, key)\n    else:\n        if root.left.val == None:\n            root.left.val = key\n        else:\n            root.left.val = insert(root.left, key)\n    return root', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 14}, {'action': 'move-right', 'root': 12, 'key': 14}, {'action': 'move-left', 'root': 15, 'key': 14}, {'action': 'move-right', 'root': 13, 'key': 14}, {'action': 'insert', 'root': -1, 'key': 14}], '1': [{'action': 'move-right', 'root': 5, 'key': 6}, {'action': 'move-left', 'root': 7, 'key': 6}, {'action': 'insert', 'root': -1, 'key': 6}], '2': [{'action': 'move-left', 'root': 8, 'key': 2}, {'action': 'move-left', 'root': 3, 'key': 2}, {'action': 'move-right', 'root': 1, 'key': 2}, {'action': 'insert', 'root': -1, 'key': 2}], '3': [{'action': 'move-left', 'root': 50, 'key': 43}, {'action': 'move-right', 'root': 17, 'key': 43}, {'action': 'move-right', 'root': 23, 'key': 43}, {'action': 'insert', 'root': -1, 'key': 43}], '4': [{'action': 'move-right', 'root': 5, 'key': 9}, {'action': 'move-right', 'root': 7, 'key': 9}, {'action': 'insert', 'root': -1, 'key': 9}], '5': [{'action': 'move-right', 'root': 8, 'key': 15}, {'action': 'move-right', 'root': 10, 'key': 15}, {'action': 'move-right', 'root': 12, 'key': 15}, {'action': 'move-right', 'root': 13, 'key': 15}, {'action': 'insert', 'root': -1, 'key': 15}], '6': [{'action': 'move-left', 'root': 50, 'key': 43}, {'action': 'move-right', 'root': 17, 'key': 43}, {'action': 'move-right', 'root': 23, 'key': 43}, {'action': 'insert', 'root': -1, 'key': 43}]}}}
2021-02-22 17:09:30.676816,insert,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root == None:\n        return False   \n    if root.val == None:\n        return False   \n    elif root.val == key:\n        return True\n    else:\n        if key < root.val:\n            return search(root.left, key)\n        else:\n            return search(root.right, key)\n    \n#    else:\n#        left = False\n#        if (root.left != None):\n#            left = search(root.left, key) \n#            \n#        right = False\n#        if (root.right != None):\n#            right = search(root.right, key)\n#       \n#        return (left or right)', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 11}, {'action': 'move-left', 'root': 12, 'key': 11}, {'action': 'move-right', 'root': 9, 'key': 11}, {'action': 'move-right', 'root': 10, 'key': 11}, {'action': 'return-false', 'root': -1, 'key': 11}], '1': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '2': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-false', 'root': -1, 'key': 30}], '3': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '4': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-true', 'root': -1, 'key': 30}]}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    if key > root.val:\n        if root.right.val == None:\n            root.right.val = key\n        else:\n            root.right.val = insert(root.right, key)\n    else:\n        if root.left.val == None:\n            root.left.val = key\n        else:\n            root.left.val = insert(root.left, key)\n    return root', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 14}, {'action': 'move-right', 'root': 12, 'key': 14}, {'action': 'move-left', 'root': 15, 'key': 14}, {'action': 'move-right', 'root': 13, 'key': 14}, {'action': 'insert', 'root': -1, 'key': 14}], '1': [{'action': 'move-right', 'root': 5, 'key': 6}, {'action': 'move-left', 'root': 7, 'key': 6}, {'action': 'insert', 'root': -1, 'key': 6}], '2': [{'action': 'move-left', 'root': 8, 'key': 2}, {'action': 'move-left', 'root': 3, 'key': 2}, {'action': 'move-right', 'root': 1, 'key': 2}, {'action': 'insert', 'root': -1, 'key': 2}], '3': [{'action': 'move-left', 'root': 50, 'key': 43}, {'action': 'move-right', 'root': 17, 'key': 43}, {'action': 'move-right', 'root': 23, 'key': 43}, {'action': 'insert', 'root': -1, 'key': 43}], '4': [{'action': 'move-right', 'root': 5, 'key': 9}, {'action': 'move-right', 'root': 7, 'key': 9}, {'action': 'insert', 'root': -1, 'key': 9}], '5': [{'action': 'move-right', 'root': 8, 'key': 15}, {'action': 'move-right', 'root': 10, 'key': 15}, {'action': 'move-right', 'root': 12, 'key': 15}, {'action': 'move-right', 'root': 13, 'key': 15}, {'action': 'insert', 'root': -1, 'key': 15}], '6': [{'action': 'move-left', 'root': 50, 'key': 43}, {'action': 'move-right', 'root': 17, 'key': 43}, {'action': 'move-right', 'root': 23, 'key': 43}, {'action': 'insert', 'root': -1, 'key': 43}]}}}
2021-02-22 17:09:30.979448,insert,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root == None:\n        return False   \n    if root.val == None:\n        return False   \n    elif root.val == key:\n        return True\n    else:\n        if key < root.val:\n            return search(root.left, key)\n        else:\n            return search(root.right, key)\n    \n#    else:\n#        left = False\n#        if (root.left != None):\n#            left = search(root.left, key) \n#            \n#        right = False\n#        if (root.right != None):\n#            right = search(root.right, key)\n#       \n#        return (left or right)', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 11}, {'action': 'move-left', 'root': 12, 'key': 11}, {'action': 'move-right', 'root': 9, 'key': 11}, {'action': 'move-right', 'root': 10, 'key': 11}, {'action': 'return-false', 'root': -1, 'key': 11}], '1': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '2': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-false', 'root': -1, 'key': 30}], '3': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '4': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-true', 'root': -1, 'key': 30}]}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    if key > root.val:\n        if root.right.val == None:\n            root.right.val = key\n        else:\n            root.right.val = insert(root.right, key)\n    else:\n        if root.left.val == None:\n            root.left.val = key\n        else:\n            root.left.val = insert(root.left, key)\n    return root', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 14}, {'action': 'move-right', 'root': 12, 'key': 14}, {'action': 'move-left', 'root': 15, 'key': 14}, {'action': 'move-right', 'root': 13, 'key': 14}, {'action': 'insert', 'root': -1, 'key': 14}], '1': [{'action': 'move-right', 'root': 5, 'key': 6}, {'action': 'move-left', 'root': 7, 'key': 6}, {'action': 'insert', 'root': -1, 'key': 6}], '2': [{'action': 'move-left', 'root': 8, 'key': 2}, {'action': 'move-left', 'root': 3, 'key': 2}, {'action': 'move-right', 'root': 1, 'key': 2}, {'action': 'insert', 'root': -1, 'key': 2}], '3': [{'action': 'move-left', 'root': 50, 'key': 43}, {'action': 'move-right', 'root': 17, 'key': 43}, {'action': 'move-right', 'root': 23, 'key': 43}, {'action': 'insert', 'root': -1, 'key': 43}], '4': [{'action': 'move-right', 'root': 5, 'key': 9}, {'action': 'move-right', 'root': 7, 'key': 9}, {'action': 'insert', 'root': -1, 'key': 9}], '5': [{'action': 'move-right', 'root': 8, 'key': 15}, {'action': 'move-right', 'root': 10, 'key': 15}, {'action': 'move-right', 'root': 12, 'key': 15}, {'action': 'move-right', 'root': 13, 'key': 15}, {'action': 'insert', 'root': -1, 'key': 15}], '6': [{'action': 'move-left', 'root': 50, 'key': 43}, {'action': 'move-right', 'root': 17, 'key': 43}, {'action': 'move-right', 'root': 23, 'key': 43}, {'action': 'insert', 'root': -1, 'key': 43}]}}}
2021-02-22 17:10:14.005790,page-change,1,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root == None:\n        return False   \n    if root.val == None:\n        return False   \n    elif root.val == key:\n        return True\n    else:\n        if key < root.val:\n            return search(root.left, key)\n        else:\n            return search(root.right, key)\n    \n#    else:\n#        left = False\n#        if (root.left != None):\n#            left = search(root.left, key) \n#            \n#        right = False\n#        if (root.right != None):\n#            right = search(root.right, key)\n#       \n#        return (left or right)', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 11}, {'action': 'move-left', 'root': 12, 'key': 11}, {'action': 'move-right', 'root': 9, 'key': 11}, {'action': 'move-right', 'root': 10, 'key': 11}, {'action': 'return-false', 'root': -1, 'key': 11}], '1': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '2': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-false', 'root': -1, 'key': 30}], '3': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '4': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-true', 'root': -1, 'key': 30}]}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    if key > root.val:\n        if root.right.val == None:\n            root.right.val = key\n        else:\n            root.right.val = insert(root.right, key)\n    else:\n        if root.left.val == None:\n            root.left.val = key\n        else:\n            root.left.val = insert(root.left, key)\n    return root', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 14}, {'action': 'move-right', 'root': 12, 'key': 14}, {'action': 'move-left', 'root': 15, 'key': 14}, {'action': 'move-right', 'root': 13, 'key': 14}, {'action': 'insert', 'root': -1, 'key': 14}], '1': [{'action': 'move-right', 'root': 5, 'key': 6}, {'action': 'move-left', 'root': 7, 'key': 6}, {'action': 'insert', 'root': -1, 'key': 6}], '2': [{'action': 'move-left', 'root': 8, 'key': 2}, {'action': 'move-left', 'root': 3, 'key': 2}, {'action': 'move-right', 'root': 1, 'key': 2}, {'action': 'insert', 'root': -1, 'key': 2}], '3': [{'action': 'move-left', 'root': 50, 'key': 43}, {'action': 'move-right', 'root': 17, 'key': 43}, {'action': 'move-right', 'root': 23, 'key': 43}, {'action': 'insert', 'root': -1, 'key': 43}], '4': [{'action': 'move-right', 'root': 5, 'key': 9}, {'action': 'move-right', 'root': 7, 'key': 9}, {'action': 'insert', 'root': -1, 'key': 9}], '5': [{'action': 'move-right', 'root': 8, 'key': 15}, {'action': 'move-right', 'root': 10, 'key': 15}, {'action': 'move-right', 'root': 12, 'key': 15}, {'action': 'move-right', 'root': 13, 'key': 15}, {'action': 'insert', 'root': -1, 'key': 15}], '6': [{'action': 'move-left', 'root': 50, 'key': 43}, {'action': 'move-right', 'root': 17, 'key': 43}, {'action': 'move-right', 'root': 23, 'key': 43}, {'action': 'insert', 'root': -1, 'key': 43}]}}}
2021-02-22 17:10:28.108497,page-change,2,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root == None:\n        return False   \n    if root.val == None:\n        return False   \n    elif root.val == key:\n        return True\n    else:\n        if key < root.val:\n            return search(root.left, key)\n        else:\n            return search(root.right, key)\n    \n#    else:\n#        left = False\n#        if (root.left != None):\n#            left = search(root.left, key) \n#            \n#        right = False\n#        if (root.right != None):\n#            right = search(root.right, key)\n#       \n#        return (left or right)', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 11}, {'action': 'move-left', 'root': 12, 'key': 11}, {'action': 'move-right', 'root': 9, 'key': 11}, {'action': 'move-right', 'root': 10, 'key': 11}, {'action': 'return-false', 'root': -1, 'key': 11}], '1': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '2': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-false', 'root': -1, 'key': 30}], '3': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '4': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-true', 'root': -1, 'key': 30}]}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    if key > root.val:\n        if root.right.val == None:\n            root.right.val = key\n        else:\n            root.right.val = insert(root.right, key)\n    else:\n        if root.left.val == None:\n            root.left.val = key\n        else:\n            root.left.val = insert(root.left, key)\n    return root', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 14}, {'action': 'move-right', 'root': 12, 'key': 14}, {'action': 'move-left', 'root': 15, 'key': 14}, {'action': 'move-right', 'root': 13, 'key': 14}, {'action': 'insert', 'root': -1, 'key': 14}], '1': [{'action': 'move-right', 'root': 5, 'key': 6}, {'action': 'move-left', 'root': 7, 'key': 6}, {'action': 'insert', 'root': -1, 'key': 6}], '2': [{'action': 'move-left', 'root': 8, 'key': 2}, {'action': 'move-left', 'root': 3, 'key': 2}, {'action': 'move-right', 'root': 1, 'key': 2}, {'action': 'insert', 'root': -1, 'key': 2}], '3': [{'action': 'move-left', 'root': 50, 'key': 43}, {'action': 'move-right', 'root': 17, 'key': 43}, {'action': 'move-right', 'root': 23, 'key': 43}, {'action': 'insert', 'root': -1, 'key': 43}], '4': [{'action': 'move-right', 'root': 5, 'key': 9}, {'action': 'move-right', 'root': 7, 'key': 9}, {'action': 'insert', 'root': -1, 'key': 9}], '5': [{'action': 'move-right', 'root': 8, 'key': 15}, {'action': 'move-right', 'root': 10, 'key': 15}, {'action': 'move-right', 'root': 12, 'key': 15}, {'action': 'move-right', 'root': 13, 'key': 15}, {'action': 'insert', 'root': -1, 'key': 15}], '6': [{'action': 'move-left', 'root': 50, 'key': 43}, {'action': 'move-right', 'root': 17, 'key': 43}, {'action': 'move-right', 'root': 23, 'key': 43}, {'action': 'insert', 'root': -1, 'key': 43}]}}}
2021-02-22 17:11:02.276359,insert,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root == None:\n        return False   \n    if root.val == None:\n        return False   \n    elif root.val == key:\n        return True\n    else:\n        if key < root.val:\n            return search(root.left, key)\n        else:\n            return search(root.right, key)\n    \n#    else:\n#        left = False\n#        if (root.left != None):\n#            left = search(root.left, key) \n#            \n#        right = False\n#        if (root.right != None):\n#            right = search(root.right, key)\n#       \n#        return (left or right)', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 11}, {'action': 'move-left', 'root': 12, 'key': 11}, {'action': 'move-right', 'root': 9, 'key': 11}, {'action': 'move-right', 'root': 10, 'key': 11}, {'action': 'return-false', 'root': -1, 'key': 11}], '1': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '2': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-false', 'root': -1, 'key': 30}], '3': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '4': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-true', 'root': -1, 'key': 30}]}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root == None or root.val == None:\n        return root\n    if key > root.val:\n        if root.right.val == None:\n            root.right.val = key\n        else:\n            root.right.val = insert(root.right, key)\n    else:\n        if root.left.val == None:\n            root.left.val = key\n        else:\n            root.left.val = insert(root.left, key)\n    return root', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 14}, {'action': 'move-right', 'root': 12, 'key': 14}, {'action': 'move-left', 'root': 15, 'key': 14}, {'action': 'move-right', 'root': 13, 'key': 14}, {'action': 'insert', 'root': -1, 'key': 14}], '1': [{'action': 'move-right', 'root': 5, 'key': 6}, {'action': 'move-left', 'root': 7, 'key': 6}, {'action': 'insert', 'root': -1, 'key': 6}], '2': [{'action': 'move-left', 'root': 8, 'key': 2}, {'action': 'move-left', 'root': 3, 'key': 2}, {'action': 'move-right', 'root': 1, 'key': 2}, {'action': 'insert', 'root': -1, 'key': 2}], '3': [{'action': 'move-left', 'root': 50, 'key': 43}, {'action': 'move-right', 'root': 17, 'key': 43}, {'action': 'move-right', 'root': 23, 'key': 43}, {'action': 'insert', 'root': -1, 'key': 43}], '4': [{'action': 'move-right', 'root': 5, 'key': 9}, {'action': 'move-right', 'root': 7, 'key': 9}, {'action': 'insert', 'root': -1, 'key': 9}], '5': [{'action': 'move-right', 'root': 8, 'key': 15}, {'action': 'move-right', 'root': 10, 'key': 15}, {'action': 'move-right', 'root': 12, 'key': 15}, {'action': 'move-right', 'root': 13, 'key': 15}, {'action': 'insert', 'root': -1, 'key': 15}], '6': [{'action': 'move-left', 'root': 50, 'key': 43}, {'action': 'move-right', 'root': 17, 'key': 43}, {'action': 'move-right', 'root': 23, 'key': 43}, {'action': 'insert', 'root': -1, 'key': 43}]}}}
2021-02-22 17:11:02.796472,insert,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root == None:\n        return False   \n    if root.val == None:\n        return False   \n    elif root.val == key:\n        return True\n    else:\n        if key < root.val:\n            return search(root.left, key)\n        else:\n            return search(root.right, key)\n    \n#    else:\n#        left = False\n#        if (root.left != None):\n#            left = search(root.left, key) \n#            \n#        right = False\n#        if (root.right != None):\n#            right = search(root.right, key)\n#       \n#        return (left or right)', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 11}, {'action': 'move-left', 'root': 12, 'key': 11}, {'action': 'move-right', 'root': 9, 'key': 11}, {'action': 'move-right', 'root': 10, 'key': 11}, {'action': 'return-false', 'root': -1, 'key': 11}], '1': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '2': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-false', 'root': -1, 'key': 30}], '3': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '4': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-true', 'root': -1, 'key': 30}]}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root == None or root.val == None:\n        return root\n    if key > root.val:\n        if root.right.val == None:\n            root.right.val = key\n        else:\n            root.right.val = insert(root.right, key)\n    else:\n        if root.left.val == None:\n            root.left.val = key\n        else:\n            root.left.val = insert(root.left, key)\n    return root', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 14}, {'action': 'move-right', 'root': 12, 'key': 14}, {'action': 'move-left', 'root': 15, 'key': 14}, {'action': 'move-right', 'root': 13, 'key': 14}, {'action': 'insert', 'root': -1, 'key': 14}], '1': [{'action': 'move-right', 'root': 5, 'key': 6}, {'action': 'move-left', 'root': 7, 'key': 6}, {'action': 'insert', 'root': -1, 'key': 6}], '2': [{'action': 'move-left', 'root': 8, 'key': 2}, {'action': 'move-left', 'root': 3, 'key': 2}, {'action': 'move-right', 'root': 1, 'key': 2}, {'action': 'insert', 'root': -1, 'key': 2}], '3': [{'action': 'move-left', 'root': 50, 'key': 43}, {'action': 'move-right', 'root': 17, 'key': 43}, {'action': 'move-right', 'root': 23, 'key': 43}, {'action': 'insert', 'root': -1, 'key': 43}], '4': [{'action': 'move-right', 'root': 5, 'key': 9}, {'action': 'move-right', 'root': 7, 'key': 9}, {'action': 'insert', 'root': -1, 'key': 9}], '5': [{'action': 'move-right', 'root': 8, 'key': 15}, {'action': 'move-right', 'root': 10, 'key': 15}, {'action': 'move-right', 'root': 12, 'key': 15}, {'action': 'move-right', 'root': 13, 'key': 15}, {'action': 'insert', 'root': -1, 'key': 15}], '6': [{'action': 'move-left', 'root': 50, 'key': 43}, {'action': 'move-right', 'root': 17, 'key': 43}, {'action': 'move-right', 'root': 23, 'key': 43}, {'action': 'insert', 'root': -1, 'key': 43}]}}}
2021-02-22 17:11:02.974600,insert,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root == None:\n        return False   \n    if root.val == None:\n        return False   \n    elif root.val == key:\n        return True\n    else:\n        if key < root.val:\n            return search(root.left, key)\n        else:\n            return search(root.right, key)\n    \n#    else:\n#        left = False\n#        if (root.left != None):\n#            left = search(root.left, key) \n#            \n#        right = False\n#        if (root.right != None):\n#            right = search(root.right, key)\n#       \n#        return (left or right)', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 11}, {'action': 'move-left', 'root': 12, 'key': 11}, {'action': 'move-right', 'root': 9, 'key': 11}, {'action': 'move-right', 'root': 10, 'key': 11}, {'action': 'return-false', 'root': -1, 'key': 11}], '1': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '2': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-false', 'root': -1, 'key': 30}], '3': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '4': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-true', 'root': -1, 'key': 30}]}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root == None or root.val == None:\n        return root\n    if key > root.val:\n        if root.right.val == None:\n            root.right.val = key\n        else:\n            root.right.val = insert(root.right, key)\n    else:\n        if root.left.val == None:\n            root.left.val = key\n        else:\n            root.left.val = insert(root.left, key)\n    return root', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 14}, {'action': 'move-right', 'root': 12, 'key': 14}, {'action': 'move-left', 'root': 15, 'key': 14}, {'action': 'move-right', 'root': 13, 'key': 14}, {'action': 'insert', 'root': -1, 'key': 14}], '1': [{'action': 'move-right', 'root': 5, 'key': 6}, {'action': 'move-left', 'root': 7, 'key': 6}, {'action': 'insert', 'root': -1, 'key': 6}], '2': [{'action': 'move-left', 'root': 8, 'key': 2}, {'action': 'move-left', 'root': 3, 'key': 2}, {'action': 'move-right', 'root': 1, 'key': 2}, {'action': 'insert', 'root': -1, 'key': 2}], '3': [{'action': 'move-left', 'root': 50, 'key': 43}, {'action': 'move-right', 'root': 17, 'key': 43}, {'action': 'move-right', 'root': 23, 'key': 43}, {'action': 'insert', 'root': -1, 'key': 43}], '4': [{'action': 'move-right', 'root': 5, 'key': 9}, {'action': 'move-right', 'root': 7, 'key': 9}, {'action': 'insert', 'root': -1, 'key': 9}], '5': [{'action': 'move-right', 'root': 8, 'key': 15}, {'action': 'move-right', 'root': 10, 'key': 15}, {'action': 'move-right', 'root': 12, 'key': 15}, {'action': 'move-right', 'root': 13, 'key': 15}, {'action': 'insert', 'root': -1, 'key': 15}], '6': [{'action': 'move-left', 'root': 50, 'key': 43}, {'action': 'move-right', 'root': 17, 'key': 43}, {'action': 'move-right', 'root': 23, 'key': 43}, {'action': 'insert', 'root': -1, 'key': 43}]}}}
2021-02-22 17:11:03.194898,insert,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root == None:\n        return False   \n    if root.val == None:\n        return False   \n    elif root.val == key:\n        return True\n    else:\n        if key < root.val:\n            return search(root.left, key)\n        else:\n            return search(root.right, key)\n    \n#    else:\n#        left = False\n#        if (root.left != None):\n#            left = search(root.left, key) \n#            \n#        right = False\n#        if (root.right != None):\n#            right = search(root.right, key)\n#       \n#        return (left or right)', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 11}, {'action': 'move-left', 'root': 12, 'key': 11}, {'action': 'move-right', 'root': 9, 'key': 11}, {'action': 'move-right', 'root': 10, 'key': 11}, {'action': 'return-false', 'root': -1, 'key': 11}], '1': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '2': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-false', 'root': -1, 'key': 30}], '3': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '4': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-true', 'root': -1, 'key': 30}]}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root == None or root.val == None:\n        return root\n    if key > root.val:\n        if root.right.val == None:\n            root.right.val = key\n        else:\n            root.right.val = insert(root.right, key)\n    else:\n        if root.left.val == None:\n            root.left.val = key\n        else:\n            root.left.val = insert(root.left, key)\n    return root', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 14}, {'action': 'move-right', 'root': 12, 'key': 14}, {'action': 'move-left', 'root': 15, 'key': 14}, {'action': 'move-right', 'root': 13, 'key': 14}, {'action': 'insert', 'root': -1, 'key': 14}], '1': [{'action': 'move-right', 'root': 5, 'key': 6}, {'action': 'move-left', 'root': 7, 'key': 6}, {'action': 'insert', 'root': -1, 'key': 6}], '2': [{'action': 'move-left', 'root': 8, 'key': 2}, {'action': 'move-left', 'root': 3, 'key': 2}, {'action': 'move-right', 'root': 1, 'key': 2}, {'action': 'insert', 'root': -1, 'key': 2}], '3': [{'action': 'move-left', 'root': 50, 'key': 43}, {'action': 'move-right', 'root': 17, 'key': 43}, {'action': 'move-right', 'root': 23, 'key': 43}, {'action': 'insert', 'root': -1, 'key': 43}], '4': [{'action': 'move-right', 'root': 5, 'key': 9}, {'action': 'move-right', 'root': 7, 'key': 9}, {'action': 'insert', 'root': -1, 'key': 9}], '5': [{'action': 'move-right', 'root': 8, 'key': 15}, {'action': 'move-right', 'root': 10, 'key': 15}, {'action': 'move-right', 'root': 12, 'key': 15}, {'action': 'move-right', 'root': 13, 'key': 15}, {'action': 'insert', 'root': -1, 'key': 15}], '6': [{'action': 'move-left', 'root': 50, 'key': 43}, {'action': 'move-right', 'root': 17, 'key': 43}, {'action': 'move-right', 'root': 23, 'key': 43}, {'action': 'insert', 'root': -1, 'key': 43}]}}}
2021-02-22 17:11:03.311839,insert,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root == None:\n        return False   \n    if root.val == None:\n        return False   \n    elif root.val == key:\n        return True\n    else:\n        if key < root.val:\n            return search(root.left, key)\n        else:\n            return search(root.right, key)\n    \n#    else:\n#        left = False\n#        if (root.left != None):\n#            left = search(root.left, key) \n#            \n#        right = False\n#        if (root.right != None):\n#            right = search(root.right, key)\n#       \n#        return (left or right)', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 11}, {'action': 'move-left', 'root': 12, 'key': 11}, {'action': 'move-right', 'root': 9, 'key': 11}, {'action': 'move-right', 'root': 10, 'key': 11}, {'action': 'return-false', 'root': -1, 'key': 11}], '1': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '2': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-false', 'root': -1, 'key': 30}], '3': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '4': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-true', 'root': -1, 'key': 30}]}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root == None or root.val == None:\n        return root\n    if key > root.val:\n        if root.right.val == None:\n            root.right.val = key\n        else:\n            root.right.val = insert(root.right, key)\n    else:\n        if root.left.val == None:\n            root.left.val = key\n        else:\n            root.left.val = insert(root.left, key)\n    return root', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 14}, {'action': 'move-right', 'root': 12, 'key': 14}, {'action': 'move-left', 'root': 15, 'key': 14}, {'action': 'move-right', 'root': 13, 'key': 14}, {'action': 'insert', 'root': -1, 'key': 14}], '1': [{'action': 'move-right', 'root': 5, 'key': 6}, {'action': 'move-left', 'root': 7, 'key': 6}, {'action': 'insert', 'root': -1, 'key': 6}], '2': [{'action': 'move-left', 'root': 8, 'key': 2}, {'action': 'move-left', 'root': 3, 'key': 2}, {'action': 'move-right', 'root': 1, 'key': 2}, {'action': 'insert', 'root': -1, 'key': 2}], '3': [{'action': 'move-left', 'root': 50, 'key': 43}, {'action': 'move-right', 'root': 17, 'key': 43}, {'action': 'move-right', 'root': 23, 'key': 43}, {'action': 'insert', 'root': -1, 'key': 43}], '4': [{'action': 'move-right', 'root': 5, 'key': 9}, {'action': 'move-right', 'root': 7, 'key': 9}, {'action': 'insert', 'root': -1, 'key': 9}], '5': [{'action': 'move-right', 'root': 8, 'key': 15}, {'action': 'move-right', 'root': 10, 'key': 15}, {'action': 'move-right', 'root': 12, 'key': 15}, {'action': 'move-right', 'root': 13, 'key': 15}, {'action': 'insert', 'root': -1, 'key': 15}], '6': [{'action': 'move-left', 'root': 50, 'key': 43}, {'action': 'move-right', 'root': 17, 'key': 43}, {'action': 'move-right', 'root': 23, 'key': 43}, {'action': 'insert', 'root': -1, 'key': 43}]}}}
2021-02-22 17:11:15.209513,insert,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root == None:\n        return False   \n    if root.val == None:\n        return False   \n    elif root.val == key:\n        return True\n    else:\n        if key < root.val:\n            return search(root.left, key)\n        else:\n            return search(root.right, key)\n    \n#    else:\n#        left = False\n#        if (root.left != None):\n#            left = search(root.left, key) \n#            \n#        right = False\n#        if (root.right != None):\n#            right = search(root.right, key)\n#       \n#        return (left or right)', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 11}, {'action': 'move-left', 'root': 12, 'key': 11}, {'action': 'move-right', 'root': 9, 'key': 11}, {'action': 'move-right', 'root': 10, 'key': 11}, {'action': 'return-false', 'root': -1, 'key': 11}], '1': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '2': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-false', 'root': -1, 'key': 30}], '3': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '4': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-true', 'root': -1, 'key': 30}]}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root == None or root.val == None:\n        return root\n    \n    if key > root.val:\n        if root.right.val == None:\n            root.right.val = key\n        else:\n            root.right.val = insert(root.right, key)\n    else:\n        if root.left.val == None:\n            root.left.val = key\n        else:\n            root.left.val = insert(root.left, key)\n    return root', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 14}, {'action': 'move-right', 'root': 12, 'key': 14}, {'action': 'move-left', 'root': 15, 'key': 14}, {'action': 'move-right', 'root': 13, 'key': 14}, {'action': 'insert', 'root': -1, 'key': 14}], '1': [{'action': 'move-right', 'root': 5, 'key': 6}, {'action': 'move-left', 'root': 7, 'key': 6}, {'action': 'insert', 'root': -1, 'key': 6}], '2': [{'action': 'move-left', 'root': 8, 'key': 2}, {'action': 'move-left', 'root': 3, 'key': 2}, {'action': 'move-right', 'root': 1, 'key': 2}, {'action': 'insert', 'root': -1, 'key': 2}], '3': [{'action': 'move-left', 'root': 50, 'key': 43}, {'action': 'move-right', 'root': 17, 'key': 43}, {'action': 'move-right', 'root': 23, 'key': 43}, {'action': 'insert', 'root': -1, 'key': 43}], '4': [{'action': 'move-right', 'root': 5, 'key': 9}, {'action': 'move-right', 'root': 7, 'key': 9}, {'action': 'insert', 'root': -1, 'key': 9}], '5': [{'action': 'move-right', 'root': 8, 'key': 15}, {'action': 'move-right', 'root': 10, 'key': 15}, {'action': 'move-right', 'root': 12, 'key': 15}, {'action': 'move-right', 'root': 13, 'key': 15}, {'action': 'insert', 'root': -1, 'key': 15}], '6': [{'action': 'move-left', 'root': 50, 'key': 43}, {'action': 'move-right', 'root': 17, 'key': 43}, {'action': 'move-right', 'root': 23, 'key': 43}, {'action': 'insert', 'root': -1, 'key': 43}]}}}
2021-02-22 17:11:15.851132,insert,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root == None:\n        return False   \n    if root.val == None:\n        return False   \n    elif root.val == key:\n        return True\n    else:\n        if key < root.val:\n            return search(root.left, key)\n        else:\n            return search(root.right, key)\n    \n#    else:\n#        left = False\n#        if (root.left != None):\n#            left = search(root.left, key) \n#            \n#        right = False\n#        if (root.right != None):\n#            right = search(root.right, key)\n#       \n#        return (left or right)', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 11}, {'action': 'move-left', 'root': 12, 'key': 11}, {'action': 'move-right', 'root': 9, 'key': 11}, {'action': 'move-right', 'root': 10, 'key': 11}, {'action': 'return-false', 'root': -1, 'key': 11}], '1': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '2': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-false', 'root': -1, 'key': 30}], '3': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '4': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-true', 'root': -1, 'key': 30}]}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root == None or root.val == None:\n        return root\n    \n    if key > root.val:\n        if root.right.val == None:\n            root.right.val = key\n        else:\n            root.right.val = insert(root.right, key)\n    else:\n        if root.left.val == None:\n            root.left.val = key\n        else:\n            root.left.val = insert(root.left, key)\n    return root', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 14}, {'action': 'move-right', 'root': 12, 'key': 14}, {'action': 'move-left', 'root': 15, 'key': 14}, {'action': 'move-right', 'root': 13, 'key': 14}, {'action': 'insert', 'root': -1, 'key': 14}], '1': [{'action': 'move-right', 'root': 5, 'key': 6}, {'action': 'move-left', 'root': 7, 'key': 6}, {'action': 'insert', 'root': -1, 'key': 6}], '2': [{'action': 'move-left', 'root': 8, 'key': 2}, {'action': 'move-left', 'root': 3, 'key': 2}, {'action': 'move-right', 'root': 1, 'key': 2}, {'action': 'insert', 'root': -1, 'key': 2}], '3': [{'action': 'move-left', 'root': 50, 'key': 43}, {'action': 'move-right', 'root': 17, 'key': 43}, {'action': 'move-right', 'root': 23, 'key': 43}, {'action': 'insert', 'root': -1, 'key': 43}], '4': [{'action': 'move-right', 'root': 5, 'key': 9}, {'action': 'move-right', 'root': 7, 'key': 9}, {'action': 'insert', 'root': -1, 'key': 9}], '5': [{'action': 'move-right', 'root': 8, 'key': 15}, {'action': 'move-right', 'root': 10, 'key': 15}, {'action': 'move-right', 'root': 12, 'key': 15}, {'action': 'move-right', 'root': 13, 'key': 15}, {'action': 'insert', 'root': -1, 'key': 15}], '6': [{'action': 'move-left', 'root': 50, 'key': 43}, {'action': 'move-right', 'root': 17, 'key': 43}, {'action': 'move-right', 'root': 23, 'key': 43}, {'action': 'insert', 'root': -1, 'key': 43}]}}}
2021-02-22 17:11:16.019395,insert,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root == None:\n        return False   \n    if root.val == None:\n        return False   \n    elif root.val == key:\n        return True\n    else:\n        if key < root.val:\n            return search(root.left, key)\n        else:\n            return search(root.right, key)\n    \n#    else:\n#        left = False\n#        if (root.left != None):\n#            left = search(root.left, key) \n#            \n#        right = False\n#        if (root.right != None):\n#            right = search(root.right, key)\n#       \n#        return (left or right)', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 11}, {'action': 'move-left', 'root': 12, 'key': 11}, {'action': 'move-right', 'root': 9, 'key': 11}, {'action': 'move-right', 'root': 10, 'key': 11}, {'action': 'return-false', 'root': -1, 'key': 11}], '1': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '2': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-false', 'root': -1, 'key': 30}], '3': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '4': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-true', 'root': -1, 'key': 30}]}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root == None or root.val == None:\n        return root\n    \n    if key > root.val:\n        if root.right.val == None:\n            root.right.val = key\n        else:\n            root.right.val = insert(root.right, key)\n    else:\n        if root.left.val == None:\n            root.left.val = key\n        else:\n            root.left.val = insert(root.left, key)\n    return root', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 14}, {'action': 'move-right', 'root': 12, 'key': 14}, {'action': 'move-left', 'root': 15, 'key': 14}, {'action': 'move-right', 'root': 13, 'key': 14}, {'action': 'insert', 'root': -1, 'key': 14}], '1': [{'action': 'move-right', 'root': 5, 'key': 6}, {'action': 'move-left', 'root': 7, 'key': 6}, {'action': 'insert', 'root': -1, 'key': 6}], '2': [{'action': 'move-left', 'root': 8, 'key': 2}, {'action': 'move-left', 'root': 3, 'key': 2}, {'action': 'move-right', 'root': 1, 'key': 2}, {'action': 'insert', 'root': -1, 'key': 2}], '3': [{'action': 'move-left', 'root': 50, 'key': 43}, {'action': 'move-right', 'root': 17, 'key': 43}, {'action': 'move-right', 'root': 23, 'key': 43}, {'action': 'insert', 'root': -1, 'key': 43}], '4': [{'action': 'move-right', 'root': 5, 'key': 9}, {'action': 'move-right', 'root': 7, 'key': 9}, {'action': 'insert', 'root': -1, 'key': 9}], '5': [{'action': 'move-right', 'root': 8, 'key': 15}, {'action': 'move-right', 'root': 10, 'key': 15}, {'action': 'move-right', 'root': 12, 'key': 15}, {'action': 'move-right', 'root': 13, 'key': 15}, {'action': 'insert', 'root': -1, 'key': 15}], '6': [{'action': 'move-left', 'root': 50, 'key': 43}, {'action': 'move-right', 'root': 17, 'key': 43}, {'action': 'move-right', 'root': 23, 'key': 43}, {'action': 'insert', 'root': -1, 'key': 43}]}}}
2021-02-22 17:12:12.897377,insert,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root == None:\n        return False   \n    if root.val == None:\n        return False   \n    elif root.val == key:\n        return True\n    else:\n        if key < root.val:\n            return search(root.left, key)\n        else:\n            return search(root.right, key)\n    \n#    else:\n#        left = False\n#        if (root.left != None):\n#            left = search(root.left, key) \n#            \n#        right = False\n#        if (root.right != None):\n#            right = search(root.right, key)\n#       \n#        return (left or right)', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 11}, {'action': 'move-left', 'root': 12, 'key': 11}, {'action': 'move-right', 'root': 9, 'key': 11}, {'action': 'move-right', 'root': 10, 'key': 11}, {'action': 'return-false', 'root': -1, 'key': 11}], '1': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '2': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-false', 'root': -1, 'key': 30}], '3': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '4': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-true', 'root': -1, 'key': 30}]}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    print("1")\n    if root == None or root.val == None:\n        return root\n    \n    if key > root.val:\n        print("2")\n        if root.right.val == None:\n            root.right.val = key\n        else:\n            root.right.val = insert(root.right, key)\n    else:\n        print("3")\n        if root.left.val == None:\n            root.left.val = key\n        else:\n            root.left.val = insert(root.left, key)\n    return root', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 14}, {'action': 'move-right', 'root': 12, 'key': 14}, {'action': 'move-left', 'root': 15, 'key': 14}, {'action': 'move-right', 'root': 13, 'key': 14}, {'action': 'insert', 'root': -1, 'key': 14}], '1': [{'action': 'move-right', 'root': 5, 'key': 6}, {'action': 'move-left', 'root': 7, 'key': 6}, {'action': 'insert', 'root': -1, 'key': 6}], '2': [{'action': 'move-left', 'root': 8, 'key': 2}, {'action': 'move-left', 'root': 3, 'key': 2}, {'action': 'move-right', 'root': 1, 'key': 2}, {'action': 'insert', 'root': -1, 'key': 2}], '3': [{'action': 'move-left', 'root': 50, 'key': 43}, {'action': 'move-right', 'root': 17, 'key': 43}, {'action': 'move-right', 'root': 23, 'key': 43}, {'action': 'insert', 'root': -1, 'key': 43}], '4': [{'action': 'move-right', 'root': 5, 'key': 9}, {'action': 'move-right', 'root': 7, 'key': 9}, {'action': 'insert', 'root': -1, 'key': 9}], '5': [{'action': 'move-right', 'root': 8, 'key': 15}, {'action': 'move-right', 'root': 10, 'key': 15}, {'action': 'move-right', 'root': 12, 'key': 15}, {'action': 'move-right', 'root': 13, 'key': 15}, {'action': 'insert', 'root': -1, 'key': 15}], '6': [{'action': 'move-left', 'root': 50, 'key': 43}, {'action': 'move-right', 'root': 17, 'key': 43}, {'action': 'move-right', 'root': 23, 'key': 43}, {'action': 'insert', 'root': -1, 'key': 43}]}}}
2021-02-22 17:12:56.671668,insert,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root == None:\n        return False   \n    if root.val == None:\n        return False   \n    elif root.val == key:\n        return True\n    else:\n        if key < root.val:\n            return search(root.left, key)\n        else:\n            return search(root.right, key)\n    \n#    else:\n#        left = False\n#        if (root.left != None):\n#            left = search(root.left, key) \n#            \n#        right = False\n#        if (root.right != None):\n#            right = search(root.right, key)\n#       \n#        return (left or right)', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 11}, {'action': 'move-left', 'root': 12, 'key': 11}, {'action': 'move-right', 'root': 9, 'key': 11}, {'action': 'move-right', 'root': 10, 'key': 11}, {'action': 'return-false', 'root': -1, 'key': 11}], '1': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '2': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-false', 'root': -1, 'key': 30}], '3': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '4': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-true', 'root': -1, 'key': 30}]}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    print("1")\n    if root == None or root.val == None:\n        return root\n    \n    if key < root.val:\n        print("2")\n        if root.right.val == None:\n            root.right.val = key\n        else:\n            root.right.val = insert(root.right, key)\n    else:\n        print("3")\n        if root.left.val == None:\n            root.left.val = key\n        else:\n            root.left.val = insert(root.left, key)\n    return root', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 14}, {'action': 'move-right', 'root': 12, 'key': 14}, {'action': 'move-left', 'root': 15, 'key': 14}, {'action': 'move-right', 'root': 13, 'key': 14}, {'action': 'insert', 'root': -1, 'key': 14}], '1': [{'action': 'move-right', 'root': 5, 'key': 6}, {'action': 'move-left', 'root': 7, 'key': 6}, {'action': 'insert', 'root': -1, 'key': 6}], '2': [{'action': 'move-left', 'root': 8, 'key': 2}, {'action': 'move-left', 'root': 3, 'key': 2}, {'action': 'move-right', 'root': 1, 'key': 2}, {'action': 'insert', 'root': -1, 'key': 2}], '3': [{'action': 'move-left', 'root': 50, 'key': 43}, {'action': 'move-right', 'root': 17, 'key': 43}, {'action': 'move-right', 'root': 23, 'key': 43}, {'action': 'insert', 'root': -1, 'key': 43}], '4': [{'action': 'move-right', 'root': 5, 'key': 9}, {'action': 'move-right', 'root': 7, 'key': 9}, {'action': 'insert', 'root': -1, 'key': 9}], '5': [{'action': 'move-right', 'root': 8, 'key': 15}, {'action': 'move-right', 'root': 10, 'key': 15}, {'action': 'move-right', 'root': 12, 'key': 15}, {'action': 'move-right', 'root': 13, 'key': 15}, {'action': 'insert', 'root': -1, 'key': 15}], '6': [{'action': 'move-left', 'root': 50, 'key': 43}, {'action': 'move-right', 'root': 17, 'key': 43}, {'action': 'move-right', 'root': 23, 'key': 43}, {'action': 'insert', 'root': -1, 'key': 43}]}}}
2021-02-22 17:13:12.935223,insert,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root == None:\n        return False   \n    if root.val == None:\n        return False   \n    elif root.val == key:\n        return True\n    else:\n        if key < root.val:\n            return search(root.left, key)\n        else:\n            return search(root.right, key)\n    \n#    else:\n#        left = False\n#        if (root.left != None):\n#            left = search(root.left, key) \n#            \n#        right = False\n#        if (root.right != None):\n#            right = search(root.right, key)\n#       \n#        return (left or right)', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 11}, {'action': 'move-left', 'root': 12, 'key': 11}, {'action': 'move-right', 'root': 9, 'key': 11}, {'action': 'move-right', 'root': 10, 'key': 11}, {'action': 'return-false', 'root': -1, 'key': 11}], '1': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '2': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-false', 'root': -1, 'key': 30}], '3': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '4': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-true', 'root': -1, 'key': 30}]}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    print("1")\n    if root == None or root.val == None:\n        return root\n    \n    if key < root.val:\n        print("Root:" + root.val)\n        if root.right.val == None:\n            root.right.val = key\n        else:\n            root.right.val = insert(root.right, key)\n    else:\n        print("Left")\n        if root.left.val == None:\n            root.left.val = key\n        else:\n            root.left.val = insert(root.left, key)\n    return root', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 14}, {'action': 'move-right', 'root': 12, 'key': 14}, {'action': 'move-left', 'root': 15, 'key': 14}, {'action': 'move-right', 'root': 13, 'key': 14}, {'action': 'insert', 'root': -1, 'key': 14}], '1': [{'action': 'move-right', 'root': 5, 'key': 6}, {'action': 'move-left', 'root': 7, 'key': 6}, {'action': 'insert', 'root': -1, 'key': 6}], '2': [{'action': 'move-left', 'root': 8, 'key': 2}, {'action': 'move-left', 'root': 3, 'key': 2}, {'action': 'move-right', 'root': 1, 'key': 2}, {'action': 'insert', 'root': -1, 'key': 2}], '3': [{'action': 'move-left', 'root': 50, 'key': 43}, {'action': 'move-right', 'root': 17, 'key': 43}, {'action': 'move-right', 'root': 23, 'key': 43}, {'action': 'insert', 'root': -1, 'key': 43}], '4': [{'action': 'move-right', 'root': 5, 'key': 9}, {'action': 'move-right', 'root': 7, 'key': 9}, {'action': 'insert', 'root': -1, 'key': 9}], '5': [{'action': 'move-right', 'root': 8, 'key': 15}, {'action': 'move-right', 'root': 10, 'key': 15}, {'action': 'move-right', 'root': 12, 'key': 15}, {'action': 'move-right', 'root': 13, 'key': 15}, {'action': 'insert', 'root': -1, 'key': 15}], '6': [{'action': 'move-left', 'root': 50, 'key': 43}, {'action': 'move-right', 'root': 17, 'key': 43}, {'action': 'move-right', 'root': 23, 'key': 43}, {'action': 'insert', 'root': -1, 'key': 43}]}}}
2021-02-22 17:13:14.121467,insert,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root == None:\n        return False   \n    if root.val == None:\n        return False   \n    elif root.val == key:\n        return True\n    else:\n        if key < root.val:\n            return search(root.left, key)\n        else:\n            return search(root.right, key)\n    \n#    else:\n#        left = False\n#        if (root.left != None):\n#            left = search(root.left, key) \n#            \n#        right = False\n#        if (root.right != None):\n#            right = search(root.right, key)\n#       \n#        return (left or right)', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 11}, {'action': 'move-left', 'root': 12, 'key': 11}, {'action': 'move-right', 'root': 9, 'key': 11}, {'action': 'move-right', 'root': 10, 'key': 11}, {'action': 'return-false', 'root': -1, 'key': 11}], '1': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '2': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-false', 'root': -1, 'key': 30}], '3': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '4': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-true', 'root': -1, 'key': 30}]}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    print("1")\n    if root == None or root.val == None:\n        return root\n    \n    if key < root.val:\n        print("Root:" + root.val)\n        if root.right.val == None:\n            root.right.val = key\n        else:\n            root.right.val = insert(root.right, key)\n    else:\n        print("Left")\n        if root.left.val == None:\n            root.left.val = key\n        else:\n            root.left.val = insert(root.left, key)\n    return root', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 14}, {'action': 'move-right', 'root': 12, 'key': 14}, {'action': 'move-left', 'root': 15, 'key': 14}, {'action': 'move-right', 'root': 13, 'key': 14}, {'action': 'insert', 'root': -1, 'key': 14}], '1': [{'action': 'move-right', 'root': 5, 'key': 6}, {'action': 'move-left', 'root': 7, 'key': 6}, {'action': 'insert', 'root': -1, 'key': 6}], '2': [{'action': 'move-left', 'root': 8, 'key': 2}, {'action': 'move-left', 'root': 3, 'key': 2}, {'action': 'move-right', 'root': 1, 'key': 2}, {'action': 'insert', 'root': -1, 'key': 2}], '3': [{'action': 'move-left', 'root': 50, 'key': 43}, {'action': 'move-right', 'root': 17, 'key': 43}, {'action': 'move-right', 'root': 23, 'key': 43}, {'action': 'insert', 'root': -1, 'key': 43}], '4': [{'action': 'move-right', 'root': 5, 'key': 9}, {'action': 'move-right', 'root': 7, 'key': 9}, {'action': 'insert', 'root': -1, 'key': 9}], '5': [{'action': 'move-right', 'root': 8, 'key': 15}, {'action': 'move-right', 'root': 10, 'key': 15}, {'action': 'move-right', 'root': 12, 'key': 15}, {'action': 'move-right', 'root': 13, 'key': 15}, {'action': 'insert', 'root': -1, 'key': 15}], '6': [{'action': 'move-left', 'root': 50, 'key': 43}, {'action': 'move-right', 'root': 17, 'key': 43}, {'action': 'move-right', 'root': 23, 'key': 43}, {'action': 'insert', 'root': -1, 'key': 43}]}}}
2021-02-22 17:13:24.429217,insert,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root == None:\n        return False   \n    if root.val == None:\n        return False   \n    elif root.val == key:\n        return True\n    else:\n        if key < root.val:\n            return search(root.left, key)\n        else:\n            return search(root.right, key)\n    \n#    else:\n#        left = False\n#        if (root.left != None):\n#            left = search(root.left, key) \n#            \n#        right = False\n#        if (root.right != None):\n#            right = search(root.right, key)\n#       \n#        return (left or right)', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 11}, {'action': 'move-left', 'root': 12, 'key': 11}, {'action': 'move-right', 'root': 9, 'key': 11}, {'action': 'move-right', 'root': 10, 'key': 11}, {'action': 'return-false', 'root': -1, 'key': 11}], '1': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '2': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-false', 'root': -1, 'key': 30}], '3': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '4': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-true', 'root': -1, 'key': 30}]}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    print("Root:" + root.val)\n    if root == None or root.val == None:\n        return root\n    \n    if key < root.val:\n        print("Root:" + root.val)\n        if root.right.val == None:\n            root.right.val = key\n        else:\n            root.right.val = insert(root.right, key)\n    else:\n        print("Left")\n        if root.left.val == None:\n            root.left.val = key\n        else:\n            root.left.val = insert(root.left, key)\n    return root', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 14}, {'action': 'move-right', 'root': 12, 'key': 14}, {'action': 'move-left', 'root': 15, 'key': 14}, {'action': 'move-right', 'root': 13, 'key': 14}, {'action': 'insert', 'root': -1, 'key': 14}], '1': [{'action': 'move-right', 'root': 5, 'key': 6}, {'action': 'move-left', 'root': 7, 'key': 6}, {'action': 'insert', 'root': -1, 'key': 6}], '2': [{'action': 'move-left', 'root': 8, 'key': 2}, {'action': 'move-left', 'root': 3, 'key': 2}, {'action': 'move-right', 'root': 1, 'key': 2}, {'action': 'insert', 'root': -1, 'key': 2}], '3': [{'action': 'move-left', 'root': 50, 'key': 43}, {'action': 'move-right', 'root': 17, 'key': 43}, {'action': 'move-right', 'root': 23, 'key': 43}, {'action': 'insert', 'root': -1, 'key': 43}], '4': [{'action': 'move-right', 'root': 5, 'key': 9}, {'action': 'move-right', 'root': 7, 'key': 9}, {'action': 'insert', 'root': -1, 'key': 9}], '5': [{'action': 'move-right', 'root': 8, 'key': 15}, {'action': 'move-right', 'root': 10, 'key': 15}, {'action': 'move-right', 'root': 12, 'key': 15}, {'action': 'move-right', 'root': 13, 'key': 15}, {'action': 'insert', 'root': -1, 'key': 15}], '6': [{'action': 'move-left', 'root': 50, 'key': 43}, {'action': 'move-right', 'root': 17, 'key': 43}, {'action': 'move-right', 'root': 23, 'key': 43}, {'action': 'insert', 'root': -1, 'key': 43}]}}}
2021-02-22 17:13:50.417028,insert,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root == None:\n        return False   \n    if root.val == None:\n        return False   \n    elif root.val == key:\n        return True\n    else:\n        if key < root.val:\n            return search(root.left, key)\n        else:\n            return search(root.right, key)\n    \n#    else:\n#        left = False\n#        if (root.left != None):\n#            left = search(root.left, key) \n#            \n#        right = False\n#        if (root.right != None):\n#            right = search(root.right, key)\n#       \n#        return (left or right)', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 11}, {'action': 'move-left', 'root': 12, 'key': 11}, {'action': 'move-right', 'root': 9, 'key': 11}, {'action': 'move-right', 'root': 10, 'key': 11}, {'action': 'return-false', 'root': -1, 'key': 11}], '1': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '2': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-false', 'root': -1, 'key': 30}], '3': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '4': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-true', 'root': -1, 'key': 30}]}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    print("Root:" + str(root.val))\n    if root == None or root.val == None:\n        return root\n    \n    if key < root.val:\n        print("Left")\n        if root.right.val == None:\n            root.right.val = key\n        else:\n            root.right.val = insert(root.right, key)\n    else:\n        print("Right")\n        if root.left.val == None:\n            root.left.val = key\n        else:\n            root.left.val = insert(root.left, key)\n    return root', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 14}, {'action': 'move-right', 'root': 12, 'key': 14}, {'action': 'move-left', 'root': 15, 'key': 14}, {'action': 'move-right', 'root': 13, 'key': 14}, {'action': 'insert', 'root': -1, 'key': 14}], '1': [{'action': 'move-right', 'root': 5, 'key': 6}, {'action': 'move-left', 'root': 7, 'key': 6}, {'action': 'insert', 'root': -1, 'key': 6}], '2': [{'action': 'move-left', 'root': 8, 'key': 2}, {'action': 'move-left', 'root': 3, 'key': 2}, {'action': 'move-right', 'root': 1, 'key': 2}, {'action': 'insert', 'root': -1, 'key': 2}], '3': [{'action': 'move-left', 'root': 50, 'key': 43}, {'action': 'move-right', 'root': 17, 'key': 43}, {'action': 'move-right', 'root': 23, 'key': 43}, {'action': 'insert', 'root': -1, 'key': 43}], '4': [{'action': 'move-right', 'root': 5, 'key': 9}, {'action': 'move-right', 'root': 7, 'key': 9}, {'action': 'insert', 'root': -1, 'key': 9}], '5': [{'action': 'move-right', 'root': 8, 'key': 15}, {'action': 'move-right', 'root': 10, 'key': 15}, {'action': 'move-right', 'root': 12, 'key': 15}, {'action': 'move-right', 'root': 13, 'key': 15}, {'action': 'insert', 'root': -1, 'key': 15}], '6': [{'action': 'move-left', 'root': 50, 'key': 43}, {'action': 'move-right', 'root': 17, 'key': 43}, {'action': 'move-right', 'root': 23, 'key': 43}, {'action': 'insert', 'root': -1, 'key': 43}]}}}
2021-02-22 17:14:08.629292,insert,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root == None:\n        return False   \n    if root.val == None:\n        return False   \n    elif root.val == key:\n        return True\n    else:\n        if key < root.val:\n            return search(root.left, key)\n        else:\n            return search(root.right, key)\n    \n#    else:\n#        left = False\n#        if (root.left != None):\n#            left = search(root.left, key) \n#            \n#        right = False\n#        if (root.right != None):\n#            right = search(root.right, key)\n#       \n#        return (left or right)', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 11}, {'action': 'move-left', 'root': 12, 'key': 11}, {'action': 'move-right', 'root': 9, 'key': 11}, {'action': 'move-right', 'root': 10, 'key': 11}, {'action': 'return-false', 'root': -1, 'key': 11}], '1': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '2': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-false', 'root': -1, 'key': 30}], '3': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '4': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-true', 'root': -1, 'key': 30}]}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    print("Root:" + str(root.val))\n    if root == None or root.val == None:\n        return root\n    \n    if key > root.val:\n        print("Right")\n        if root.right.val == None:\n            root.right.val = key\n        else:\n            root.right.val = insert(root.right, key)\n    else:\n        print("Left")\n        if root.left.val == None:\n            root.left.val = key\n        else:\n            root.left.val = insert(root.left, key)\n    return root', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 14}, {'action': 'move-right', 'root': 12, 'key': 14}, {'action': 'move-left', 'root': 15, 'key': 14}, {'action': 'move-right', 'root': 13, 'key': 14}, {'action': 'insert', 'root': -1, 'key': 14}], '1': [{'action': 'move-right', 'root': 5, 'key': 6}, {'action': 'move-left', 'root': 7, 'key': 6}, {'action': 'insert', 'root': -1, 'key': 6}], '2': [{'action': 'move-left', 'root': 8, 'key': 2}, {'action': 'move-left', 'root': 3, 'key': 2}, {'action': 'move-right', 'root': 1, 'key': 2}, {'action': 'insert', 'root': -1, 'key': 2}], '3': [{'action': 'move-left', 'root': 50, 'key': 43}, {'action': 'move-right', 'root': 17, 'key': 43}, {'action': 'move-right', 'root': 23, 'key': 43}, {'action': 'insert', 'root': -1, 'key': 43}], '4': [{'action': 'move-right', 'root': 5, 'key': 9}, {'action': 'move-right', 'root': 7, 'key': 9}, {'action': 'insert', 'root': -1, 'key': 9}], '5': [{'action': 'move-right', 'root': 8, 'key': 15}, {'action': 'move-right', 'root': 10, 'key': 15}, {'action': 'move-right', 'root': 12, 'key': 15}, {'action': 'move-right', 'root': 13, 'key': 15}, {'action': 'insert', 'root': -1, 'key': 15}], '6': [{'action': 'move-left', 'root': 50, 'key': 43}, {'action': 'move-right', 'root': 17, 'key': 43}, {'action': 'move-right', 'root': 23, 'key': 43}, {'action': 'insert', 'root': -1, 'key': 43}]}}}
2021-02-22 17:14:44.156754,insert,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root == None:\n        return False   \n    if root.val == None:\n        return False   \n    elif root.val == key:\n        return True\n    else:\n        if key < root.val:\n            return search(root.left, key)\n        else:\n            return search(root.right, key)\n    \n#    else:\n#        left = False\n#        if (root.left != None):\n#            left = search(root.left, key) \n#            \n#        right = False\n#        if (root.right != None):\n#            right = search(root.right, key)\n#       \n#        return (left or right)', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 11}, {'action': 'move-left', 'root': 12, 'key': 11}, {'action': 'move-right', 'root': 9, 'key': 11}, {'action': 'move-right', 'root': 10, 'key': 11}, {'action': 'return-false', 'root': -1, 'key': 11}], '1': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '2': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-false', 'root': -1, 'key': 30}], '3': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '4': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-true', 'root': -1, 'key': 30}]}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    print("Root:" + str(root.val))\n    if root == None or root.val == None:\n        return root\n    \n    if key > root.val:\n        print("Right")\n        if root.right.val == None:\n            root.right.val = key\n        else:\n            root.right.val = insert(root.right, key)\n    else:\n        print("Left")\n        if root.left.val == None:\n            print("nothing here")\n            root.left.val = key\n        else:\n            root.left.val = insert(root.left, key)\n    return root', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 14}, {'action': 'move-right', 'root': 12, 'key': 14}, {'action': 'move-left', 'root': 15, 'key': 14}, {'action': 'move-right', 'root': 13, 'key': 14}, {'action': 'insert', 'root': -1, 'key': 14}], '1': [{'action': 'move-right', 'root': 5, 'key': 6}, {'action': 'move-left', 'root': 7, 'key': 6}, {'action': 'insert', 'root': -1, 'key': 6}], '2': [{'action': 'move-left', 'root': 8, 'key': 2}, {'action': 'move-left', 'root': 3, 'key': 2}, {'action': 'move-right', 'root': 1, 'key': 2}, {'action': 'insert', 'root': -1, 'key': 2}], '3': [{'action': 'move-left', 'root': 50, 'key': 43}, {'action': 'move-right', 'root': 17, 'key': 43}, {'action': 'move-right', 'root': 23, 'key': 43}, {'action': 'insert', 'root': -1, 'key': 43}], '4': [{'action': 'move-right', 'root': 5, 'key': 9}, {'action': 'move-right', 'root': 7, 'key': 9}, {'action': 'insert', 'root': -1, 'key': 9}], '5': [{'action': 'move-right', 'root': 8, 'key': 15}, {'action': 'move-right', 'root': 10, 'key': 15}, {'action': 'move-right', 'root': 12, 'key': 15}, {'action': 'move-right', 'root': 13, 'key': 15}, {'action': 'insert', 'root': -1, 'key': 15}], '6': [{'action': 'move-left', 'root': 50, 'key': 43}, {'action': 'move-right', 'root': 17, 'key': 43}, {'action': 'move-right', 'root': 23, 'key': 43}, {'action': 'insert', 'root': -1, 'key': 43}]}}}
2021-02-22 17:14:45.266221,insert,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root == None:\n        return False   \n    if root.val == None:\n        return False   \n    elif root.val == key:\n        return True\n    else:\n        if key < root.val:\n            return search(root.left, key)\n        else:\n            return search(root.right, key)\n    \n#    else:\n#        left = False\n#        if (root.left != None):\n#            left = search(root.left, key) \n#            \n#        right = False\n#        if (root.right != None):\n#            right = search(root.right, key)\n#       \n#        return (left or right)', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 11}, {'action': 'move-left', 'root': 12, 'key': 11}, {'action': 'move-right', 'root': 9, 'key': 11}, {'action': 'move-right', 'root': 10, 'key': 11}, {'action': 'return-false', 'root': -1, 'key': 11}], '1': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '2': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-false', 'root': -1, 'key': 30}], '3': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '4': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-true', 'root': -1, 'key': 30}]}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    print("Root:" + str(root.val))\n    if root == None or root.val == None:\n        return root\n    \n    if key > root.val:\n        print("Right")\n        if root.right.val == None:\n            root.right.val = key\n        else:\n            root.right.val = insert(root.right, key)\n    else:\n        print("Left")\n        if root.left.val == None:\n            print("nothing here")\n            root.left.val = key\n        else:\n            root.left.val = insert(root.left, key)\n    return root', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 14}, {'action': 'move-right', 'root': 12, 'key': 14}, {'action': 'move-left', 'root': 15, 'key': 14}, {'action': 'move-right', 'root': 13, 'key': 14}, {'action': 'insert', 'root': -1, 'key': 14}], '1': [{'action': 'move-right', 'root': 5, 'key': 6}, {'action': 'move-left', 'root': 7, 'key': 6}, {'action': 'insert', 'root': -1, 'key': 6}], '2': [{'action': 'move-left', 'root': 8, 'key': 2}, {'action': 'move-left', 'root': 3, 'key': 2}, {'action': 'move-right', 'root': 1, 'key': 2}, {'action': 'insert', 'root': -1, 'key': 2}], '3': [{'action': 'move-left', 'root': 50, 'key': 43}, {'action': 'move-right', 'root': 17, 'key': 43}, {'action': 'move-right', 'root': 23, 'key': 43}, {'action': 'insert', 'root': -1, 'key': 43}], '4': [{'action': 'move-right', 'root': 5, 'key': 9}, {'action': 'move-right', 'root': 7, 'key': 9}, {'action': 'insert', 'root': -1, 'key': 9}], '5': [{'action': 'move-right', 'root': 8, 'key': 15}, {'action': 'move-right', 'root': 10, 'key': 15}, {'action': 'move-right', 'root': 12, 'key': 15}, {'action': 'move-right', 'root': 13, 'key': 15}, {'action': 'insert', 'root': -1, 'key': 15}], '6': [{'action': 'move-left', 'root': 50, 'key': 43}, {'action': 'move-right', 'root': 17, 'key': 43}, {'action': 'move-right', 'root': 23, 'key': 43}, {'action': 'insert', 'root': -1, 'key': 43}]}}}
2021-02-22 17:14:45.732762,insert,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root == None:\n        return False   \n    if root.val == None:\n        return False   \n    elif root.val == key:\n        return True\n    else:\n        if key < root.val:\n            return search(root.left, key)\n        else:\n            return search(root.right, key)\n    \n#    else:\n#        left = False\n#        if (root.left != None):\n#            left = search(root.left, key) \n#            \n#        right = False\n#        if (root.right != None):\n#            right = search(root.right, key)\n#       \n#        return (left or right)', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 11}, {'action': 'move-left', 'root': 12, 'key': 11}, {'action': 'move-right', 'root': 9, 'key': 11}, {'action': 'move-right', 'root': 10, 'key': 11}, {'action': 'return-false', 'root': -1, 'key': 11}], '1': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '2': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-false', 'root': -1, 'key': 30}], '3': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '4': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-true', 'root': -1, 'key': 30}]}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    print("Root:" + str(root.val))\n    if root == None or root.val == None:\n        return root\n    \n    if key > root.val:\n        print("Right")\n        if root.right.val == None:\n            root.right.val = key\n        else:\n            root.right.val = insert(root.right, key)\n    else:\n        print("Left")\n        if root.left.val == None:\n            print("nothing here")\n            root.left.val = key\n        else:\n            root.left.val = insert(root.left, key)\n    return root', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 14}, {'action': 'move-right', 'root': 12, 'key': 14}, {'action': 'move-left', 'root': 15, 'key': 14}, {'action': 'move-right', 'root': 13, 'key': 14}, {'action': 'insert', 'root': -1, 'key': 14}], '1': [{'action': 'move-right', 'root': 5, 'key': 6}, {'action': 'move-left', 'root': 7, 'key': 6}, {'action': 'insert', 'root': -1, 'key': 6}], '2': [{'action': 'move-left', 'root': 8, 'key': 2}, {'action': 'move-left', 'root': 3, 'key': 2}, {'action': 'move-right', 'root': 1, 'key': 2}, {'action': 'insert', 'root': -1, 'key': 2}], '3': [{'action': 'move-left', 'root': 50, 'key': 43}, {'action': 'move-right', 'root': 17, 'key': 43}, {'action': 'move-right', 'root': 23, 'key': 43}, {'action': 'insert', 'root': -1, 'key': 43}], '4': [{'action': 'move-right', 'root': 5, 'key': 9}, {'action': 'move-right', 'root': 7, 'key': 9}, {'action': 'insert', 'root': -1, 'key': 9}], '5': [{'action': 'move-right', 'root': 8, 'key': 15}, {'action': 'move-right', 'root': 10, 'key': 15}, {'action': 'move-right', 'root': 12, 'key': 15}, {'action': 'move-right', 'root': 13, 'key': 15}, {'action': 'insert', 'root': -1, 'key': 15}], '6': [{'action': 'move-left', 'root': 50, 'key': 43}, {'action': 'move-right', 'root': 17, 'key': 43}, {'action': 'move-right', 'root': 23, 'key': 43}, {'action': 'insert', 'root': -1, 'key': 43}]}}}
2021-02-22 17:14:45.864904,insert,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root == None:\n        return False   \n    if root.val == None:\n        return False   \n    elif root.val == key:\n        return True\n    else:\n        if key < root.val:\n            return search(root.left, key)\n        else:\n            return search(root.right, key)\n    \n#    else:\n#        left = False\n#        if (root.left != None):\n#            left = search(root.left, key) \n#            \n#        right = False\n#        if (root.right != None):\n#            right = search(root.right, key)\n#       \n#        return (left or right)', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 11}, {'action': 'move-left', 'root': 12, 'key': 11}, {'action': 'move-right', 'root': 9, 'key': 11}, {'action': 'move-right', 'root': 10, 'key': 11}, {'action': 'return-false', 'root': -1, 'key': 11}], '1': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '2': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-false', 'root': -1, 'key': 30}], '3': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '4': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-true', 'root': -1, 'key': 30}]}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    print("Root:" + str(root.val))\n    if root == None or root.val == None:\n        return root\n    \n    if key > root.val:\n        print("Right")\n        if root.right.val == None:\n            root.right.val = key\n        else:\n            root.right.val = insert(root.right, key)\n    else:\n        print("Left")\n        if root.left.val == None:\n            print("nothing here")\n            root.left.val = key\n        else:\n            root.left.val = insert(root.left, key)\n    return root', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 14}, {'action': 'move-right', 'root': 12, 'key': 14}, {'action': 'move-left', 'root': 15, 'key': 14}, {'action': 'move-right', 'root': 13, 'key': 14}, {'action': 'insert', 'root': -1, 'key': 14}], '1': [{'action': 'move-right', 'root': 5, 'key': 6}, {'action': 'move-left', 'root': 7, 'key': 6}, {'action': 'insert', 'root': -1, 'key': 6}], '2': [{'action': 'move-left', 'root': 8, 'key': 2}, {'action': 'move-left', 'root': 3, 'key': 2}, {'action': 'move-right', 'root': 1, 'key': 2}, {'action': 'insert', 'root': -1, 'key': 2}], '3': [{'action': 'move-left', 'root': 50, 'key': 43}, {'action': 'move-right', 'root': 17, 'key': 43}, {'action': 'move-right', 'root': 23, 'key': 43}, {'action': 'insert', 'root': -1, 'key': 43}], '4': [{'action': 'move-right', 'root': 5, 'key': 9}, {'action': 'move-right', 'root': 7, 'key': 9}, {'action': 'insert', 'root': -1, 'key': 9}], '5': [{'action': 'move-right', 'root': 8, 'key': 15}, {'action': 'move-right', 'root': 10, 'key': 15}, {'action': 'move-right', 'root': 12, 'key': 15}, {'action': 'move-right', 'root': 13, 'key': 15}, {'action': 'insert', 'root': -1, 'key': 15}], '6': [{'action': 'move-left', 'root': 50, 'key': 43}, {'action': 'move-right', 'root': 17, 'key': 43}, {'action': 'move-right', 'root': 23, 'key': 43}, {'action': 'insert', 'root': -1, 'key': 43}]}}}
2021-02-22 17:15:04.909151,insert,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root == None:\n        return False   \n    if root.val == None:\n        return False   \n    elif root.val == key:\n        return True\n    else:\n        if key < root.val:\n            return search(root.left, key)\n        else:\n            return search(root.right, key)\n    \n#    else:\n#        left = False\n#        if (root.left != None):\n#            left = search(root.left, key) \n#            \n#        right = False\n#        if (root.right != None):\n#            right = search(root.right, key)\n#       \n#        return (left or right)', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 11}, {'action': 'move-left', 'root': 12, 'key': 11}, {'action': 'move-right', 'root': 9, 'key': 11}, {'action': 'move-right', 'root': 10, 'key': 11}, {'action': 'return-false', 'root': -1, 'key': 11}], '1': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '2': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-false', 'root': -1, 'key': 30}], '3': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '4': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-true', 'root': -1, 'key': 30}]}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    print("Root:" + str(root.val))\n    if root == None or root.val == None:\n        return root\n    \n    if key > root.val:\n        print("Right")\n        if root.right.val == None:\n            root.right.val = key\n        else:\n            root.right.val = insert(root.right, key)\n    else:\n        print("Left")\n        if root.left.val == None:\n            print("nothing here")\n            root.left.val = key\n        else:\n            print("something here")\n            root.left.val = insert(root.left, key)\n    return root', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 14}, {'action': 'move-right', 'root': 12, 'key': 14}, {'action': 'move-left', 'root': 15, 'key': 14}, {'action': 'move-right', 'root': 13, 'key': 14}, {'action': 'insert', 'root': -1, 'key': 14}], '1': [{'action': 'move-right', 'root': 5, 'key': 6}, {'action': 'move-left', 'root': 7, 'key': 6}, {'action': 'insert', 'root': -1, 'key': 6}], '2': [{'action': 'move-left', 'root': 8, 'key': 2}, {'action': 'move-left', 'root': 3, 'key': 2}, {'action': 'move-right', 'root': 1, 'key': 2}, {'action': 'insert', 'root': -1, 'key': 2}], '3': [{'action': 'move-left', 'root': 50, 'key': 43}, {'action': 'move-right', 'root': 17, 'key': 43}, {'action': 'move-right', 'root': 23, 'key': 43}, {'action': 'insert', 'root': -1, 'key': 43}], '4': [{'action': 'move-right', 'root': 5, 'key': 9}, {'action': 'move-right', 'root': 7, 'key': 9}, {'action': 'insert', 'root': -1, 'key': 9}], '5': [{'action': 'move-right', 'root': 8, 'key': 15}, {'action': 'move-right', 'root': 10, 'key': 15}, {'action': 'move-right', 'root': 12, 'key': 15}, {'action': 'move-right', 'root': 13, 'key': 15}, {'action': 'insert', 'root': -1, 'key': 15}], '6': [{'action': 'move-left', 'root': 50, 'key': 43}, {'action': 'move-right', 'root': 17, 'key': 43}, {'action': 'move-right', 'root': 23, 'key': 43}, {'action': 'insert', 'root': -1, 'key': 43}]}}}
2021-02-22 17:15:05.908047,insert,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root == None:\n        return False   \n    if root.val == None:\n        return False   \n    elif root.val == key:\n        return True\n    else:\n        if key < root.val:\n            return search(root.left, key)\n        else:\n            return search(root.right, key)\n    \n#    else:\n#        left = False\n#        if (root.left != None):\n#            left = search(root.left, key) \n#            \n#        right = False\n#        if (root.right != None):\n#            right = search(root.right, key)\n#       \n#        return (left or right)', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 11}, {'action': 'move-left', 'root': 12, 'key': 11}, {'action': 'move-right', 'root': 9, 'key': 11}, {'action': 'move-right', 'root': 10, 'key': 11}, {'action': 'return-false', 'root': -1, 'key': 11}], '1': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '2': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-false', 'root': -1, 'key': 30}], '3': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '4': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-true', 'root': -1, 'key': 30}]}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    print("Root:" + str(root.val))\n    if root == None or root.val == None:\n        return root\n    \n    if key > root.val:\n        print("Right")\n        if root.right.val == None:\n            root.right.val = key\n        else:\n            root.right.val = insert(root.right, key)\n    else:\n        print("Left")\n        if root.left.val == None:\n            print("nothing here")\n            root.left.val = key\n        else:\n            print("something here")\n            root.left.val = insert(root.left, key)\n    return root', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 14}, {'action': 'move-right', 'root': 12, 'key': 14}, {'action': 'move-left', 'root': 15, 'key': 14}, {'action': 'move-right', 'root': 13, 'key': 14}, {'action': 'insert', 'root': -1, 'key': 14}], '1': [{'action': 'move-right', 'root': 5, 'key': 6}, {'action': 'move-left', 'root': 7, 'key': 6}, {'action': 'insert', 'root': -1, 'key': 6}], '2': [{'action': 'move-left', 'root': 8, 'key': 2}, {'action': 'move-left', 'root': 3, 'key': 2}, {'action': 'move-right', 'root': 1, 'key': 2}, {'action': 'insert', 'root': -1, 'key': 2}], '3': [{'action': 'move-left', 'root': 50, 'key': 43}, {'action': 'move-right', 'root': 17, 'key': 43}, {'action': 'move-right', 'root': 23, 'key': 43}, {'action': 'insert', 'root': -1, 'key': 43}], '4': [{'action': 'move-right', 'root': 5, 'key': 9}, {'action': 'move-right', 'root': 7, 'key': 9}, {'action': 'insert', 'root': -1, 'key': 9}], '5': [{'action': 'move-right', 'root': 8, 'key': 15}, {'action': 'move-right', 'root': 10, 'key': 15}, {'action': 'move-right', 'root': 12, 'key': 15}, {'action': 'move-right', 'root': 13, 'key': 15}, {'action': 'insert', 'root': -1, 'key': 15}], '6': [{'action': 'move-left', 'root': 50, 'key': 43}, {'action': 'move-right', 'root': 17, 'key': 43}, {'action': 'move-right', 'root': 23, 'key': 43}, {'action': 'insert', 'root': -1, 'key': 43}]}}}
2021-02-22 17:15:06.092649,insert,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root == None:\n        return False   \n    if root.val == None:\n        return False   \n    elif root.val == key:\n        return True\n    else:\n        if key < root.val:\n            return search(root.left, key)\n        else:\n            return search(root.right, key)\n    \n#    else:\n#        left = False\n#        if (root.left != None):\n#            left = search(root.left, key) \n#            \n#        right = False\n#        if (root.right != None):\n#            right = search(root.right, key)\n#       \n#        return (left or right)', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 11}, {'action': 'move-left', 'root': 12, 'key': 11}, {'action': 'move-right', 'root': 9, 'key': 11}, {'action': 'move-right', 'root': 10, 'key': 11}, {'action': 'return-false', 'root': -1, 'key': 11}], '1': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '2': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-false', 'root': -1, 'key': 30}], '3': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '4': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-true', 'root': -1, 'key': 30}]}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    print("Root:" + str(root.val))\n    if root == None or root.val == None:\n        return root\n    \n    if key > root.val:\n        print("Right")\n        if root.right.val == None:\n            root.right.val = key\n        else:\n            root.right.val = insert(root.right, key)\n    else:\n        print("Left")\n        if root.left.val == None:\n            print("nothing here")\n            root.left.val = key\n        else:\n            print("something here")\n            root.left.val = insert(root.left, key)\n    return root', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 14}, {'action': 'move-right', 'root': 12, 'key': 14}, {'action': 'move-left', 'root': 15, 'key': 14}, {'action': 'move-right', 'root': 13, 'key': 14}, {'action': 'insert', 'root': -1, 'key': 14}], '1': [{'action': 'move-right', 'root': 5, 'key': 6}, {'action': 'move-left', 'root': 7, 'key': 6}, {'action': 'insert', 'root': -1, 'key': 6}], '2': [{'action': 'move-left', 'root': 8, 'key': 2}, {'action': 'move-left', 'root': 3, 'key': 2}, {'action': 'move-right', 'root': 1, 'key': 2}, {'action': 'insert', 'root': -1, 'key': 2}], '3': [{'action': 'move-left', 'root': 50, 'key': 43}, {'action': 'move-right', 'root': 17, 'key': 43}, {'action': 'move-right', 'root': 23, 'key': 43}, {'action': 'insert', 'root': -1, 'key': 43}], '4': [{'action': 'move-right', 'root': 5, 'key': 9}, {'action': 'move-right', 'root': 7, 'key': 9}, {'action': 'insert', 'root': -1, 'key': 9}], '5': [{'action': 'move-right', 'root': 8, 'key': 15}, {'action': 'move-right', 'root': 10, 'key': 15}, {'action': 'move-right', 'root': 12, 'key': 15}, {'action': 'move-right', 'root': 13, 'key': 15}, {'action': 'insert', 'root': -1, 'key': 15}], '6': [{'action': 'move-left', 'root': 50, 'key': 43}, {'action': 'move-right', 'root': 17, 'key': 43}, {'action': 'move-right', 'root': 23, 'key': 43}, {'action': 'insert', 'root': -1, 'key': 43}]}}}
2021-02-22 17:15:25.416486,insert,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root == None:\n        return False   \n    if root.val == None:\n        return False   \n    elif root.val == key:\n        return True\n    else:\n        if key < root.val:\n            return search(root.left, key)\n        else:\n            return search(root.right, key)\n    \n#    else:\n#        left = False\n#        if (root.left != None):\n#            left = search(root.left, key) \n#            \n#        right = False\n#        if (root.right != None):\n#            right = search(root.right, key)\n#       \n#        return (left or right)', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 11}, {'action': 'move-left', 'root': 12, 'key': 11}, {'action': 'move-right', 'root': 9, 'key': 11}, {'action': 'move-right', 'root': 10, 'key': 11}, {'action': 'return-false', 'root': -1, 'key': 11}], '1': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '2': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-false', 'root': -1, 'key': 30}], '3': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '4': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-true', 'root': -1, 'key': 30}]}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    print("Root:" + str(root.val))\n    if root == None or root.val == None:\n        return root\n    \n    if key > root.val:\n        print("Right")\n        if root.right.val == None:\n            root.right.val = key\n        else:\n            root.right.val = insert(root.right, key)\n    else:\n        print("Left")\n        if root.left == None:\n            print("nothing here")\n            root.left.val = key\n        else:\n            print("something here")\n            root.left.val = insert(root.left, key)\n    return root', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 14}, {'action': 'move-right', 'root': 12, 'key': 14}, {'action': 'move-left', 'root': 15, 'key': 14}, {'action': 'move-right', 'root': 13, 'key': 14}, {'action': 'insert', 'root': -1, 'key': 14}], '1': [{'action': 'move-right', 'root': 5, 'key': 6}, {'action': 'move-left', 'root': 7, 'key': 6}, {'action': 'insert', 'root': -1, 'key': 6}], '2': [{'action': 'move-left', 'root': 8, 'key': 2}, {'action': 'move-left', 'root': 3, 'key': 2}, {'action': 'move-right', 'root': 1, 'key': 2}, {'action': 'insert', 'root': -1, 'key': 2}], '3': [{'action': 'move-left', 'root': 50, 'key': 43}, {'action': 'move-right', 'root': 17, 'key': 43}, {'action': 'move-right', 'root': 23, 'key': 43}, {'action': 'insert', 'root': -1, 'key': 43}], '4': [{'action': 'move-right', 'root': 5, 'key': 9}, {'action': 'move-right', 'root': 7, 'key': 9}, {'action': 'insert', 'root': -1, 'key': 9}], '5': [{'action': 'move-right', 'root': 8, 'key': 15}, {'action': 'move-right', 'root': 10, 'key': 15}, {'action': 'move-right', 'root': 12, 'key': 15}, {'action': 'move-right', 'root': 13, 'key': 15}, {'action': 'insert', 'root': -1, 'key': 15}], '6': [{'action': 'move-left', 'root': 50, 'key': 43}, {'action': 'move-right', 'root': 17, 'key': 43}, {'action': 'move-right', 'root': 23, 'key': 43}, {'action': 'insert', 'root': -1, 'key': 43}]}}}
2021-02-22 17:15:34.218571,insert,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root == None:\n        return False   \n    if root.val == None:\n        return False   \n    elif root.val == key:\n        return True\n    else:\n        if key < root.val:\n            return search(root.left, key)\n        else:\n            return search(root.right, key)\n    \n#    else:\n#        left = False\n#        if (root.left != None):\n#            left = search(root.left, key) \n#            \n#        right = False\n#        if (root.right != None):\n#            right = search(root.right, key)\n#       \n#        return (left or right)', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 11}, {'action': 'move-left', 'root': 12, 'key': 11}, {'action': 'move-right', 'root': 9, 'key': 11}, {'action': 'move-right', 'root': 10, 'key': 11}, {'action': 'return-false', 'root': -1, 'key': 11}], '1': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '2': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-false', 'root': -1, 'key': 30}], '3': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '4': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-true', 'root': -1, 'key': 30}]}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    print("Root:" + str(root.val))\n    if root == None or root.val == None:\n        return root\n    \n    if key > root.val:\n        print("Right")\n        if root.right.val == None:\n            root.right.val = key\n        else:\n            root.right.val = insert(root.right, key)\n    else:\n        print("Left")\n        if root.left == None:\n            print("nothing here")\n            root.left.val = key\n        else:\n            print("something here")\n            root.left.val = insert(root.left, key)\n    return root', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 14}, {'action': 'move-right', 'root': 12, 'key': 14}, {'action': 'move-left', 'root': 15, 'key': 14}, {'action': 'move-right', 'root': 13, 'key': 14}, {'action': 'insert', 'root': -1, 'key': 14}], '1': [{'action': 'move-right', 'root': 5, 'key': 6}, {'action': 'move-left', 'root': 7, 'key': 6}, {'action': 'insert', 'root': -1, 'key': 6}], '2': [{'action': 'move-left', 'root': 8, 'key': 2}, {'action': 'move-left', 'root': 3, 'key': 2}, {'action': 'move-right', 'root': 1, 'key': 2}, {'action': 'insert', 'root': -1, 'key': 2}], '3': [{'action': 'move-left', 'root': 50, 'key': 43}, {'action': 'move-right', 'root': 17, 'key': 43}, {'action': 'move-right', 'root': 23, 'key': 43}, {'action': 'insert', 'root': -1, 'key': 43}], '4': [{'action': 'move-right', 'root': 5, 'key': 9}, {'action': 'move-right', 'root': 7, 'key': 9}, {'action': 'insert', 'root': -1, 'key': 9}], '5': [{'action': 'move-right', 'root': 8, 'key': 15}, {'action': 'move-right', 'root': 10, 'key': 15}, {'action': 'move-right', 'root': 12, 'key': 15}, {'action': 'move-right', 'root': 13, 'key': 15}, {'action': 'insert', 'root': -1, 'key': 15}], '6': [{'action': 'move-left', 'root': 50, 'key': 43}, {'action': 'move-right', 'root': 17, 'key': 43}, {'action': 'move-right', 'root': 23, 'key': 43}, {'action': 'insert', 'root': -1, 'key': 43}]}}}
2021-02-22 17:15:44.034248,insert,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root == None:\n        return False   \n    if root.val == None:\n        return False   \n    elif root.val == key:\n        return True\n    else:\n        if key < root.val:\n            return search(root.left, key)\n        else:\n            return search(root.right, key)\n    \n#    else:\n#        left = False\n#        if (root.left != None):\n#            left = search(root.left, key) \n#            \n#        right = False\n#        if (root.right != None):\n#            right = search(root.right, key)\n#       \n#        return (left or right)', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 11}, {'action': 'move-left', 'root': 12, 'key': 11}, {'action': 'move-right', 'root': 9, 'key': 11}, {'action': 'move-right', 'root': 10, 'key': 11}, {'action': 'return-false', 'root': -1, 'key': 11}], '1': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '2': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-false', 'root': -1, 'key': 30}], '3': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '4': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-true', 'root': -1, 'key': 30}]}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    print("Root:" + str(root.val))\n    if root == None or root.val == None:\n        return root\n    \n    if key > root.val:\n        print("Right")\n        if root.right.val == None:\n            root.right.val = key\n        else:\n            root.right.val = insert(root.right, key)\n    else:\n        print("Left")\n        if root.left == None:\n            print("nothing here")\n            root.left = key\n        else:\n            print("something here")\n            root.left.val = insert(root.left, key)\n    return root', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 14}, {'action': 'move-right', 'root': 12, 'key': 14}, {'action': 'move-left', 'root': 15, 'key': 14}, {'action': 'move-right', 'root': 13, 'key': 14}, {'action': 'insert', 'root': -1, 'key': 14}], '1': [{'action': 'move-right', 'root': 5, 'key': 6}, {'action': 'move-left', 'root': 7, 'key': 6}, {'action': 'insert', 'root': -1, 'key': 6}], '2': [{'action': 'move-left', 'root': 8, 'key': 2}, {'action': 'move-left', 'root': 3, 'key': 2}, {'action': 'move-right', 'root': 1, 'key': 2}, {'action': 'insert', 'root': -1, 'key': 2}], '3': [{'action': 'move-left', 'root': 50, 'key': 43}, {'action': 'move-right', 'root': 17, 'key': 43}, {'action': 'move-right', 'root': 23, 'key': 43}, {'action': 'insert', 'root': -1, 'key': 43}], '4': [{'action': 'move-right', 'root': 5, 'key': 9}, {'action': 'move-right', 'root': 7, 'key': 9}, {'action': 'insert', 'root': -1, 'key': 9}], '5': [{'action': 'move-right', 'root': 8, 'key': 15}, {'action': 'move-right', 'root': 10, 'key': 15}, {'action': 'move-right', 'root': 12, 'key': 15}, {'action': 'move-right', 'root': 13, 'key': 15}, {'action': 'insert', 'root': -1, 'key': 15}], '6': [{'action': 'move-left', 'root': 50, 'key': 43}, {'action': 'move-right', 'root': 17, 'key': 43}, {'action': 'move-right', 'root': 23, 'key': 43}, {'action': 'insert', 'root': -1, 'key': 43}]}}}
2021-02-22 17:16:09.928575,insert,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root == None:\n        return False   \n    if root.val == None:\n        return False   \n    elif root.val == key:\n        return True\n    else:\n        if key < root.val:\n            return search(root.left, key)\n        else:\n            return search(root.right, key)\n    \n#    else:\n#        left = False\n#        if (root.left != None):\n#            left = search(root.left, key) \n#            \n#        right = False\n#        if (root.right != None):\n#            right = search(root.right, key)\n#       \n#        return (left or right)', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 11}, {'action': 'move-left', 'root': 12, 'key': 11}, {'action': 'move-right', 'root': 9, 'key': 11}, {'action': 'move-right', 'root': 10, 'key': 11}, {'action': 'return-false', 'root': -1, 'key': 11}], '1': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '2': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-false', 'root': -1, 'key': 30}], '3': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '4': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-true', 'root': -1, 'key': 30}]}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    print("Root:" + str(root.val))\n    if root == None or root.val == None:\n        return root\n    \n    if key > root.val:\n        print("Right")\n        if root.right.val == None:\n            root.right.val = key\n        else:\n            root.right.val = insert(root.right, key)\n    else:\n        print("Left")\n        if root.left == None:\n            print("nothing here")\n            root.left = Node(key)\n        else:\n            print("something here")\n            root.left.val = insert(root.left, key)\n    return root', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 14}, {'action': 'move-right', 'root': 12, 'key': 14}, {'action': 'move-left', 'root': 15, 'key': 14}, {'action': 'move-right', 'root': 13, 'key': 14}, {'action': 'insert', 'root': -1, 'key': 14}], '1': [{'action': 'move-right', 'root': 5, 'key': 6}, {'action': 'move-left', 'root': 7, 'key': 6}, {'action': 'insert', 'root': -1, 'key': 6}], '2': [{'action': 'move-left', 'root': 8, 'key': 2}, {'action': 'move-left', 'root': 3, 'key': 2}, {'action': 'move-right', 'root': 1, 'key': 2}, {'action': 'insert', 'root': -1, 'key': 2}], '3': [{'action': 'move-left', 'root': 50, 'key': 43}, {'action': 'move-right', 'root': 17, 'key': 43}, {'action': 'move-right', 'root': 23, 'key': 43}, {'action': 'insert', 'root': -1, 'key': 43}], '4': [{'action': 'move-right', 'root': 5, 'key': 9}, {'action': 'move-right', 'root': 7, 'key': 9}, {'action': 'insert', 'root': -1, 'key': 9}], '5': [{'action': 'move-right', 'root': 8, 'key': 15}, {'action': 'move-right', 'root': 10, 'key': 15}, {'action': 'move-right', 'root': 12, 'key': 15}, {'action': 'move-right', 'root': 13, 'key': 15}, {'action': 'insert', 'root': -1, 'key': 15}], '6': [{'action': 'move-left', 'root': 50, 'key': 43}, {'action': 'move-right', 'root': 17, 'key': 43}, {'action': 'move-right', 'root': 23, 'key': 43}, {'action': 'insert', 'root': -1, 'key': 43}]}}}
2021-02-22 17:16:11.654717,insert,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root == None:\n        return False   \n    if root.val == None:\n        return False   \n    elif root.val == key:\n        return True\n    else:\n        if key < root.val:\n            return search(root.left, key)\n        else:\n            return search(root.right, key)\n    \n#    else:\n#        left = False\n#        if (root.left != None):\n#            left = search(root.left, key) \n#            \n#        right = False\n#        if (root.right != None):\n#            right = search(root.right, key)\n#       \n#        return (left or right)', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 11}, {'action': 'move-left', 'root': 12, 'key': 11}, {'action': 'move-right', 'root': 9, 'key': 11}, {'action': 'move-right', 'root': 10, 'key': 11}, {'action': 'return-false', 'root': -1, 'key': 11}], '1': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '2': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-false', 'root': -1, 'key': 30}], '3': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '4': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-true', 'root': -1, 'key': 30}]}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    print("Root:" + str(root.val))\n    if root == None or root.val == None:\n        return root\n    \n    if key > root.val:\n        print("Right")\n        if root.right.val == None:\n            root.right.val = key\n        else:\n            root.right.val = insert(root.right, key)\n    else:\n        print("Left")\n        if root.left == None:\n            print("nothing here")\n            root.left = Node(key)\n        else:\n            print("something here")\n            root.left.val = insert(root.left, key)\n    return root', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 14}, {'action': 'move-right', 'root': 12, 'key': 14}, {'action': 'move-left', 'root': 15, 'key': 14}, {'action': 'move-right', 'root': 13, 'key': 14}, {'action': 'insert', 'root': -1, 'key': 14}], '1': [{'action': 'move-right', 'root': 5, 'key': 6}, {'action': 'move-left', 'root': 7, 'key': 6}, {'action': 'insert', 'root': -1, 'key': 6}], '2': [{'action': 'move-left', 'root': 8, 'key': 2}, {'action': 'move-left', 'root': 3, 'key': 2}, {'action': 'move-right', 'root': 1, 'key': 2}, {'action': 'insert', 'root': -1, 'key': 2}], '3': [{'action': 'move-left', 'root': 50, 'key': 43}, {'action': 'move-right', 'root': 17, 'key': 43}, {'action': 'move-right', 'root': 23, 'key': 43}, {'action': 'insert', 'root': -1, 'key': 43}], '4': [{'action': 'move-right', 'root': 5, 'key': 9}, {'action': 'move-right', 'root': 7, 'key': 9}, {'action': 'insert', 'root': -1, 'key': 9}], '5': [{'action': 'move-right', 'root': 8, 'key': 15}, {'action': 'move-right', 'root': 10, 'key': 15}, {'action': 'move-right', 'root': 12, 'key': 15}, {'action': 'move-right', 'root': 13, 'key': 15}, {'action': 'insert', 'root': -1, 'key': 15}], '6': [{'action': 'move-left', 'root': 50, 'key': 43}, {'action': 'move-right', 'root': 17, 'key': 43}, {'action': 'move-right', 'root': 23, 'key': 43}, {'action': 'insert', 'root': -1, 'key': 43}]}}}
2021-02-22 17:16:15.283561,insert,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root == None:\n        return False   \n    if root.val == None:\n        return False   \n    elif root.val == key:\n        return True\n    else:\n        if key < root.val:\n            return search(root.left, key)\n        else:\n            return search(root.right, key)\n    \n#    else:\n#        left = False\n#        if (root.left != None):\n#            left = search(root.left, key) \n#            \n#        right = False\n#        if (root.right != None):\n#            right = search(root.right, key)\n#       \n#        return (left or right)', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 11}, {'action': 'move-left', 'root': 12, 'key': 11}, {'action': 'move-right', 'root': 9, 'key': 11}, {'action': 'move-right', 'root': 10, 'key': 11}, {'action': 'return-false', 'root': -1, 'key': 11}], '1': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '2': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-false', 'root': -1, 'key': 30}], '3': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '4': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-true', 'root': -1, 'key': 30}]}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    print("Root:" + str(root.val))\n    if root == None or root.val == None:\n        return root\n    \n    if key > root.val:\n        print("Right")\n        if root.right.val == None:\n            root.right.val = key\n        else:\n            root.right.val = insert(root.right, key)\n    else:\n        print("Left")\n        if root.left == None:\n            print("nothing here1")\n            root.left = Node(key)\n        else:\n            print("something here")\n            root.left.val = insert(root.left, key)\n    return root', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 14}, {'action': 'move-right', 'root': 12, 'key': 14}, {'action': 'move-left', 'root': 15, 'key': 14}, {'action': 'move-right', 'root': 13, 'key': 14}, {'action': 'insert', 'root': -1, 'key': 14}], '1': [{'action': 'move-right', 'root': 5, 'key': 6}, {'action': 'move-left', 'root': 7, 'key': 6}, {'action': 'insert', 'root': -1, 'key': 6}], '2': [{'action': 'move-left', 'root': 8, 'key': 2}, {'action': 'move-left', 'root': 3, 'key': 2}, {'action': 'move-right', 'root': 1, 'key': 2}, {'action': 'insert', 'root': -1, 'key': 2}], '3': [{'action': 'move-left', 'root': 50, 'key': 43}, {'action': 'move-right', 'root': 17, 'key': 43}, {'action': 'move-right', 'root': 23, 'key': 43}, {'action': 'insert', 'root': -1, 'key': 43}], '4': [{'action': 'move-right', 'root': 5, 'key': 9}, {'action': 'move-right', 'root': 7, 'key': 9}, {'action': 'insert', 'root': -1, 'key': 9}], '5': [{'action': 'move-right', 'root': 8, 'key': 15}, {'action': 'move-right', 'root': 10, 'key': 15}, {'action': 'move-right', 'root': 12, 'key': 15}, {'action': 'move-right', 'root': 13, 'key': 15}, {'action': 'insert', 'root': -1, 'key': 15}], '6': [{'action': 'move-left', 'root': 50, 'key': 43}, {'action': 'move-right', 'root': 17, 'key': 43}, {'action': 'move-right', 'root': 23, 'key': 43}, {'action': 'insert', 'root': -1, 'key': 43}]}}}
2021-02-22 17:16:17.728254,insert,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root == None:\n        return False   \n    if root.val == None:\n        return False   \n    elif root.val == key:\n        return True\n    else:\n        if key < root.val:\n            return search(root.left, key)\n        else:\n            return search(root.right, key)\n    \n#    else:\n#        left = False\n#        if (root.left != None):\n#            left = search(root.left, key) \n#            \n#        right = False\n#        if (root.right != None):\n#            right = search(root.right, key)\n#       \n#        return (left or right)', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 11}, {'action': 'move-left', 'root': 12, 'key': 11}, {'action': 'move-right', 'root': 9, 'key': 11}, {'action': 'move-right', 'root': 10, 'key': 11}, {'action': 'return-false', 'root': -1, 'key': 11}], '1': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '2': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-false', 'root': -1, 'key': 30}], '3': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '4': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-true', 'root': -1, 'key': 30}]}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    print("Root:" + str(root.val))\n    if root == None or root.val == None:\n        return root\n    \n    if key > root.val:\n        print("Right")\n        if root.right.val == None:\n            root.right.val = key\n        else:\n            root.right.val = insert(root.right, key)\n    else:\n        print("Left")\n        if root.left == None:\n            print("nothing here")\n            root.left = Node(key)\n        else:\n            print("something here")\n            root.left.val = insert(root.left, key)\n    return root', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 14}, {'action': 'move-right', 'root': 12, 'key': 14}, {'action': 'move-left', 'root': 15, 'key': 14}, {'action': 'move-right', 'root': 13, 'key': 14}, {'action': 'insert', 'root': -1, 'key': 14}], '1': [{'action': 'move-right', 'root': 5, 'key': 6}, {'action': 'move-left', 'root': 7, 'key': 6}, {'action': 'insert', 'root': -1, 'key': 6}], '2': [{'action': 'move-left', 'root': 8, 'key': 2}, {'action': 'move-left', 'root': 3, 'key': 2}, {'action': 'move-right', 'root': 1, 'key': 2}, {'action': 'insert', 'root': -1, 'key': 2}], '3': [{'action': 'move-left', 'root': 50, 'key': 43}, {'action': 'move-right', 'root': 17, 'key': 43}, {'action': 'move-right', 'root': 23, 'key': 43}, {'action': 'insert', 'root': -1, 'key': 43}], '4': [{'action': 'move-right', 'root': 5, 'key': 9}, {'action': 'move-right', 'root': 7, 'key': 9}, {'action': 'insert', 'root': -1, 'key': 9}], '5': [{'action': 'move-right', 'root': 8, 'key': 15}, {'action': 'move-right', 'root': 10, 'key': 15}, {'action': 'move-right', 'root': 12, 'key': 15}, {'action': 'move-right', 'root': 13, 'key': 15}, {'action': 'insert', 'root': -1, 'key': 15}], '6': [{'action': 'move-left', 'root': 50, 'key': 43}, {'action': 'move-right', 'root': 17, 'key': 43}, {'action': 'move-right', 'root': 23, 'key': 43}, {'action': 'insert', 'root': -1, 'key': 43}]}}}
2021-02-22 17:16:32.283723,insert,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root == None:\n        return False   \n    if root.val == None:\n        return False   \n    elif root.val == key:\n        return True\n    else:\n        if key < root.val:\n            return search(root.left, key)\n        else:\n            return search(root.right, key)\n    \n#    else:\n#        left = False\n#        if (root.left != None):\n#            left = search(root.left, key) \n#            \n#        right = False\n#        if (root.right != None):\n#            right = search(root.right, key)\n#       \n#        return (left or right)', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 11}, {'action': 'move-left', 'root': 12, 'key': 11}, {'action': 'move-right', 'root': 9, 'key': 11}, {'action': 'move-right', 'root': 10, 'key': 11}, {'action': 'return-false', 'root': -1, 'key': 11}], '1': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '2': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-false', 'root': -1, 'key': 30}], '3': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '4': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-true', 'root': -1, 'key': 30}]}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    print("Root:" + str(root.val))\n    if root == None or root.val == None:\n        return root\n    \n    if key > root.val:\n        print("Right")\n        if root.right.val == None:\n            root.right.val = key\n        else:\n            root.right.val = insert(root.right, key)\n    else:\n        print("Left")\n        if root.left == None:\n            print("nothing here")\n            root.left = key\n        else:\n            print("something here")\n            root.left.val = insert(root.left, key)\n    return root', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 14}, {'action': 'move-right', 'root': 12, 'key': 14}, {'action': 'move-left', 'root': 15, 'key': 14}, {'action': 'move-right', 'root': 13, 'key': 14}, {'action': 'insert', 'root': -1, 'key': 14}], '1': [{'action': 'move-right', 'root': 5, 'key': 6}, {'action': 'move-left', 'root': 7, 'key': 6}, {'action': 'insert', 'root': -1, 'key': 6}], '2': [{'action': 'move-left', 'root': 8, 'key': 2}, {'action': 'move-left', 'root': 3, 'key': 2}, {'action': 'move-right', 'root': 1, 'key': 2}, {'action': 'insert', 'root': -1, 'key': 2}], '3': [{'action': 'move-left', 'root': 50, 'key': 43}, {'action': 'move-right', 'root': 17, 'key': 43}, {'action': 'move-right', 'root': 23, 'key': 43}, {'action': 'insert', 'root': -1, 'key': 43}], '4': [{'action': 'move-right', 'root': 5, 'key': 9}, {'action': 'move-right', 'root': 7, 'key': 9}, {'action': 'insert', 'root': -1, 'key': 9}], '5': [{'action': 'move-right', 'root': 8, 'key': 15}, {'action': 'move-right', 'root': 10, 'key': 15}, {'action': 'move-right', 'root': 12, 'key': 15}, {'action': 'move-right', 'root': 13, 'key': 15}, {'action': 'insert', 'root': -1, 'key': 15}], '6': [{'action': 'move-left', 'root': 50, 'key': 43}, {'action': 'move-right', 'root': 17, 'key': 43}, {'action': 'move-right', 'root': 23, 'key': 43}, {'action': 'insert', 'root': -1, 'key': 43}]}}}
2021-02-22 17:16:33.308715,insert,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root == None:\n        return False   \n    if root.val == None:\n        return False   \n    elif root.val == key:\n        return True\n    else:\n        if key < root.val:\n            return search(root.left, key)\n        else:\n            return search(root.right, key)\n    \n#    else:\n#        left = False\n#        if (root.left != None):\n#            left = search(root.left, key) \n#            \n#        right = False\n#        if (root.right != None):\n#            right = search(root.right, key)\n#       \n#        return (left or right)', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 11}, {'action': 'move-left', 'root': 12, 'key': 11}, {'action': 'move-right', 'root': 9, 'key': 11}, {'action': 'move-right', 'root': 10, 'key': 11}, {'action': 'return-false', 'root': -1, 'key': 11}], '1': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '2': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-false', 'root': -1, 'key': 30}], '3': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '4': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-true', 'root': -1, 'key': 30}]}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    print("Root:" + str(root.val))\n    if root == None or root.val == None:\n        return root\n    \n    if key > root.val:\n        print("Right")\n        if root.right.val == None:\n            root.right.val = key\n        else:\n            root.right.val = insert(root.right, key)\n    else:\n        print("Left")\n        if root.left == None:\n            print("nothing here")\n            root.left = key\n        else:\n            print("something here")\n            root.left.val = insert(root.left, key)\n    return root', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 14}, {'action': 'move-right', 'root': 12, 'key': 14}, {'action': 'move-left', 'root': 15, 'key': 14}, {'action': 'move-right', 'root': 13, 'key': 14}, {'action': 'insert', 'root': -1, 'key': 14}], '1': [{'action': 'move-right', 'root': 5, 'key': 6}, {'action': 'move-left', 'root': 7, 'key': 6}, {'action': 'insert', 'root': -1, 'key': 6}], '2': [{'action': 'move-left', 'root': 8, 'key': 2}, {'action': 'move-left', 'root': 3, 'key': 2}, {'action': 'move-right', 'root': 1, 'key': 2}, {'action': 'insert', 'root': -1, 'key': 2}], '3': [{'action': 'move-left', 'root': 50, 'key': 43}, {'action': 'move-right', 'root': 17, 'key': 43}, {'action': 'move-right', 'root': 23, 'key': 43}, {'action': 'insert', 'root': -1, 'key': 43}], '4': [{'action': 'move-right', 'root': 5, 'key': 9}, {'action': 'move-right', 'root': 7, 'key': 9}, {'action': 'insert', 'root': -1, 'key': 9}], '5': [{'action': 'move-right', 'root': 8, 'key': 15}, {'action': 'move-right', 'root': 10, 'key': 15}, {'action': 'move-right', 'root': 12, 'key': 15}, {'action': 'move-right', 'root': 13, 'key': 15}, {'action': 'insert', 'root': -1, 'key': 15}], '6': [{'action': 'move-left', 'root': 50, 'key': 43}, {'action': 'move-right', 'root': 17, 'key': 43}, {'action': 'move-right', 'root': 23, 'key': 43}, {'action': 'insert', 'root': -1, 'key': 43}]}}}
2021-02-22 17:16:55.419513,insert,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root == None:\n        return False   \n    if root.val == None:\n        return False   \n    elif root.val == key:\n        return True\n    else:\n        if key < root.val:\n            return search(root.left, key)\n        else:\n            return search(root.right, key)\n    \n#    else:\n#        left = False\n#        if (root.left != None):\n#            left = search(root.left, key) \n#            \n#        right = False\n#        if (root.right != None):\n#            right = search(root.right, key)\n#       \n#        return (left or right)', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 11}, {'action': 'move-left', 'root': 12, 'key': 11}, {'action': 'move-right', 'root': 9, 'key': 11}, {'action': 'move-right', 'root': 10, 'key': 11}, {'action': 'return-false', 'root': -1, 'key': 11}], '1': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '2': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-false', 'root': -1, 'key': 30}], '3': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '4': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-true', 'root': -1, 'key': 30}]}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    print("Root:" + str(root.val))\n    if root == None or root.val == None:\n        return root\n    \n    if key > root.val:\n        print("Right")\n        if root.right.val == None:\n            root.right.val = key\n        else:\n            root.right.val = insert(root.right, key)\n    else:\n        print("Left")\n        if root.left == None:\n            print("nothing here")\n            root.left.val = key\n        else:\n            print("something here")\n            root.left.val = insert(root.left, key)\n    return root', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 14}, {'action': 'move-right', 'root': 12, 'key': 14}, {'action': 'move-left', 'root': 15, 'key': 14}, {'action': 'move-right', 'root': 13, 'key': 14}, {'action': 'insert', 'root': -1, 'key': 14}], '1': [{'action': 'move-right', 'root': 5, 'key': 6}, {'action': 'move-left', 'root': 7, 'key': 6}, {'action': 'insert', 'root': -1, 'key': 6}], '2': [{'action': 'move-left', 'root': 8, 'key': 2}, {'action': 'move-left', 'root': 3, 'key': 2}, {'action': 'move-right', 'root': 1, 'key': 2}, {'action': 'insert', 'root': -1, 'key': 2}], '3': [{'action': 'move-left', 'root': 50, 'key': 43}, {'action': 'move-right', 'root': 17, 'key': 43}, {'action': 'move-right', 'root': 23, 'key': 43}, {'action': 'insert', 'root': -1, 'key': 43}], '4': [{'action': 'move-right', 'root': 5, 'key': 9}, {'action': 'move-right', 'root': 7, 'key': 9}, {'action': 'insert', 'root': -1, 'key': 9}], '5': [{'action': 'move-right', 'root': 8, 'key': 15}, {'action': 'move-right', 'root': 10, 'key': 15}, {'action': 'move-right', 'root': 12, 'key': 15}, {'action': 'move-right', 'root': 13, 'key': 15}, {'action': 'insert', 'root': -1, 'key': 15}], '6': [{'action': 'move-left', 'root': 50, 'key': 43}, {'action': 'move-right', 'root': 17, 'key': 43}, {'action': 'move-right', 'root': 23, 'key': 43}, {'action': 'insert', 'root': -1, 'key': 43}]}}}
2021-02-22 17:17:00.093380,insert,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root == None:\n        return False   \n    if root.val == None:\n        return False   \n    elif root.val == key:\n        return True\n    else:\n        if key < root.val:\n            return search(root.left, key)\n        else:\n            return search(root.right, key)\n    \n#    else:\n#        left = False\n#        if (root.left != None):\n#            left = search(root.left, key) \n#            \n#        right = False\n#        if (root.right != None):\n#            right = search(root.right, key)\n#       \n#        return (left or right)', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 11}, {'action': 'move-left', 'root': 12, 'key': 11}, {'action': 'move-right', 'root': 9, 'key': 11}, {'action': 'move-right', 'root': 10, 'key': 11}, {'action': 'return-false', 'root': -1, 'key': 11}], '1': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '2': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-false', 'root': -1, 'key': 30}], '3': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '4': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-true', 'root': -1, 'key': 30}]}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    print("Root:" + str(root.val))\n    if root == None or root.val == None:\n        return root\n    \n    if key > root.val:\n        print("Right")\n        if root.right.val == None:\n            root.right.val = key\n        else:\n            root.right.val = insert(root.right, key)\n    else:\n        print("Left")\n        if root.left == None:\n            print("nothing here")\n            root.left = key\n        else:\n            print("something here")\n            root.left.val = insert(root.left, key)\n    return root', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 14}, {'action': 'move-right', 'root': 12, 'key': 14}, {'action': 'move-left', 'root': 15, 'key': 14}, {'action': 'move-right', 'root': 13, 'key': 14}, {'action': 'insert', 'root': -1, 'key': 14}], '1': [{'action': 'move-right', 'root': 5, 'key': 6}, {'action': 'move-left', 'root': 7, 'key': 6}, {'action': 'insert', 'root': -1, 'key': 6}], '2': [{'action': 'move-left', 'root': 8, 'key': 2}, {'action': 'move-left', 'root': 3, 'key': 2}, {'action': 'move-right', 'root': 1, 'key': 2}, {'action': 'insert', 'root': -1, 'key': 2}], '3': [{'action': 'move-left', 'root': 50, 'key': 43}, {'action': 'move-right', 'root': 17, 'key': 43}, {'action': 'move-right', 'root': 23, 'key': 43}, {'action': 'insert', 'root': -1, 'key': 43}], '4': [{'action': 'move-right', 'root': 5, 'key': 9}, {'action': 'move-right', 'root': 7, 'key': 9}, {'action': 'insert', 'root': -1, 'key': 9}], '5': [{'action': 'move-right', 'root': 8, 'key': 15}, {'action': 'move-right', 'root': 10, 'key': 15}, {'action': 'move-right', 'root': 12, 'key': 15}, {'action': 'move-right', 'root': 13, 'key': 15}, {'action': 'insert', 'root': -1, 'key': 15}], '6': [{'action': 'move-left', 'root': 50, 'key': 43}, {'action': 'move-right', 'root': 17, 'key': 43}, {'action': 'move-right', 'root': 23, 'key': 43}, {'action': 'insert', 'root': -1, 'key': 43}]}}}
2021-02-22 17:17:11.205758,insert,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root == None:\n        return False   \n    if root.val == None:\n        return False   \n    elif root.val == key:\n        return True\n    else:\n        if key < root.val:\n            return search(root.left, key)\n        else:\n            return search(root.right, key)\n    \n#    else:\n#        left = False\n#        if (root.left != None):\n#            left = search(root.left, key) \n#            \n#        right = False\n#        if (root.right != None):\n#            right = search(root.right, key)\n#       \n#        return (left or right)', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 11}, {'action': 'move-left', 'root': 12, 'key': 11}, {'action': 'move-right', 'root': 9, 'key': 11}, {'action': 'move-right', 'root': 10, 'key': 11}, {'action': 'return-false', 'root': -1, 'key': 11}], '1': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '2': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-false', 'root': -1, 'key': 30}], '3': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '4': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-true', 'root': -1, 'key': 30}]}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    print("Root:" + str(root.val))\n    if root == None or root.val == None:\n        return root\n    \n    if key > root.val:\n        print("Right")\n        if root.right.val == None:\n            root.right.val = key\n        else:\n            root.right.val = insert(root.right, key)\n    else:\n        print("Left")\n        if root.left == None:\n            print("nothing here")\n            print(root.left)\n            root.left = key\n        else:\n            print("something here")\n            root.left.val = insert(root.left, key)\n    return root', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 14}, {'action': 'move-right', 'root': 12, 'key': 14}, {'action': 'move-left', 'root': 15, 'key': 14}, {'action': 'move-right', 'root': 13, 'key': 14}, {'action': 'insert', 'root': -1, 'key': 14}], '1': [{'action': 'move-right', 'root': 5, 'key': 6}, {'action': 'move-left', 'root': 7, 'key': 6}, {'action': 'insert', 'root': -1, 'key': 6}], '2': [{'action': 'move-left', 'root': 8, 'key': 2}, {'action': 'move-left', 'root': 3, 'key': 2}, {'action': 'move-right', 'root': 1, 'key': 2}, {'action': 'insert', 'root': -1, 'key': 2}], '3': [{'action': 'move-left', 'root': 50, 'key': 43}, {'action': 'move-right', 'root': 17, 'key': 43}, {'action': 'move-right', 'root': 23, 'key': 43}, {'action': 'insert', 'root': -1, 'key': 43}], '4': [{'action': 'move-right', 'root': 5, 'key': 9}, {'action': 'move-right', 'root': 7, 'key': 9}, {'action': 'insert', 'root': -1, 'key': 9}], '5': [{'action': 'move-right', 'root': 8, 'key': 15}, {'action': 'move-right', 'root': 10, 'key': 15}, {'action': 'move-right', 'root': 12, 'key': 15}, {'action': 'move-right', 'root': 13, 'key': 15}, {'action': 'insert', 'root': -1, 'key': 15}], '6': [{'action': 'move-left', 'root': 50, 'key': 43}, {'action': 'move-right', 'root': 17, 'key': 43}, {'action': 'move-right', 'root': 23, 'key': 43}, {'action': 'insert', 'root': -1, 'key': 43}]}}}
2021-02-22 17:17:35.455278,insert,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root == None:\n        return False   \n    if root.val == None:\n        return False   \n    elif root.val == key:\n        return True\n    else:\n        if key < root.val:\n            return search(root.left, key)\n        else:\n            return search(root.right, key)\n    \n#    else:\n#        left = False\n#        if (root.left != None):\n#            left = search(root.left, key) \n#            \n#        right = False\n#        if (root.right != None):\n#            right = search(root.right, key)\n#       \n#        return (left or right)', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 11}, {'action': 'move-left', 'root': 12, 'key': 11}, {'action': 'move-right', 'root': 9, 'key': 11}, {'action': 'move-right', 'root': 10, 'key': 11}, {'action': 'return-false', 'root': -1, 'key': 11}], '1': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '2': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-false', 'root': -1, 'key': 30}], '3': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '4': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-true', 'root': -1, 'key': 30}]}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    print("Root:" + str(root.val))\n    if root == None or root.val == None:\n        return root\n    \n    if key > root.val:\n        print("Right")\n        if root.right.val == None:\n            root.right.val = key\n        else:\n            root.right.val = insert(root.right, key)\n    else:\n        print("Left")\n        if root.left == None:\n            print("nothing here")\n            root.left = key\n        else:\n            print("something here")\n            root.left.val = insert(root.left, key)\n    return root', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 14}, {'action': 'move-right', 'root': 12, 'key': 14}, {'action': 'move-left', 'root': 15, 'key': 14}, {'action': 'move-right', 'root': 13, 'key': 14}, {'action': 'insert', 'root': -1, 'key': 14}], '1': [{'action': 'move-right', 'root': 5, 'key': 6}, {'action': 'move-left', 'root': 7, 'key': 6}, {'action': 'insert', 'root': -1, 'key': 6}], '2': [{'action': 'move-left', 'root': 8, 'key': 2}, {'action': 'move-left', 'root': 3, 'key': 2}, {'action': 'move-right', 'root': 1, 'key': 2}, {'action': 'insert', 'root': -1, 'key': 2}], '3': [{'action': 'move-left', 'root': 50, 'key': 43}, {'action': 'move-right', 'root': 17, 'key': 43}, {'action': 'move-right', 'root': 23, 'key': 43}, {'action': 'insert', 'root': -1, 'key': 43}], '4': [{'action': 'move-right', 'root': 5, 'key': 9}, {'action': 'move-right', 'root': 7, 'key': 9}, {'action': 'insert', 'root': -1, 'key': 9}], '5': [{'action': 'move-right', 'root': 8, 'key': 15}, {'action': 'move-right', 'root': 10, 'key': 15}, {'action': 'move-right', 'root': 12, 'key': 15}, {'action': 'move-right', 'root': 13, 'key': 15}, {'action': 'insert', 'root': -1, 'key': 15}], '6': [{'action': 'move-left', 'root': 50, 'key': 43}, {'action': 'move-right', 'root': 17, 'key': 43}, {'action': 'move-right', 'root': 23, 'key': 43}, {'action': 'insert', 'root': -1, 'key': 43}]}}}
2021-02-22 17:17:41.733598,insert,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root == None:\n        return False   \n    if root.val == None:\n        return False   \n    elif root.val == key:\n        return True\n    else:\n        if key < root.val:\n            return search(root.left, key)\n        else:\n            return search(root.right, key)\n    \n#    else:\n#        left = False\n#        if (root.left != None):\n#            left = search(root.left, key) \n#            \n#        right = False\n#        if (root.right != None):\n#            right = search(root.right, key)\n#       \n#        return (left or right)', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 11}, {'action': 'move-left', 'root': 12, 'key': 11}, {'action': 'move-right', 'root': 9, 'key': 11}, {'action': 'move-right', 'root': 10, 'key': 11}, {'action': 'return-false', 'root': -1, 'key': 11}], '1': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '2': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-false', 'root': -1, 'key': 30}], '3': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '4': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-true', 'root': -1, 'key': 30}]}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    print("Root:" + str(root.val))\n    if root == None or root.val == None:\n        return root\n    \n    if key > root.val:\n        print("Right")\n        if root.right.val == None:\n            root.right.val = key\n        else:\n            root.right.val = insert(root.right, key)\n    else:\n        print("Left")\n        if root.left == None:\n            print("nothing here")\n            root.left = int(key)\n        else:\n            print("something here")\n            root.left.val = insert(root.left, key)\n    return root', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 14}, {'action': 'move-right', 'root': 12, 'key': 14}, {'action': 'move-left', 'root': 15, 'key': 14}, {'action': 'move-right', 'root': 13, 'key': 14}, {'action': 'insert', 'root': -1, 'key': 14}], '1': [{'action': 'move-right', 'root': 5, 'key': 6}, {'action': 'move-left', 'root': 7, 'key': 6}, {'action': 'insert', 'root': -1, 'key': 6}], '2': [{'action': 'move-left', 'root': 8, 'key': 2}, {'action': 'move-left', 'root': 3, 'key': 2}, {'action': 'move-right', 'root': 1, 'key': 2}, {'action': 'insert', 'root': -1, 'key': 2}], '3': [{'action': 'move-left', 'root': 50, 'key': 43}, {'action': 'move-right', 'root': 17, 'key': 43}, {'action': 'move-right', 'root': 23, 'key': 43}, {'action': 'insert', 'root': -1, 'key': 43}], '4': [{'action': 'move-right', 'root': 5, 'key': 9}, {'action': 'move-right', 'root': 7, 'key': 9}, {'action': 'insert', 'root': -1, 'key': 9}], '5': [{'action': 'move-right', 'root': 8, 'key': 15}, {'action': 'move-right', 'root': 10, 'key': 15}, {'action': 'move-right', 'root': 12, 'key': 15}, {'action': 'move-right', 'root': 13, 'key': 15}, {'action': 'insert', 'root': -1, 'key': 15}], '6': [{'action': 'move-left', 'root': 50, 'key': 43}, {'action': 'move-right', 'root': 17, 'key': 43}, {'action': 'move-right', 'root': 23, 'key': 43}, {'action': 'insert', 'root': -1, 'key': 43}]}}}
2021-02-22 17:17:42.785220,insert,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root == None:\n        return False   \n    if root.val == None:\n        return False   \n    elif root.val == key:\n        return True\n    else:\n        if key < root.val:\n            return search(root.left, key)\n        else:\n            return search(root.right, key)\n    \n#    else:\n#        left = False\n#        if (root.left != None):\n#            left = search(root.left, key) \n#            \n#        right = False\n#        if (root.right != None):\n#            right = search(root.right, key)\n#       \n#        return (left or right)', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 11}, {'action': 'move-left', 'root': 12, 'key': 11}, {'action': 'move-right', 'root': 9, 'key': 11}, {'action': 'move-right', 'root': 10, 'key': 11}, {'action': 'return-false', 'root': -1, 'key': 11}], '1': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '2': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-false', 'root': -1, 'key': 30}], '3': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '4': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-true', 'root': -1, 'key': 30}]}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    print("Root:" + str(root.val))\n    if root == None or root.val == None:\n        return root\n    \n    if key > root.val:\n        print("Right")\n        if root.right.val == None:\n            root.right.val = key\n        else:\n            root.right.val = insert(root.right, key)\n    else:\n        print("Left")\n        if root.left == None:\n            print("nothing here")\n            root.left = int(key)\n        else:\n            print("something here")\n            root.left.val = insert(root.left, key)\n    return root', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 14}, {'action': 'move-right', 'root': 12, 'key': 14}, {'action': 'move-left', 'root': 15, 'key': 14}, {'action': 'move-right', 'root': 13, 'key': 14}, {'action': 'insert', 'root': -1, 'key': 14}], '1': [{'action': 'move-right', 'root': 5, 'key': 6}, {'action': 'move-left', 'root': 7, 'key': 6}, {'action': 'insert', 'root': -1, 'key': 6}], '2': [{'action': 'move-left', 'root': 8, 'key': 2}, {'action': 'move-left', 'root': 3, 'key': 2}, {'action': 'move-right', 'root': 1, 'key': 2}, {'action': 'insert', 'root': -1, 'key': 2}], '3': [{'action': 'move-left', 'root': 50, 'key': 43}, {'action': 'move-right', 'root': 17, 'key': 43}, {'action': 'move-right', 'root': 23, 'key': 43}, {'action': 'insert', 'root': -1, 'key': 43}], '4': [{'action': 'move-right', 'root': 5, 'key': 9}, {'action': 'move-right', 'root': 7, 'key': 9}, {'action': 'insert', 'root': -1, 'key': 9}], '5': [{'action': 'move-right', 'root': 8, 'key': 15}, {'action': 'move-right', 'root': 10, 'key': 15}, {'action': 'move-right', 'root': 12, 'key': 15}, {'action': 'move-right', 'root': 13, 'key': 15}, {'action': 'insert', 'root': -1, 'key': 15}], '6': [{'action': 'move-left', 'root': 50, 'key': 43}, {'action': 'move-right', 'root': 17, 'key': 43}, {'action': 'move-right', 'root': 23, 'key': 43}, {'action': 'insert', 'root': -1, 'key': 43}]}}}
2021-02-22 17:18:20.198431,insert,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root == None:\n        return False   \n    if root.val == None:\n        return False   \n    elif root.val == key:\n        return True\n    else:\n        if key < root.val:\n            return search(root.left, key)\n        else:\n            return search(root.right, key)\n    \n#    else:\n#        left = False\n#        if (root.left != None):\n#            left = search(root.left, key) \n#            \n#        right = False\n#        if (root.right != None):\n#            right = search(root.right, key)\n#       \n#        return (left or right)', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 11}, {'action': 'move-left', 'root': 12, 'key': 11}, {'action': 'move-right', 'root': 9, 'key': 11}, {'action': 'move-right', 'root': 10, 'key': 11}, {'action': 'return-false', 'root': -1, 'key': 11}], '1': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '2': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-false', 'root': -1, 'key': 30}], '3': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '4': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-true', 'root': -1, 'key': 30}]}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    print("Root:" + str(root.val))\n    if root == None or root.val == None:\n        return root\n    \n    if key > root.val:\n        print("Right")\n        if root.right.val == None:\n            root.right.val = key\n        else:\n            root.right.val = insert(root.right, key)\n    else:\n        print("Left")\n        if root.left == None:\n            print("nothing here")\n            print(key)\n            root.left = int(key)\n        else:\n            print("something here")\n            root.left.val = insert(root.left, key)\n    return root', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 14}, {'action': 'move-right', 'root': 12, 'key': 14}, {'action': 'move-left', 'root': 15, 'key': 14}, {'action': 'move-right', 'root': 13, 'key': 14}, {'action': 'insert', 'root': -1, 'key': 14}], '1': [{'action': 'move-right', 'root': 5, 'key': 6}, {'action': 'move-left', 'root': 7, 'key': 6}, {'action': 'insert', 'root': -1, 'key': 6}], '2': [{'action': 'move-left', 'root': 8, 'key': 2}, {'action': 'move-left', 'root': 3, 'key': 2}, {'action': 'move-right', 'root': 1, 'key': 2}, {'action': 'insert', 'root': -1, 'key': 2}], '3': [{'action': 'move-left', 'root': 50, 'key': 43}, {'action': 'move-right', 'root': 17, 'key': 43}, {'action': 'move-right', 'root': 23, 'key': 43}, {'action': 'insert', 'root': -1, 'key': 43}], '4': [{'action': 'move-right', 'root': 5, 'key': 9}, {'action': 'move-right', 'root': 7, 'key': 9}, {'action': 'insert', 'root': -1, 'key': 9}], '5': [{'action': 'move-right', 'root': 8, 'key': 15}, {'action': 'move-right', 'root': 10, 'key': 15}, {'action': 'move-right', 'root': 12, 'key': 15}, {'action': 'move-right', 'root': 13, 'key': 15}, {'action': 'insert', 'root': -1, 'key': 15}], '6': [{'action': 'move-left', 'root': 50, 'key': 43}, {'action': 'move-right', 'root': 17, 'key': 43}, {'action': 'move-right', 'root': 23, 'key': 43}, {'action': 'insert', 'root': -1, 'key': 43}]}}}
2021-02-22 17:18:33.988062,insert,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root == None:\n        return False   \n    if root.val == None:\n        return False   \n    elif root.val == key:\n        return True\n    else:\n        if key < root.val:\n            return search(root.left, key)\n        else:\n            return search(root.right, key)\n    \n#    else:\n#        left = False\n#        if (root.left != None):\n#            left = search(root.left, key) \n#            \n#        right = False\n#        if (root.right != None):\n#            right = search(root.right, key)\n#       \n#        return (left or right)', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 11}, {'action': 'move-left', 'root': 12, 'key': 11}, {'action': 'move-right', 'root': 9, 'key': 11}, {'action': 'move-right', 'root': 10, 'key': 11}, {'action': 'return-false', 'root': -1, 'key': 11}], '1': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '2': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-false', 'root': -1, 'key': 30}], '3': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '4': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-true', 'root': -1, 'key': 30}]}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    print("Root:" + str(root.val))\n    if root == None or root.val == None:\n        return root\n    \n    if key > root.val:\n        print("Right")\n        if root.right.val == None:\n            root.right.val = key\n        else:\n            root.right.val = insert(root.right, key)\n    else:\n        print("Left")\n        if root.left == None:\n            print("nothing here")\n            root.left = int(key)\n        else:\n            print("something here")\n            root.left.val = insert(root.left, key)\n    return root', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 14}, {'action': 'move-right', 'root': 12, 'key': 14}, {'action': 'move-left', 'root': 15, 'key': 14}, {'action': 'move-right', 'root': 13, 'key': 14}, {'action': 'insert', 'root': -1, 'key': 14}], '1': [{'action': 'move-right', 'root': 5, 'key': 6}, {'action': 'move-left', 'root': 7, 'key': 6}, {'action': 'insert', 'root': -1, 'key': 6}], '2': [{'action': 'move-left', 'root': 8, 'key': 2}, {'action': 'move-left', 'root': 3, 'key': 2}, {'action': 'move-right', 'root': 1, 'key': 2}, {'action': 'insert', 'root': -1, 'key': 2}], '3': [{'action': 'move-left', 'root': 50, 'key': 43}, {'action': 'move-right', 'root': 17, 'key': 43}, {'action': 'move-right', 'root': 23, 'key': 43}, {'action': 'insert', 'root': -1, 'key': 43}], '4': [{'action': 'move-right', 'root': 5, 'key': 9}, {'action': 'move-right', 'root': 7, 'key': 9}, {'action': 'insert', 'root': -1, 'key': 9}], '5': [{'action': 'move-right', 'root': 8, 'key': 15}, {'action': 'move-right', 'root': 10, 'key': 15}, {'action': 'move-right', 'root': 12, 'key': 15}, {'action': 'move-right', 'root': 13, 'key': 15}, {'action': 'insert', 'root': -1, 'key': 15}], '6': [{'action': 'move-left', 'root': 50, 'key': 43}, {'action': 'move-right', 'root': 17, 'key': 43}, {'action': 'move-right', 'root': 23, 'key': 43}, {'action': 'insert', 'root': -1, 'key': 43}]}}}
2021-02-22 17:19:06.898152,insert,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root == None:\n        return False   \n    if root.val == None:\n        return False   \n    elif root.val == key:\n        return True\n    else:\n        if key < root.val:\n            return search(root.left, key)\n        else:\n            return search(root.right, key)\n    \n#    else:\n#        left = False\n#        if (root.left != None):\n#            left = search(root.left, key) \n#            \n#        right = False\n#        if (root.right != None):\n#            right = search(root.right, key)\n#       \n#        return (left or right)', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 11}, {'action': 'move-left', 'root': 12, 'key': 11}, {'action': 'move-right', 'root': 9, 'key': 11}, {'action': 'move-right', 'root': 10, 'key': 11}, {'action': 'return-false', 'root': -1, 'key': 11}], '1': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '2': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-false', 'root': -1, 'key': 30}], '3': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '4': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-true', 'root': -1, 'key': 30}]}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    print("Root:" + str(root.val))\n    if root == None or root.val == None:\n        return root\n    \n    if key > root.val:\n        print("Right")\n        if root.right.val == None:\n            root.right.val = key\n        else:\n            root.right.val = insert(root.right, key)\n    else:\n        print("Left")\n        if root.left == None:\n            print("nothing here")\n            root.left = int(key)\n        else:\n            print("something here")\n            root.left.val = insert(root.left, key)\n    return root', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 14}, {'action': 'move-right', 'root': 12, 'key': 14}, {'action': 'move-left', 'root': 15, 'key': 14}, {'action': 'move-right', 'root': 13, 'key': 14}, {'action': 'insert', 'root': -1, 'key': 14}], '1': [{'action': 'move-right', 'root': 5, 'key': 6}, {'action': 'move-left', 'root': 7, 'key': 6}, {'action': 'insert', 'root': -1, 'key': 6}], '2': [{'action': 'move-left', 'root': 8, 'key': 2}, {'action': 'move-left', 'root': 3, 'key': 2}, {'action': 'move-right', 'root': 1, 'key': 2}, {'action': 'insert', 'root': -1, 'key': 2}], '3': [{'action': 'move-left', 'root': 50, 'key': 43}, {'action': 'move-right', 'root': 17, 'key': 43}, {'action': 'move-right', 'root': 23, 'key': 43}, {'action': 'insert', 'root': -1, 'key': 43}], '4': [{'action': 'move-right', 'root': 5, 'key': 9}, {'action': 'move-right', 'root': 7, 'key': 9}, {'action': 'insert', 'root': -1, 'key': 9}], '5': [{'action': 'move-right', 'root': 8, 'key': 15}, {'action': 'move-right', 'root': 10, 'key': 15}, {'action': 'move-right', 'root': 12, 'key': 15}, {'action': 'move-right', 'root': 13, 'key': 15}, {'action': 'insert', 'root': -1, 'key': 15}], '6': [{'action': 'move-left', 'root': 50, 'key': 43}, {'action': 'move-right', 'root': 17, 'key': 43}, {'action': 'move-right', 'root': 23, 'key': 43}, {'action': 'insert', 'root': -1, 'key': 43}]}}}
2021-02-22 17:19:40.019792,insert,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root == None:\n        return False   \n    if root.val == None:\n        return False   \n    elif root.val == key:\n        return True\n    else:\n        if key < root.val:\n            return search(root.left, key)\n        else:\n            return search(root.right, key)\n    \n#    else:\n#        left = False\n#        if (root.left != None):\n#            left = search(root.left, key) \n#            \n#        right = False\n#        if (root.right != None):\n#            right = search(root.right, key)\n#       \n#        return (left or right)', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 11}, {'action': 'move-left', 'root': 12, 'key': 11}, {'action': 'move-right', 'root': 9, 'key': 11}, {'action': 'move-right', 'root': 10, 'key': 11}, {'action': 'return-false', 'root': -1, 'key': 11}], '1': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '2': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-false', 'root': -1, 'key': 30}], '3': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '4': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-true', 'root': -1, 'key': 30}]}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    print("Root:" + str(root.val))\n    if root == None or root.val == None:\n        return root\n    \n    if key > root.val:\n        print("Right")\n        if root.right.val == None:\n            root.right.val = key\n        else:\n            root.right.val = insert(root.right, key)\n    else:\n        print("Left")\n        if root.left == None:\n            print("nothing here")\n            root.left = Node(key)\n        else:\n            print("something here")\n            root.left.val = insert(root.left, key)\n    return root', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 14}, {'action': 'move-right', 'root': 12, 'key': 14}, {'action': 'move-left', 'root': 15, 'key': 14}, {'action': 'move-right', 'root': 13, 'key': 14}, {'action': 'insert', 'root': -1, 'key': 14}], '1': [{'action': 'move-right', 'root': 5, 'key': 6}, {'action': 'move-left', 'root': 7, 'key': 6}, {'action': 'insert', 'root': -1, 'key': 6}], '2': [{'action': 'move-left', 'root': 8, 'key': 2}, {'action': 'move-left', 'root': 3, 'key': 2}, {'action': 'move-right', 'root': 1, 'key': 2}, {'action': 'insert', 'root': -1, 'key': 2}], '3': [{'action': 'move-left', 'root': 50, 'key': 43}, {'action': 'move-right', 'root': 17, 'key': 43}, {'action': 'move-right', 'root': 23, 'key': 43}, {'action': 'insert', 'root': -1, 'key': 43}], '4': [{'action': 'move-right', 'root': 5, 'key': 9}, {'action': 'move-right', 'root': 7, 'key': 9}, {'action': 'insert', 'root': -1, 'key': 9}], '5': [{'action': 'move-right', 'root': 8, 'key': 15}, {'action': 'move-right', 'root': 10, 'key': 15}, {'action': 'move-right', 'root': 12, 'key': 15}, {'action': 'move-right', 'root': 13, 'key': 15}, {'action': 'insert', 'root': -1, 'key': 15}], '6': [{'action': 'move-left', 'root': 50, 'key': 43}, {'action': 'move-right', 'root': 17, 'key': 43}, {'action': 'move-right', 'root': 23, 'key': 43}, {'action': 'insert', 'root': -1, 'key': 43}]}}}
2021-02-22 17:19:40.568488,insert,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root == None:\n        return False   \n    if root.val == None:\n        return False   \n    elif root.val == key:\n        return True\n    else:\n        if key < root.val:\n            return search(root.left, key)\n        else:\n            return search(root.right, key)\n    \n#    else:\n#        left = False\n#        if (root.left != None):\n#            left = search(root.left, key) \n#            \n#        right = False\n#        if (root.right != None):\n#            right = search(root.right, key)\n#       \n#        return (left or right)', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 11}, {'action': 'move-left', 'root': 12, 'key': 11}, {'action': 'move-right', 'root': 9, 'key': 11}, {'action': 'move-right', 'root': 10, 'key': 11}, {'action': 'return-false', 'root': -1, 'key': 11}], '1': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '2': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-false', 'root': -1, 'key': 30}], '3': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '4': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-true', 'root': -1, 'key': 30}]}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    print("Root:" + str(root.val))\n    if root == None or root.val == None:\n        return root\n    \n    if key > root.val:\n        print("Right")\n        if root.right.val == None:\n            root.right.val = key\n        else:\n            root.right.val = insert(root.right, key)\n    else:\n        print("Left")\n        if root.left == None:\n            print("nothing here")\n            root.left = Node(key)\n        else:\n            print("something here")\n            root.left.val = insert(root.left, key)\n    return root', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 14}, {'action': 'move-right', 'root': 12, 'key': 14}, {'action': 'move-left', 'root': 15, 'key': 14}, {'action': 'move-right', 'root': 13, 'key': 14}, {'action': 'insert', 'root': -1, 'key': 14}], '1': [{'action': 'move-right', 'root': 5, 'key': 6}, {'action': 'move-left', 'root': 7, 'key': 6}, {'action': 'insert', 'root': -1, 'key': 6}], '2': [{'action': 'move-left', 'root': 8, 'key': 2}, {'action': 'move-left', 'root': 3, 'key': 2}, {'action': 'move-right', 'root': 1, 'key': 2}, {'action': 'insert', 'root': -1, 'key': 2}], '3': [{'action': 'move-left', 'root': 50, 'key': 43}, {'action': 'move-right', 'root': 17, 'key': 43}, {'action': 'move-right', 'root': 23, 'key': 43}, {'action': 'insert', 'root': -1, 'key': 43}], '4': [{'action': 'move-right', 'root': 5, 'key': 9}, {'action': 'move-right', 'root': 7, 'key': 9}, {'action': 'insert', 'root': -1, 'key': 9}], '5': [{'action': 'move-right', 'root': 8, 'key': 15}, {'action': 'move-right', 'root': 10, 'key': 15}, {'action': 'move-right', 'root': 12, 'key': 15}, {'action': 'move-right', 'root': 13, 'key': 15}, {'action': 'insert', 'root': -1, 'key': 15}], '6': [{'action': 'move-left', 'root': 50, 'key': 43}, {'action': 'move-right', 'root': 17, 'key': 43}, {'action': 'move-right', 'root': 23, 'key': 43}, {'action': 'insert', 'root': -1, 'key': 43}]}}}
2021-02-22 17:19:41.021600,insert,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root == None:\n        return False   \n    if root.val == None:\n        return False   \n    elif root.val == key:\n        return True\n    else:\n        if key < root.val:\n            return search(root.left, key)\n        else:\n            return search(root.right, key)\n    \n#    else:\n#        left = False\n#        if (root.left != None):\n#            left = search(root.left, key) \n#            \n#        right = False\n#        if (root.right != None):\n#            right = search(root.right, key)\n#       \n#        return (left or right)', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 11}, {'action': 'move-left', 'root': 12, 'key': 11}, {'action': 'move-right', 'root': 9, 'key': 11}, {'action': 'move-right', 'root': 10, 'key': 11}, {'action': 'return-false', 'root': -1, 'key': 11}], '1': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '2': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-false', 'root': -1, 'key': 30}], '3': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '4': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-true', 'root': -1, 'key': 30}]}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    print("Root:" + str(root.val))\n    if root == None or root.val == None:\n        return root\n    \n    if key > root.val:\n        print("Right")\n        if root.right.val == None:\n            root.right.val = key\n        else:\n            root.right.val = insert(root.right, key)\n    else:\n        print("Left")\n        if root.left == None:\n            print("nothing here")\n            root.left = Node(key)\n        else:\n            print("something here")\n            root.left.val = insert(root.left, key)\n    return root', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 14}, {'action': 'move-right', 'root': 12, 'key': 14}, {'action': 'move-left', 'root': 15, 'key': 14}, {'action': 'move-right', 'root': 13, 'key': 14}, {'action': 'insert', 'root': -1, 'key': 14}], '1': [{'action': 'move-right', 'root': 5, 'key': 6}, {'action': 'move-left', 'root': 7, 'key': 6}, {'action': 'insert', 'root': -1, 'key': 6}], '2': [{'action': 'move-left', 'root': 8, 'key': 2}, {'action': 'move-left', 'root': 3, 'key': 2}, {'action': 'move-right', 'root': 1, 'key': 2}, {'action': 'insert', 'root': -1, 'key': 2}], '3': [{'action': 'move-left', 'root': 50, 'key': 43}, {'action': 'move-right', 'root': 17, 'key': 43}, {'action': 'move-right', 'root': 23, 'key': 43}, {'action': 'insert', 'root': -1, 'key': 43}], '4': [{'action': 'move-right', 'root': 5, 'key': 9}, {'action': 'move-right', 'root': 7, 'key': 9}, {'action': 'insert', 'root': -1, 'key': 9}], '5': [{'action': 'move-right', 'root': 8, 'key': 15}, {'action': 'move-right', 'root': 10, 'key': 15}, {'action': 'move-right', 'root': 12, 'key': 15}, {'action': 'move-right', 'root': 13, 'key': 15}, {'action': 'insert', 'root': -1, 'key': 15}], '6': [{'action': 'move-left', 'root': 50, 'key': 43}, {'action': 'move-right', 'root': 17, 'key': 43}, {'action': 'move-right', 'root': 23, 'key': 43}, {'action': 'insert', 'root': -1, 'key': 43}]}}}
2021-02-22 17:19:41.336607,insert,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root == None:\n        return False   \n    if root.val == None:\n        return False   \n    elif root.val == key:\n        return True\n    else:\n        if key < root.val:\n            return search(root.left, key)\n        else:\n            return search(root.right, key)\n    \n#    else:\n#        left = False\n#        if (root.left != None):\n#            left = search(root.left, key) \n#            \n#        right = False\n#        if (root.right != None):\n#            right = search(root.right, key)\n#       \n#        return (left or right)', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 11}, {'action': 'move-left', 'root': 12, 'key': 11}, {'action': 'move-right', 'root': 9, 'key': 11}, {'action': 'move-right', 'root': 10, 'key': 11}, {'action': 'return-false', 'root': -1, 'key': 11}], '1': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '2': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-false', 'root': -1, 'key': 30}], '3': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '4': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-true', 'root': -1, 'key': 30}]}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    print("Root:" + str(root.val))\n    if root == None or root.val == None:\n        return root\n    \n    if key > root.val:\n        print("Right")\n        if root.right.val == None:\n            root.right.val = key\n        else:\n            root.right.val = insert(root.right, key)\n    else:\n        print("Left")\n        if root.left == None:\n            print("nothing here")\n            root.left = Node(key)\n        else:\n            print("something here")\n            root.left.val = insert(root.left, key)\n    return root', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 14}, {'action': 'move-right', 'root': 12, 'key': 14}, {'action': 'move-left', 'root': 15, 'key': 14}, {'action': 'move-right', 'root': 13, 'key': 14}, {'action': 'insert', 'root': -1, 'key': 14}], '1': [{'action': 'move-right', 'root': 5, 'key': 6}, {'action': 'move-left', 'root': 7, 'key': 6}, {'action': 'insert', 'root': -1, 'key': 6}], '2': [{'action': 'move-left', 'root': 8, 'key': 2}, {'action': 'move-left', 'root': 3, 'key': 2}, {'action': 'move-right', 'root': 1, 'key': 2}, {'action': 'insert', 'root': -1, 'key': 2}], '3': [{'action': 'move-left', 'root': 50, 'key': 43}, {'action': 'move-right', 'root': 17, 'key': 43}, {'action': 'move-right', 'root': 23, 'key': 43}, {'action': 'insert', 'root': -1, 'key': 43}], '4': [{'action': 'move-right', 'root': 5, 'key': 9}, {'action': 'move-right', 'root': 7, 'key': 9}, {'action': 'insert', 'root': -1, 'key': 9}], '5': [{'action': 'move-right', 'root': 8, 'key': 15}, {'action': 'move-right', 'root': 10, 'key': 15}, {'action': 'move-right', 'root': 12, 'key': 15}, {'action': 'move-right', 'root': 13, 'key': 15}, {'action': 'insert', 'root': -1, 'key': 15}], '6': [{'action': 'move-left', 'root': 50, 'key': 43}, {'action': 'move-right', 'root': 17, 'key': 43}, {'action': 'move-right', 'root': 23, 'key': 43}, {'action': 'insert', 'root': -1, 'key': 43}]}}}
2021-02-22 17:19:44.966551,insert,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root == None:\n        return False   \n    if root.val == None:\n        return False   \n    elif root.val == key:\n        return True\n    else:\n        if key < root.val:\n            return search(root.left, key)\n        else:\n            return search(root.right, key)\n    \n#    else:\n#        left = False\n#        if (root.left != None):\n#            left = search(root.left, key) \n#            \n#        right = False\n#        if (root.right != None):\n#            right = search(root.right, key)\n#       \n#        return (left or right)', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 11}, {'action': 'move-left', 'root': 12, 'key': 11}, {'action': 'move-right', 'root': 9, 'key': 11}, {'action': 'move-right', 'root': 10, 'key': 11}, {'action': 'return-false', 'root': -1, 'key': 11}], '1': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '2': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-false', 'root': -1, 'key': 30}], '3': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '4': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-true', 'root': -1, 'key': 30}]}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    print("Root:" + str(root.val))\n    if root == None or root.val == None:\n        return root\n    \n    if key > root.val:\n        print("Right")\n        if root.right.val == None:\n            root.right.val = key\n        else:\n            root.right.val = insert(root.right, key)\n    else:\n        print("Left")\n        if root.left == None:\n            print("nothing here")\n            root.left = 5\n        else:\n            print("something here")\n            root.left.val = insert(root.left, key)\n    return root', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 14}, {'action': 'move-right', 'root': 12, 'key': 14}, {'action': 'move-left', 'root': 15, 'key': 14}, {'action': 'move-right', 'root': 13, 'key': 14}, {'action': 'insert', 'root': -1, 'key': 14}], '1': [{'action': 'move-right', 'root': 5, 'key': 6}, {'action': 'move-left', 'root': 7, 'key': 6}, {'action': 'insert', 'root': -1, 'key': 6}], '2': [{'action': 'move-left', 'root': 8, 'key': 2}, {'action': 'move-left', 'root': 3, 'key': 2}, {'action': 'move-right', 'root': 1, 'key': 2}, {'action': 'insert', 'root': -1, 'key': 2}], '3': [{'action': 'move-left', 'root': 50, 'key': 43}, {'action': 'move-right', 'root': 17, 'key': 43}, {'action': 'move-right', 'root': 23, 'key': 43}, {'action': 'insert', 'root': -1, 'key': 43}], '4': [{'action': 'move-right', 'root': 5, 'key': 9}, {'action': 'move-right', 'root': 7, 'key': 9}, {'action': 'insert', 'root': -1, 'key': 9}], '5': [{'action': 'move-right', 'root': 8, 'key': 15}, {'action': 'move-right', 'root': 10, 'key': 15}, {'action': 'move-right', 'root': 12, 'key': 15}, {'action': 'move-right', 'root': 13, 'key': 15}, {'action': 'insert', 'root': -1, 'key': 15}], '6': [{'action': 'move-left', 'root': 50, 'key': 43}, {'action': 'move-right', 'root': 17, 'key': 43}, {'action': 'move-right', 'root': 23, 'key': 43}, {'action': 'insert', 'root': -1, 'key': 43}]}}}
2021-02-22 17:19:45.643524,insert,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root == None:\n        return False   \n    if root.val == None:\n        return False   \n    elif root.val == key:\n        return True\n    else:\n        if key < root.val:\n            return search(root.left, key)\n        else:\n            return search(root.right, key)\n    \n#    else:\n#        left = False\n#        if (root.left != None):\n#            left = search(root.left, key) \n#            \n#        right = False\n#        if (root.right != None):\n#            right = search(root.right, key)\n#       \n#        return (left or right)', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 11}, {'action': 'move-left', 'root': 12, 'key': 11}, {'action': 'move-right', 'root': 9, 'key': 11}, {'action': 'move-right', 'root': 10, 'key': 11}, {'action': 'return-false', 'root': -1, 'key': 11}], '1': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '2': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-false', 'root': -1, 'key': 30}], '3': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '4': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-true', 'root': -1, 'key': 30}]}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    print("Root:" + str(root.val))\n    if root == None or root.val == None:\n        return root\n    \n    if key > root.val:\n        print("Right")\n        if root.right.val == None:\n            root.right.val = key\n        else:\n            root.right.val = insert(root.right, key)\n    else:\n        print("Left")\n        if root.left == None:\n            print("nothing here")\n            root.left = 5\n        else:\n            print("something here")\n            root.left.val = insert(root.left, key)\n    return root', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 14}, {'action': 'move-right', 'root': 12, 'key': 14}, {'action': 'move-left', 'root': 15, 'key': 14}, {'action': 'move-right', 'root': 13, 'key': 14}, {'action': 'insert', 'root': -1, 'key': 14}], '1': [{'action': 'move-right', 'root': 5, 'key': 6}, {'action': 'move-left', 'root': 7, 'key': 6}, {'action': 'insert', 'root': -1, 'key': 6}], '2': [{'action': 'move-left', 'root': 8, 'key': 2}, {'action': 'move-left', 'root': 3, 'key': 2}, {'action': 'move-right', 'root': 1, 'key': 2}, {'action': 'insert', 'root': -1, 'key': 2}], '3': [{'action': 'move-left', 'root': 50, 'key': 43}, {'action': 'move-right', 'root': 17, 'key': 43}, {'action': 'move-right', 'root': 23, 'key': 43}, {'action': 'insert', 'root': -1, 'key': 43}], '4': [{'action': 'move-right', 'root': 5, 'key': 9}, {'action': 'move-right', 'root': 7, 'key': 9}, {'action': 'insert', 'root': -1, 'key': 9}], '5': [{'action': 'move-right', 'root': 8, 'key': 15}, {'action': 'move-right', 'root': 10, 'key': 15}, {'action': 'move-right', 'root': 12, 'key': 15}, {'action': 'move-right', 'root': 13, 'key': 15}, {'action': 'insert', 'root': -1, 'key': 15}], '6': [{'action': 'move-left', 'root': 50, 'key': 43}, {'action': 'move-right', 'root': 17, 'key': 43}, {'action': 'move-right', 'root': 23, 'key': 43}, {'action': 'insert', 'root': -1, 'key': 43}]}}}
2021-02-22 17:19:45.822809,insert,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root == None:\n        return False   \n    if root.val == None:\n        return False   \n    elif root.val == key:\n        return True\n    else:\n        if key < root.val:\n            return search(root.left, key)\n        else:\n            return search(root.right, key)\n    \n#    else:\n#        left = False\n#        if (root.left != None):\n#            left = search(root.left, key) \n#            \n#        right = False\n#        if (root.right != None):\n#            right = search(root.right, key)\n#       \n#        return (left or right)', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 11}, {'action': 'move-left', 'root': 12, 'key': 11}, {'action': 'move-right', 'root': 9, 'key': 11}, {'action': 'move-right', 'root': 10, 'key': 11}, {'action': 'return-false', 'root': -1, 'key': 11}], '1': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '2': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-false', 'root': -1, 'key': 30}], '3': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '4': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-true', 'root': -1, 'key': 30}]}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    print("Root:" + str(root.val))\n    if root == None or root.val == None:\n        return root\n    \n    if key > root.val:\n        print("Right")\n        if root.right.val == None:\n            root.right.val = key\n        else:\n            root.right.val = insert(root.right, key)\n    else:\n        print("Left")\n        if root.left == None:\n            print("nothing here")\n            root.left = 5\n        else:\n            print("something here")\n            root.left.val = insert(root.left, key)\n    return root', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 14}, {'action': 'move-right', 'root': 12, 'key': 14}, {'action': 'move-left', 'root': 15, 'key': 14}, {'action': 'move-right', 'root': 13, 'key': 14}, {'action': 'insert', 'root': -1, 'key': 14}], '1': [{'action': 'move-right', 'root': 5, 'key': 6}, {'action': 'move-left', 'root': 7, 'key': 6}, {'action': 'insert', 'root': -1, 'key': 6}], '2': [{'action': 'move-left', 'root': 8, 'key': 2}, {'action': 'move-left', 'root': 3, 'key': 2}, {'action': 'move-right', 'root': 1, 'key': 2}, {'action': 'insert', 'root': -1, 'key': 2}], '3': [{'action': 'move-left', 'root': 50, 'key': 43}, {'action': 'move-right', 'root': 17, 'key': 43}, {'action': 'move-right', 'root': 23, 'key': 43}, {'action': 'insert', 'root': -1, 'key': 43}], '4': [{'action': 'move-right', 'root': 5, 'key': 9}, {'action': 'move-right', 'root': 7, 'key': 9}, {'action': 'insert', 'root': -1, 'key': 9}], '5': [{'action': 'move-right', 'root': 8, 'key': 15}, {'action': 'move-right', 'root': 10, 'key': 15}, {'action': 'move-right', 'root': 12, 'key': 15}, {'action': 'move-right', 'root': 13, 'key': 15}, {'action': 'insert', 'root': -1, 'key': 15}], '6': [{'action': 'move-left', 'root': 50, 'key': 43}, {'action': 'move-right', 'root': 17, 'key': 43}, {'action': 'move-right', 'root': 23, 'key': 43}, {'action': 'insert', 'root': -1, 'key': 43}]}}}
2021-02-22 17:19:46.067466,insert,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root == None:\n        return False   \n    if root.val == None:\n        return False   \n    elif root.val == key:\n        return True\n    else:\n        if key < root.val:\n            return search(root.left, key)\n        else:\n            return search(root.right, key)\n    \n#    else:\n#        left = False\n#        if (root.left != None):\n#            left = search(root.left, key) \n#            \n#        right = False\n#        if (root.right != None):\n#            right = search(root.right, key)\n#       \n#        return (left or right)', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 11}, {'action': 'move-left', 'root': 12, 'key': 11}, {'action': 'move-right', 'root': 9, 'key': 11}, {'action': 'move-right', 'root': 10, 'key': 11}, {'action': 'return-false', 'root': -1, 'key': 11}], '1': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '2': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-false', 'root': -1, 'key': 30}], '3': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '4': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-true', 'root': -1, 'key': 30}]}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    print("Root:" + str(root.val))\n    if root == None or root.val == None:\n        return root\n    \n    if key > root.val:\n        print("Right")\n        if root.right.val == None:\n            root.right.val = key\n        else:\n            root.right.val = insert(root.right, key)\n    else:\n        print("Left")\n        if root.left == None:\n            print("nothing here")\n            root.left = 5\n        else:\n            print("something here")\n            root.left.val = insert(root.left, key)\n    return root', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 14}, {'action': 'move-right', 'root': 12, 'key': 14}, {'action': 'move-left', 'root': 15, 'key': 14}, {'action': 'move-right', 'root': 13, 'key': 14}, {'action': 'insert', 'root': -1, 'key': 14}], '1': [{'action': 'move-right', 'root': 5, 'key': 6}, {'action': 'move-left', 'root': 7, 'key': 6}, {'action': 'insert', 'root': -1, 'key': 6}], '2': [{'action': 'move-left', 'root': 8, 'key': 2}, {'action': 'move-left', 'root': 3, 'key': 2}, {'action': 'move-right', 'root': 1, 'key': 2}, {'action': 'insert', 'root': -1, 'key': 2}], '3': [{'action': 'move-left', 'root': 50, 'key': 43}, {'action': 'move-right', 'root': 17, 'key': 43}, {'action': 'move-right', 'root': 23, 'key': 43}, {'action': 'insert', 'root': -1, 'key': 43}], '4': [{'action': 'move-right', 'root': 5, 'key': 9}, {'action': 'move-right', 'root': 7, 'key': 9}, {'action': 'insert', 'root': -1, 'key': 9}], '5': [{'action': 'move-right', 'root': 8, 'key': 15}, {'action': 'move-right', 'root': 10, 'key': 15}, {'action': 'move-right', 'root': 12, 'key': 15}, {'action': 'move-right', 'root': 13, 'key': 15}, {'action': 'insert', 'root': -1, 'key': 15}], '6': [{'action': 'move-left', 'root': 50, 'key': 43}, {'action': 'move-right', 'root': 17, 'key': 43}, {'action': 'move-right', 'root': 23, 'key': 43}, {'action': 'insert', 'root': -1, 'key': 43}]}}}
2021-02-22 17:19:52.340156,insert,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root == None:\n        return False   \n    if root.val == None:\n        return False   \n    elif root.val == key:\n        return True\n    else:\n        if key < root.val:\n            return search(root.left, key)\n        else:\n            return search(root.right, key)\n    \n#    else:\n#        left = False\n#        if (root.left != None):\n#            left = search(root.left, key) \n#            \n#        right = False\n#        if (root.right != None):\n#            right = search(root.right, key)\n#       \n#        return (left or right)', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 11}, {'action': 'move-left', 'root': 12, 'key': 11}, {'action': 'move-right', 'root': 9, 'key': 11}, {'action': 'move-right', 'root': 10, 'key': 11}, {'action': 'return-false', 'root': -1, 'key': 11}], '1': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '2': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-false', 'root': -1, 'key': 30}], '3': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '4': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-true', 'root': -1, 'key': 30}]}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    print("Root:" + str(root.val))\n    if root == None or root.val == None:\n        return root\n    \n    if key > root.val:\n        print("Right")\n        if root.right.val == None:\n            root.right.val = key\n        else:\n            root.right.val = insert(root.right, key)\n    else:\n        print("Left")\n        if root.left == None:\n            print("nothing here")\n            root.left = None\n        else:\n            print("something here")\n            root.left.val = insert(root.left, key)\n    return root', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 14}, {'action': 'move-right', 'root': 12, 'key': 14}, {'action': 'move-left', 'root': 15, 'key': 14}, {'action': 'move-right', 'root': 13, 'key': 14}, {'action': 'insert', 'root': -1, 'key': 14}], '1': [{'action': 'move-right', 'root': 5, 'key': 6}, {'action': 'move-left', 'root': 7, 'key': 6}, {'action': 'insert', 'root': -1, 'key': 6}], '2': [{'action': 'move-left', 'root': 8, 'key': 2}, {'action': 'move-left', 'root': 3, 'key': 2}, {'action': 'move-right', 'root': 1, 'key': 2}, {'action': 'insert', 'root': -1, 'key': 2}], '3': [{'action': 'move-left', 'root': 50, 'key': 43}, {'action': 'move-right', 'root': 17, 'key': 43}, {'action': 'move-right', 'root': 23, 'key': 43}, {'action': 'insert', 'root': -1, 'key': 43}], '4': [{'action': 'move-right', 'root': 5, 'key': 9}, {'action': 'move-right', 'root': 7, 'key': 9}, {'action': 'insert', 'root': -1, 'key': 9}], '5': [{'action': 'move-right', 'root': 8, 'key': 15}, {'action': 'move-right', 'root': 10, 'key': 15}, {'action': 'move-right', 'root': 12, 'key': 15}, {'action': 'move-right', 'root': 13, 'key': 15}, {'action': 'insert', 'root': -1, 'key': 15}], '6': [{'action': 'move-left', 'root': 50, 'key': 43}, {'action': 'move-right', 'root': 17, 'key': 43}, {'action': 'move-right', 'root': 23, 'key': 43}, {'action': 'insert', 'root': -1, 'key': 43}]}}}
2021-02-22 17:19:52.736435,insert,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root == None:\n        return False   \n    if root.val == None:\n        return False   \n    elif root.val == key:\n        return True\n    else:\n        if key < root.val:\n            return search(root.left, key)\n        else:\n            return search(root.right, key)\n    \n#    else:\n#        left = False\n#        if (root.left != None):\n#            left = search(root.left, key) \n#            \n#        right = False\n#        if (root.right != None):\n#            right = search(root.right, key)\n#       \n#        return (left or right)', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 11}, {'action': 'move-left', 'root': 12, 'key': 11}, {'action': 'move-right', 'root': 9, 'key': 11}, {'action': 'move-right', 'root': 10, 'key': 11}, {'action': 'return-false', 'root': -1, 'key': 11}], '1': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '2': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-false', 'root': -1, 'key': 30}], '3': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '4': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-true', 'root': -1, 'key': 30}]}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    print("Root:" + str(root.val))\n    if root == None or root.val == None:\n        return root\n    \n    if key > root.val:\n        print("Right")\n        if root.right.val == None:\n            root.right.val = key\n        else:\n            root.right.val = insert(root.right, key)\n    else:\n        print("Left")\n        if root.left == None:\n            print("nothing here")\n            root.left = None\n        else:\n            print("something here")\n            root.left.val = insert(root.left, key)\n    return root', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 14}, {'action': 'move-right', 'root': 12, 'key': 14}, {'action': 'move-left', 'root': 15, 'key': 14}, {'action': 'move-right', 'root': 13, 'key': 14}, {'action': 'insert', 'root': -1, 'key': 14}], '1': [{'action': 'move-right', 'root': 5, 'key': 6}, {'action': 'move-left', 'root': 7, 'key': 6}, {'action': 'insert', 'root': -1, 'key': 6}], '2': [{'action': 'move-left', 'root': 8, 'key': 2}, {'action': 'move-left', 'root': 3, 'key': 2}, {'action': 'move-right', 'root': 1, 'key': 2}, {'action': 'insert', 'root': -1, 'key': 2}], '3': [{'action': 'move-left', 'root': 50, 'key': 43}, {'action': 'move-right', 'root': 17, 'key': 43}, {'action': 'move-right', 'root': 23, 'key': 43}, {'action': 'insert', 'root': -1, 'key': 43}], '4': [{'action': 'move-right', 'root': 5, 'key': 9}, {'action': 'move-right', 'root': 7, 'key': 9}, {'action': 'insert', 'root': -1, 'key': 9}], '5': [{'action': 'move-right', 'root': 8, 'key': 15}, {'action': 'move-right', 'root': 10, 'key': 15}, {'action': 'move-right', 'root': 12, 'key': 15}, {'action': 'move-right', 'root': 13, 'key': 15}, {'action': 'insert', 'root': -1, 'key': 15}], '6': [{'action': 'move-left', 'root': 50, 'key': 43}, {'action': 'move-right', 'root': 17, 'key': 43}, {'action': 'move-right', 'root': 23, 'key': 43}, {'action': 'insert', 'root': -1, 'key': 43}]}}}
2021-02-22 17:19:58.850486,insert,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root == None:\n        return False   \n    if root.val == None:\n        return False   \n    elif root.val == key:\n        return True\n    else:\n        if key < root.val:\n            return search(root.left, key)\n        else:\n            return search(root.right, key)\n    \n#    else:\n#        left = False\n#        if (root.left != None):\n#            left = search(root.left, key) \n#            \n#        right = False\n#        if (root.right != None):\n#            right = search(root.right, key)\n#       \n#        return (left or right)', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 11}, {'action': 'move-left', 'root': 12, 'key': 11}, {'action': 'move-right', 'root': 9, 'key': 11}, {'action': 'move-right', 'root': 10, 'key': 11}, {'action': 'return-false', 'root': -1, 'key': 11}], '1': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '2': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-false', 'root': -1, 'key': 30}], '3': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '4': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-true', 'root': -1, 'key': 30}]}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    print("Root:" + str(root.val))\n    if root == None or root.val == None:\n        return root\n    \n    if key > root.val:\n        print("Right")\n        if root.right.val == None:\n            root.right.val = key\n        else:\n            root.right.val = insert(root.right, key)\n    else:\n        print("Left")\n        if root.left == None:\n            print("nothing here")\n            root.left = root.left\n        else:\n            print("something here")\n            root.left.val = insert(root.left, key)\n    return root', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 14}, {'action': 'move-right', 'root': 12, 'key': 14}, {'action': 'move-left', 'root': 15, 'key': 14}, {'action': 'move-right', 'root': 13, 'key': 14}, {'action': 'insert', 'root': -1, 'key': 14}], '1': [{'action': 'move-right', 'root': 5, 'key': 6}, {'action': 'move-left', 'root': 7, 'key': 6}, {'action': 'insert', 'root': -1, 'key': 6}], '2': [{'action': 'move-left', 'root': 8, 'key': 2}, {'action': 'move-left', 'root': 3, 'key': 2}, {'action': 'move-right', 'root': 1, 'key': 2}, {'action': 'insert', 'root': -1, 'key': 2}], '3': [{'action': 'move-left', 'root': 50, 'key': 43}, {'action': 'move-right', 'root': 17, 'key': 43}, {'action': 'move-right', 'root': 23, 'key': 43}, {'action': 'insert', 'root': -1, 'key': 43}], '4': [{'action': 'move-right', 'root': 5, 'key': 9}, {'action': 'move-right', 'root': 7, 'key': 9}, {'action': 'insert', 'root': -1, 'key': 9}], '5': [{'action': 'move-right', 'root': 8, 'key': 15}, {'action': 'move-right', 'root': 10, 'key': 15}, {'action': 'move-right', 'root': 12, 'key': 15}, {'action': 'move-right', 'root': 13, 'key': 15}, {'action': 'insert', 'root': -1, 'key': 15}], '6': [{'action': 'move-left', 'root': 50, 'key': 43}, {'action': 'move-right', 'root': 17, 'key': 43}, {'action': 'move-right', 'root': 23, 'key': 43}, {'action': 'insert', 'root': -1, 'key': 43}]}}}
2021-02-22 17:19:59.689933,insert,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root == None:\n        return False   \n    if root.val == None:\n        return False   \n    elif root.val == key:\n        return True\n    else:\n        if key < root.val:\n            return search(root.left, key)\n        else:\n            return search(root.right, key)\n    \n#    else:\n#        left = False\n#        if (root.left != None):\n#            left = search(root.left, key) \n#            \n#        right = False\n#        if (root.right != None):\n#            right = search(root.right, key)\n#       \n#        return (left or right)', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 11}, {'action': 'move-left', 'root': 12, 'key': 11}, {'action': 'move-right', 'root': 9, 'key': 11}, {'action': 'move-right', 'root': 10, 'key': 11}, {'action': 'return-false', 'root': -1, 'key': 11}], '1': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '2': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-false', 'root': -1, 'key': 30}], '3': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '4': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-true', 'root': -1, 'key': 30}]}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    print("Root:" + str(root.val))\n    if root == None or root.val == None:\n        return root\n    \n    if key > root.val:\n        print("Right")\n        if root.right.val == None:\n            root.right.val = key\n        else:\n            root.right.val = insert(root.right, key)\n    else:\n        print("Left")\n        if root.left == None:\n            print("nothing here")\n            root.left = root.left\n        else:\n            print("something here")\n            root.left.val = insert(root.left, key)\n    return root', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 14}, {'action': 'move-right', 'root': 12, 'key': 14}, {'action': 'move-left', 'root': 15, 'key': 14}, {'action': 'move-right', 'root': 13, 'key': 14}, {'action': 'insert', 'root': -1, 'key': 14}], '1': [{'action': 'move-right', 'root': 5, 'key': 6}, {'action': 'move-left', 'root': 7, 'key': 6}, {'action': 'insert', 'root': -1, 'key': 6}], '2': [{'action': 'move-left', 'root': 8, 'key': 2}, {'action': 'move-left', 'root': 3, 'key': 2}, {'action': 'move-right', 'root': 1, 'key': 2}, {'action': 'insert', 'root': -1, 'key': 2}], '3': [{'action': 'move-left', 'root': 50, 'key': 43}, {'action': 'move-right', 'root': 17, 'key': 43}, {'action': 'move-right', 'root': 23, 'key': 43}, {'action': 'insert', 'root': -1, 'key': 43}], '4': [{'action': 'move-right', 'root': 5, 'key': 9}, {'action': 'move-right', 'root': 7, 'key': 9}, {'action': 'insert', 'root': -1, 'key': 9}], '5': [{'action': 'move-right', 'root': 8, 'key': 15}, {'action': 'move-right', 'root': 10, 'key': 15}, {'action': 'move-right', 'root': 12, 'key': 15}, {'action': 'move-right', 'root': 13, 'key': 15}, {'action': 'insert', 'root': -1, 'key': 15}], '6': [{'action': 'move-left', 'root': 50, 'key': 43}, {'action': 'move-right', 'root': 17, 'key': 43}, {'action': 'move-right', 'root': 23, 'key': 43}, {'action': 'insert', 'root': -1, 'key': 43}]}}}
2021-02-22 17:19:59.844896,insert,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root == None:\n        return False   \n    if root.val == None:\n        return False   \n    elif root.val == key:\n        return True\n    else:\n        if key < root.val:\n            return search(root.left, key)\n        else:\n            return search(root.right, key)\n    \n#    else:\n#        left = False\n#        if (root.left != None):\n#            left = search(root.left, key) \n#            \n#        right = False\n#        if (root.right != None):\n#            right = search(root.right, key)\n#       \n#        return (left or right)', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 11}, {'action': 'move-left', 'root': 12, 'key': 11}, {'action': 'move-right', 'root': 9, 'key': 11}, {'action': 'move-right', 'root': 10, 'key': 11}, {'action': 'return-false', 'root': -1, 'key': 11}], '1': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '2': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-false', 'root': -1, 'key': 30}], '3': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '4': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-true', 'root': -1, 'key': 30}]}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    print("Root:" + str(root.val))\n    if root == None or root.val == None:\n        return root\n    \n    if key > root.val:\n        print("Right")\n        if root.right.val == None:\n            root.right.val = key\n        else:\n            root.right.val = insert(root.right, key)\n    else:\n        print("Left")\n        if root.left == None:\n            print("nothing here")\n            root.left = root.left\n        else:\n            print("something here")\n            root.left.val = insert(root.left, key)\n    return root', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 14}, {'action': 'move-right', 'root': 12, 'key': 14}, {'action': 'move-left', 'root': 15, 'key': 14}, {'action': 'move-right', 'root': 13, 'key': 14}, {'action': 'insert', 'root': -1, 'key': 14}], '1': [{'action': 'move-right', 'root': 5, 'key': 6}, {'action': 'move-left', 'root': 7, 'key': 6}, {'action': 'insert', 'root': -1, 'key': 6}], '2': [{'action': 'move-left', 'root': 8, 'key': 2}, {'action': 'move-left', 'root': 3, 'key': 2}, {'action': 'move-right', 'root': 1, 'key': 2}, {'action': 'insert', 'root': -1, 'key': 2}], '3': [{'action': 'move-left', 'root': 50, 'key': 43}, {'action': 'move-right', 'root': 17, 'key': 43}, {'action': 'move-right', 'root': 23, 'key': 43}, {'action': 'insert', 'root': -1, 'key': 43}], '4': [{'action': 'move-right', 'root': 5, 'key': 9}, {'action': 'move-right', 'root': 7, 'key': 9}, {'action': 'insert', 'root': -1, 'key': 9}], '5': [{'action': 'move-right', 'root': 8, 'key': 15}, {'action': 'move-right', 'root': 10, 'key': 15}, {'action': 'move-right', 'root': 12, 'key': 15}, {'action': 'move-right', 'root': 13, 'key': 15}, {'action': 'insert', 'root': -1, 'key': 15}], '6': [{'action': 'move-left', 'root': 50, 'key': 43}, {'action': 'move-right', 'root': 17, 'key': 43}, {'action': 'move-right', 'root': 23, 'key': 43}, {'action': 'insert', 'root': -1, 'key': 43}]}}}
2021-02-22 17:20:00.011034,insert,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root == None:\n        return False   \n    if root.val == None:\n        return False   \n    elif root.val == key:\n        return True\n    else:\n        if key < root.val:\n            return search(root.left, key)\n        else:\n            return search(root.right, key)\n    \n#    else:\n#        left = False\n#        if (root.left != None):\n#            left = search(root.left, key) \n#            \n#        right = False\n#        if (root.right != None):\n#            right = search(root.right, key)\n#       \n#        return (left or right)', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 11}, {'action': 'move-left', 'root': 12, 'key': 11}, {'action': 'move-right', 'root': 9, 'key': 11}, {'action': 'move-right', 'root': 10, 'key': 11}, {'action': 'return-false', 'root': -1, 'key': 11}], '1': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '2': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-false', 'root': -1, 'key': 30}], '3': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '4': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-true', 'root': -1, 'key': 30}]}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    print("Root:" + str(root.val))\n    if root == None or root.val == None:\n        return root\n    \n    if key > root.val:\n        print("Right")\n        if root.right.val == None:\n            root.right.val = key\n        else:\n            root.right.val = insert(root.right, key)\n    else:\n        print("Left")\n        if root.left == None:\n            print("nothing here")\n            root.left = root.left\n        else:\n            print("something here")\n            root.left.val = insert(root.left, key)\n    return root', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 14}, {'action': 'move-right', 'root': 12, 'key': 14}, {'action': 'move-left', 'root': 15, 'key': 14}, {'action': 'move-right', 'root': 13, 'key': 14}, {'action': 'insert', 'root': -1, 'key': 14}], '1': [{'action': 'move-right', 'root': 5, 'key': 6}, {'action': 'move-left', 'root': 7, 'key': 6}, {'action': 'insert', 'root': -1, 'key': 6}], '2': [{'action': 'move-left', 'root': 8, 'key': 2}, {'action': 'move-left', 'root': 3, 'key': 2}, {'action': 'move-right', 'root': 1, 'key': 2}, {'action': 'insert', 'root': -1, 'key': 2}], '3': [{'action': 'move-left', 'root': 50, 'key': 43}, {'action': 'move-right', 'root': 17, 'key': 43}, {'action': 'move-right', 'root': 23, 'key': 43}, {'action': 'insert', 'root': -1, 'key': 43}], '4': [{'action': 'move-right', 'root': 5, 'key': 9}, {'action': 'move-right', 'root': 7, 'key': 9}, {'action': 'insert', 'root': -1, 'key': 9}], '5': [{'action': 'move-right', 'root': 8, 'key': 15}, {'action': 'move-right', 'root': 10, 'key': 15}, {'action': 'move-right', 'root': 12, 'key': 15}, {'action': 'move-right', 'root': 13, 'key': 15}, {'action': 'insert', 'root': -1, 'key': 15}], '6': [{'action': 'move-left', 'root': 50, 'key': 43}, {'action': 'move-right', 'root': 17, 'key': 43}, {'action': 'move-right', 'root': 23, 'key': 43}, {'action': 'insert', 'root': -1, 'key': 43}]}}}
2021-02-22 17:20:27.111046,insert,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root == None:\n        return False   \n    if root.val == None:\n        return False   \n    elif root.val == key:\n        return True\n    else:\n        if key < root.val:\n            return search(root.left, key)\n        else:\n            return search(root.right, key)\n    \n#    else:\n#        left = False\n#        if (root.left != None):\n#            left = search(root.left, key) \n#            \n#        right = False\n#        if (root.right != None):\n#            right = search(root.right, key)\n#       \n#        return (left or right)', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 11}, {'action': 'move-left', 'root': 12, 'key': 11}, {'action': 'move-right', 'root': 9, 'key': 11}, {'action': 'move-right', 'root': 10, 'key': 11}, {'action': 'return-false', 'root': -1, 'key': 11}], '1': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '2': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-false', 'root': -1, 'key': 30}], '3': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '4': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-true', 'root': -1, 'key': 30}]}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    print("Root:" + str(root.val))\n    if root == None or root.val == None:\n        return root\n    \n    if key > root.val:\n        print("Right")\n        if root.right.val == None:\n            samp = Node(key)\n            root.right.val = samp\n        else:\n            root.right.val = insert(root.right, key)\n    else:\n        print("Left")\n        if root.left == None:\n            print("nothing here")\n            root.left = root.left\n        else:\n            print("something here")\n            root.left.val = insert(root.left, key)\n    return root', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 14}, {'action': 'move-right', 'root': 12, 'key': 14}, {'action': 'move-left', 'root': 15, 'key': 14}, {'action': 'move-right', 'root': 13, 'key': 14}, {'action': 'insert', 'root': -1, 'key': 14}], '1': [{'action': 'move-right', 'root': 5, 'key': 6}, {'action': 'move-left', 'root': 7, 'key': 6}, {'action': 'insert', 'root': -1, 'key': 6}], '2': [{'action': 'move-left', 'root': 8, 'key': 2}, {'action': 'move-left', 'root': 3, 'key': 2}, {'action': 'move-right', 'root': 1, 'key': 2}, {'action': 'insert', 'root': -1, 'key': 2}], '3': [{'action': 'move-left', 'root': 50, 'key': 43}, {'action': 'move-right', 'root': 17, 'key': 43}, {'action': 'move-right', 'root': 23, 'key': 43}, {'action': 'insert', 'root': -1, 'key': 43}], '4': [{'action': 'move-right', 'root': 5, 'key': 9}, {'action': 'move-right', 'root': 7, 'key': 9}, {'action': 'insert', 'root': -1, 'key': 9}], '5': [{'action': 'move-right', 'root': 8, 'key': 15}, {'action': 'move-right', 'root': 10, 'key': 15}, {'action': 'move-right', 'root': 12, 'key': 15}, {'action': 'move-right', 'root': 13, 'key': 15}, {'action': 'insert', 'root': -1, 'key': 15}], '6': [{'action': 'move-left', 'root': 50, 'key': 43}, {'action': 'move-right', 'root': 17, 'key': 43}, {'action': 'move-right', 'root': 23, 'key': 43}, {'action': 'insert', 'root': -1, 'key': 43}]}}}
2021-02-22 17:20:27.927845,insert,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root == None:\n        return False   \n    if root.val == None:\n        return False   \n    elif root.val == key:\n        return True\n    else:\n        if key < root.val:\n            return search(root.left, key)\n        else:\n            return search(root.right, key)\n    \n#    else:\n#        left = False\n#        if (root.left != None):\n#            left = search(root.left, key) \n#            \n#        right = False\n#        if (root.right != None):\n#            right = search(root.right, key)\n#       \n#        return (left or right)', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 11}, {'action': 'move-left', 'root': 12, 'key': 11}, {'action': 'move-right', 'root': 9, 'key': 11}, {'action': 'move-right', 'root': 10, 'key': 11}, {'action': 'return-false', 'root': -1, 'key': 11}], '1': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '2': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-false', 'root': -1, 'key': 30}], '3': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '4': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-true', 'root': -1, 'key': 30}]}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    print("Root:" + str(root.val))\n    if root == None or root.val == None:\n        return root\n    \n    if key > root.val:\n        print("Right")\n        if root.right.val == None:\n            samp = Node(key)\n            root.right.val = samp\n        else:\n            root.right.val = insert(root.right, key)\n    else:\n        print("Left")\n        if root.left == None:\n            print("nothing here")\n            root.left = root.left\n        else:\n            print("something here")\n            root.left.val = insert(root.left, key)\n    return root', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 14}, {'action': 'move-right', 'root': 12, 'key': 14}, {'action': 'move-left', 'root': 15, 'key': 14}, {'action': 'move-right', 'root': 13, 'key': 14}, {'action': 'insert', 'root': -1, 'key': 14}], '1': [{'action': 'move-right', 'root': 5, 'key': 6}, {'action': 'move-left', 'root': 7, 'key': 6}, {'action': 'insert', 'root': -1, 'key': 6}], '2': [{'action': 'move-left', 'root': 8, 'key': 2}, {'action': 'move-left', 'root': 3, 'key': 2}, {'action': 'move-right', 'root': 1, 'key': 2}, {'action': 'insert', 'root': -1, 'key': 2}], '3': [{'action': 'move-left', 'root': 50, 'key': 43}, {'action': 'move-right', 'root': 17, 'key': 43}, {'action': 'move-right', 'root': 23, 'key': 43}, {'action': 'insert', 'root': -1, 'key': 43}], '4': [{'action': 'move-right', 'root': 5, 'key': 9}, {'action': 'move-right', 'root': 7, 'key': 9}, {'action': 'insert', 'root': -1, 'key': 9}], '5': [{'action': 'move-right', 'root': 8, 'key': 15}, {'action': 'move-right', 'root': 10, 'key': 15}, {'action': 'move-right', 'root': 12, 'key': 15}, {'action': 'move-right', 'root': 13, 'key': 15}, {'action': 'insert', 'root': -1, 'key': 15}], '6': [{'action': 'move-left', 'root': 50, 'key': 43}, {'action': 'move-right', 'root': 17, 'key': 43}, {'action': 'move-right', 'root': 23, 'key': 43}, {'action': 'insert', 'root': -1, 'key': 43}]}}}
2021-02-22 17:20:28.120224,insert,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root == None:\n        return False   \n    if root.val == None:\n        return False   \n    elif root.val == key:\n        return True\n    else:\n        if key < root.val:\n            return search(root.left, key)\n        else:\n            return search(root.right, key)\n    \n#    else:\n#        left = False\n#        if (root.left != None):\n#            left = search(root.left, key) \n#            \n#        right = False\n#        if (root.right != None):\n#            right = search(root.right, key)\n#       \n#        return (left or right)', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 11}, {'action': 'move-left', 'root': 12, 'key': 11}, {'action': 'move-right', 'root': 9, 'key': 11}, {'action': 'move-right', 'root': 10, 'key': 11}, {'action': 'return-false', 'root': -1, 'key': 11}], '1': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '2': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-false', 'root': -1, 'key': 30}], '3': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '4': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-true', 'root': -1, 'key': 30}]}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    print("Root:" + str(root.val))\n    if root == None or root.val == None:\n        return root\n    \n    if key > root.val:\n        print("Right")\n        if root.right.val == None:\n            samp = Node(key)\n            root.right.val = samp\n        else:\n            root.right.val = insert(root.right, key)\n    else:\n        print("Left")\n        if root.left == None:\n            print("nothing here")\n            root.left = root.left\n        else:\n            print("something here")\n            root.left.val = insert(root.left, key)\n    return root', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 14}, {'action': 'move-right', 'root': 12, 'key': 14}, {'action': 'move-left', 'root': 15, 'key': 14}, {'action': 'move-right', 'root': 13, 'key': 14}, {'action': 'insert', 'root': -1, 'key': 14}], '1': [{'action': 'move-right', 'root': 5, 'key': 6}, {'action': 'move-left', 'root': 7, 'key': 6}, {'action': 'insert', 'root': -1, 'key': 6}], '2': [{'action': 'move-left', 'root': 8, 'key': 2}, {'action': 'move-left', 'root': 3, 'key': 2}, {'action': 'move-right', 'root': 1, 'key': 2}, {'action': 'insert', 'root': -1, 'key': 2}], '3': [{'action': 'move-left', 'root': 50, 'key': 43}, {'action': 'move-right', 'root': 17, 'key': 43}, {'action': 'move-right', 'root': 23, 'key': 43}, {'action': 'insert', 'root': -1, 'key': 43}], '4': [{'action': 'move-right', 'root': 5, 'key': 9}, {'action': 'move-right', 'root': 7, 'key': 9}, {'action': 'insert', 'root': -1, 'key': 9}], '5': [{'action': 'move-right', 'root': 8, 'key': 15}, {'action': 'move-right', 'root': 10, 'key': 15}, {'action': 'move-right', 'root': 12, 'key': 15}, {'action': 'move-right', 'root': 13, 'key': 15}, {'action': 'insert', 'root': -1, 'key': 15}], '6': [{'action': 'move-left', 'root': 50, 'key': 43}, {'action': 'move-right', 'root': 17, 'key': 43}, {'action': 'move-right', 'root': 23, 'key': 43}, {'action': 'insert', 'root': -1, 'key': 43}]}}}
2021-02-22 17:20:38.109011,insert,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root == None:\n        return False   \n    if root.val == None:\n        return False   \n    elif root.val == key:\n        return True\n    else:\n        if key < root.val:\n            return search(root.left, key)\n        else:\n            return search(root.right, key)\n    \n#    else:\n#        left = False\n#        if (root.left != None):\n#            left = search(root.left, key) \n#            \n#        right = False\n#        if (root.right != None):\n#            right = search(root.right, key)\n#       \n#        return (left or right)', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 11}, {'action': 'move-left', 'root': 12, 'key': 11}, {'action': 'move-right', 'root': 9, 'key': 11}, {'action': 'move-right', 'root': 10, 'key': 11}, {'action': 'return-false', 'root': -1, 'key': 11}], '1': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '2': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-false', 'root': -1, 'key': 30}], '3': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '4': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-true', 'root': -1, 'key': 30}]}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    print("Root:" + str(root.val))\n    if root == None or root.val == None:\n        return root\n    \n    if key > root.val:\n        print("Right")\n        if root.right.val == None:\n            root.right.val = key\n        else:\n            root.right.val = insert(root.right, key)\n    else:\n        print("Left")\n        if root.left == None:\n            print("nothing here")\n            root.left = samp\n        else:\n            print("something here")\n            root.left.val = insert(root.left, key)\n    return root', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 14}, {'action': 'move-right', 'root': 12, 'key': 14}, {'action': 'move-left', 'root': 15, 'key': 14}, {'action': 'move-right', 'root': 13, 'key': 14}, {'action': 'insert', 'root': -1, 'key': 14}], '1': [{'action': 'move-right', 'root': 5, 'key': 6}, {'action': 'move-left', 'root': 7, 'key': 6}, {'action': 'insert', 'root': -1, 'key': 6}], '2': [{'action': 'move-left', 'root': 8, 'key': 2}, {'action': 'move-left', 'root': 3, 'key': 2}, {'action': 'move-right', 'root': 1, 'key': 2}, {'action': 'insert', 'root': -1, 'key': 2}], '3': [{'action': 'move-left', 'root': 50, 'key': 43}, {'action': 'move-right', 'root': 17, 'key': 43}, {'action': 'move-right', 'root': 23, 'key': 43}, {'action': 'insert', 'root': -1, 'key': 43}], '4': [{'action': 'move-right', 'root': 5, 'key': 9}, {'action': 'move-right', 'root': 7, 'key': 9}, {'action': 'insert', 'root': -1, 'key': 9}], '5': [{'action': 'move-right', 'root': 8, 'key': 15}, {'action': 'move-right', 'root': 10, 'key': 15}, {'action': 'move-right', 'root': 12, 'key': 15}, {'action': 'move-right', 'root': 13, 'key': 15}, {'action': 'insert', 'root': -1, 'key': 15}], '6': [{'action': 'move-left', 'root': 50, 'key': 43}, {'action': 'move-right', 'root': 17, 'key': 43}, {'action': 'move-right', 'root': 23, 'key': 43}, {'action': 'insert', 'root': -1, 'key': 43}]}}}
2021-02-22 17:20:38.659988,insert,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root == None:\n        return False   \n    if root.val == None:\n        return False   \n    elif root.val == key:\n        return True\n    else:\n        if key < root.val:\n            return search(root.left, key)\n        else:\n            return search(root.right, key)\n    \n#    else:\n#        left = False\n#        if (root.left != None):\n#            left = search(root.left, key) \n#            \n#        right = False\n#        if (root.right != None):\n#            right = search(root.right, key)\n#       \n#        return (left or right)', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 11}, {'action': 'move-left', 'root': 12, 'key': 11}, {'action': 'move-right', 'root': 9, 'key': 11}, {'action': 'move-right', 'root': 10, 'key': 11}, {'action': 'return-false', 'root': -1, 'key': 11}], '1': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '2': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-false', 'root': -1, 'key': 30}], '3': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '4': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-true', 'root': -1, 'key': 30}]}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    print("Root:" + str(root.val))\n    if root == None or root.val == None:\n        return root\n    \n    if key > root.val:\n        print("Right")\n        if root.right.val == None:\n            root.right.val = key\n        else:\n            root.right.val = insert(root.right, key)\n    else:\n        print("Left")\n        if root.left == None:\n            print("nothing here")\n            root.left = samp\n        else:\n            print("something here")\n            root.left.val = insert(root.left, key)\n    return root', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 14}, {'action': 'move-right', 'root': 12, 'key': 14}, {'action': 'move-left', 'root': 15, 'key': 14}, {'action': 'move-right', 'root': 13, 'key': 14}, {'action': 'insert', 'root': -1, 'key': 14}], '1': [{'action': 'move-right', 'root': 5, 'key': 6}, {'action': 'move-left', 'root': 7, 'key': 6}, {'action': 'insert', 'root': -1, 'key': 6}], '2': [{'action': 'move-left', 'root': 8, 'key': 2}, {'action': 'move-left', 'root': 3, 'key': 2}, {'action': 'move-right', 'root': 1, 'key': 2}, {'action': 'insert', 'root': -1, 'key': 2}], '3': [{'action': 'move-left', 'root': 50, 'key': 43}, {'action': 'move-right', 'root': 17, 'key': 43}, {'action': 'move-right', 'root': 23, 'key': 43}, {'action': 'insert', 'root': -1, 'key': 43}], '4': [{'action': 'move-right', 'root': 5, 'key': 9}, {'action': 'move-right', 'root': 7, 'key': 9}, {'action': 'insert', 'root': -1, 'key': 9}], '5': [{'action': 'move-right', 'root': 8, 'key': 15}, {'action': 'move-right', 'root': 10, 'key': 15}, {'action': 'move-right', 'root': 12, 'key': 15}, {'action': 'move-right', 'root': 13, 'key': 15}, {'action': 'insert', 'root': -1, 'key': 15}], '6': [{'action': 'move-left', 'root': 50, 'key': 43}, {'action': 'move-right', 'root': 17, 'key': 43}, {'action': 'move-right', 'root': 23, 'key': 43}, {'action': 'insert', 'root': -1, 'key': 43}]}}}
2021-02-22 17:20:41.001862,insert,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root == None:\n        return False   \n    if root.val == None:\n        return False   \n    elif root.val == key:\n        return True\n    else:\n        if key < root.val:\n            return search(root.left, key)\n        else:\n            return search(root.right, key)\n    \n#    else:\n#        left = False\n#        if (root.left != None):\n#            left = search(root.left, key) \n#            \n#        right = False\n#        if (root.right != None):\n#            right = search(root.right, key)\n#       \n#        return (left or right)', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 11}, {'action': 'move-left', 'root': 12, 'key': 11}, {'action': 'move-right', 'root': 9, 'key': 11}, {'action': 'move-right', 'root': 10, 'key': 11}, {'action': 'return-false', 'root': -1, 'key': 11}], '1': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '2': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-false', 'root': -1, 'key': 30}], '3': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '4': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-true', 'root': -1, 'key': 30}]}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    print("Root:" + str(root.val))\n    if root == None or root.val == None:\n        return root\n    \n    if key > root.val:\n        print("Right")\n        if root.right.val == None:\n            root.right.val = key\n        else:\n            root.right.val = insert(root.right, key)\n    else:\n        print("Left")\n        if root.left == None:\n            print("nothing here")\n            root.left = 2\n        else:\n            print("something here")\n            root.left.val = insert(root.left, key)\n    return root', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 14}, {'action': 'move-right', 'root': 12, 'key': 14}, {'action': 'move-left', 'root': 15, 'key': 14}, {'action': 'move-right', 'root': 13, 'key': 14}, {'action': 'insert', 'root': -1, 'key': 14}], '1': [{'action': 'move-right', 'root': 5, 'key': 6}, {'action': 'move-left', 'root': 7, 'key': 6}, {'action': 'insert', 'root': -1, 'key': 6}], '2': [{'action': 'move-left', 'root': 8, 'key': 2}, {'action': 'move-left', 'root': 3, 'key': 2}, {'action': 'move-right', 'root': 1, 'key': 2}, {'action': 'insert', 'root': -1, 'key': 2}], '3': [{'action': 'move-left', 'root': 50, 'key': 43}, {'action': 'move-right', 'root': 17, 'key': 43}, {'action': 'move-right', 'root': 23, 'key': 43}, {'action': 'insert', 'root': -1, 'key': 43}], '4': [{'action': 'move-right', 'root': 5, 'key': 9}, {'action': 'move-right', 'root': 7, 'key': 9}, {'action': 'insert', 'root': -1, 'key': 9}], '5': [{'action': 'move-right', 'root': 8, 'key': 15}, {'action': 'move-right', 'root': 10, 'key': 15}, {'action': 'move-right', 'root': 12, 'key': 15}, {'action': 'move-right', 'root': 13, 'key': 15}, {'action': 'insert', 'root': -1, 'key': 15}], '6': [{'action': 'move-left', 'root': 50, 'key': 43}, {'action': 'move-right', 'root': 17, 'key': 43}, {'action': 'move-right', 'root': 23, 'key': 43}, {'action': 'insert', 'root': -1, 'key': 43}]}}}
2021-02-22 17:20:46.161501,insert,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root == None:\n        return False   \n    if root.val == None:\n        return False   \n    elif root.val == key:\n        return True\n    else:\n        if key < root.val:\n            return search(root.left, key)\n        else:\n            return search(root.right, key)\n    \n#    else:\n#        left = False\n#        if (root.left != None):\n#            left = search(root.left, key) \n#            \n#        right = False\n#        if (root.right != None):\n#            right = search(root.right, key)\n#       \n#        return (left or right)', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 11}, {'action': 'move-left', 'root': 12, 'key': 11}, {'action': 'move-right', 'root': 9, 'key': 11}, {'action': 'move-right', 'root': 10, 'key': 11}, {'action': 'return-false', 'root': -1, 'key': 11}], '1': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '2': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-false', 'root': -1, 'key': 30}], '3': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '4': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-true', 'root': -1, 'key': 30}]}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    print("Root:" + str(root.val))\n    if root == None or root.val == None:\n        return root\n    \n    if key > root.val:\n        print("Right")\n        if root.right.val == None:\n            root.right.val = key\n        else:\n            root.right.val = insert(root.right, key)\n    else:\n        print("Left")\n        if root.left == None:\n            print("nothing here")\n            root.left = 15\n        else:\n            print("something here")\n            root.left.val = insert(root.left, key)\n    return root', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 14}, {'action': 'move-right', 'root': 12, 'key': 14}, {'action': 'move-left', 'root': 15, 'key': 14}, {'action': 'move-right', 'root': 13, 'key': 14}, {'action': 'insert', 'root': -1, 'key': 14}], '1': [{'action': 'move-right', 'root': 5, 'key': 6}, {'action': 'move-left', 'root': 7, 'key': 6}, {'action': 'insert', 'root': -1, 'key': 6}], '2': [{'action': 'move-left', 'root': 8, 'key': 2}, {'action': 'move-left', 'root': 3, 'key': 2}, {'action': 'move-right', 'root': 1, 'key': 2}, {'action': 'insert', 'root': -1, 'key': 2}], '3': [{'action': 'move-left', 'root': 50, 'key': 43}, {'action': 'move-right', 'root': 17, 'key': 43}, {'action': 'move-right', 'root': 23, 'key': 43}, {'action': 'insert', 'root': -1, 'key': 43}], '4': [{'action': 'move-right', 'root': 5, 'key': 9}, {'action': 'move-right', 'root': 7, 'key': 9}, {'action': 'insert', 'root': -1, 'key': 9}], '5': [{'action': 'move-right', 'root': 8, 'key': 15}, {'action': 'move-right', 'root': 10, 'key': 15}, {'action': 'move-right', 'root': 12, 'key': 15}, {'action': 'move-right', 'root': 13, 'key': 15}, {'action': 'insert', 'root': -1, 'key': 15}], '6': [{'action': 'move-left', 'root': 50, 'key': 43}, {'action': 'move-right', 'root': 17, 'key': 43}, {'action': 'move-right', 'root': 23, 'key': 43}, {'action': 'insert', 'root': -1, 'key': 43}]}}}
2021-02-22 17:20:50.712536,insert,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root == None:\n        return False   \n    if root.val == None:\n        return False   \n    elif root.val == key:\n        return True\n    else:\n        if key < root.val:\n            return search(root.left, key)\n        else:\n            return search(root.right, key)\n    \n#    else:\n#        left = False\n#        if (root.left != None):\n#            left = search(root.left, key) \n#            \n#        right = False\n#        if (root.right != None):\n#            right = search(root.right, key)\n#       \n#        return (left or right)', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 11}, {'action': 'move-left', 'root': 12, 'key': 11}, {'action': 'move-right', 'root': 9, 'key': 11}, {'action': 'move-right', 'root': 10, 'key': 11}, {'action': 'return-false', 'root': -1, 'key': 11}], '1': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '2': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-false', 'root': -1, 'key': 30}], '3': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '4': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-true', 'root': -1, 'key': 30}]}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    print("Root:" + str(root.val))\n    if root == None or root.val == None:\n        return root\n    \n    if key > root.val:\n        print("Right")\n        if root.right.val == None:\n            root.right.val = key\n        else:\n            root.right.val = insert(root.right, key)\n    else:\n        print("Left")\n        if root.left == None:\n            print("nothing here")\n            root.left = Node(16)\n        else:\n            print("something here")\n            root.left.val = insert(root.left, key)\n    return root', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 14}, {'action': 'move-right', 'root': 12, 'key': 14}, {'action': 'move-left', 'root': 15, 'key': 14}, {'action': 'move-right', 'root': 13, 'key': 14}, {'action': 'insert', 'root': -1, 'key': 14}], '1': [{'action': 'move-right', 'root': 5, 'key': 6}, {'action': 'move-left', 'root': 7, 'key': 6}, {'action': 'insert', 'root': -1, 'key': 6}], '2': [{'action': 'move-left', 'root': 8, 'key': 2}, {'action': 'move-left', 'root': 3, 'key': 2}, {'action': 'move-right', 'root': 1, 'key': 2}, {'action': 'insert', 'root': -1, 'key': 2}], '3': [{'action': 'move-left', 'root': 50, 'key': 43}, {'action': 'move-right', 'root': 17, 'key': 43}, {'action': 'move-right', 'root': 23, 'key': 43}, {'action': 'insert', 'root': -1, 'key': 43}], '4': [{'action': 'move-right', 'root': 5, 'key': 9}, {'action': 'move-right', 'root': 7, 'key': 9}, {'action': 'insert', 'root': -1, 'key': 9}], '5': [{'action': 'move-right', 'root': 8, 'key': 15}, {'action': 'move-right', 'root': 10, 'key': 15}, {'action': 'move-right', 'root': 12, 'key': 15}, {'action': 'move-right', 'root': 13, 'key': 15}, {'action': 'insert', 'root': -1, 'key': 15}], '6': [{'action': 'move-left', 'root': 50, 'key': 43}, {'action': 'move-right', 'root': 17, 'key': 43}, {'action': 'move-right', 'root': 23, 'key': 43}, {'action': 'insert', 'root': -1, 'key': 43}]}}}
2021-02-22 17:20:51.305383,insert,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root == None:\n        return False   \n    if root.val == None:\n        return False   \n    elif root.val == key:\n        return True\n    else:\n        if key < root.val:\n            return search(root.left, key)\n        else:\n            return search(root.right, key)\n    \n#    else:\n#        left = False\n#        if (root.left != None):\n#            left = search(root.left, key) \n#            \n#        right = False\n#        if (root.right != None):\n#            right = search(root.right, key)\n#       \n#        return (left or right)', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 11}, {'action': 'move-left', 'root': 12, 'key': 11}, {'action': 'move-right', 'root': 9, 'key': 11}, {'action': 'move-right', 'root': 10, 'key': 11}, {'action': 'return-false', 'root': -1, 'key': 11}], '1': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '2': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-false', 'root': -1, 'key': 30}], '3': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '4': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-true', 'root': -1, 'key': 30}]}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    print("Root:" + str(root.val))\n    if root == None or root.val == None:\n        return root\n    \n    if key > root.val:\n        print("Right")\n        if root.right.val == None:\n            root.right.val = key\n        else:\n            root.right.val = insert(root.right, key)\n    else:\n        print("Left")\n        if root.left == None:\n            print("nothing here")\n            root.left = Node(16)\n        else:\n            print("something here")\n            root.left.val = insert(root.left, key)\n    return root', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 14}, {'action': 'move-right', 'root': 12, 'key': 14}, {'action': 'move-left', 'root': 15, 'key': 14}, {'action': 'move-right', 'root': 13, 'key': 14}, {'action': 'insert', 'root': -1, 'key': 14}], '1': [{'action': 'move-right', 'root': 5, 'key': 6}, {'action': 'move-left', 'root': 7, 'key': 6}, {'action': 'insert', 'root': -1, 'key': 6}], '2': [{'action': 'move-left', 'root': 8, 'key': 2}, {'action': 'move-left', 'root': 3, 'key': 2}, {'action': 'move-right', 'root': 1, 'key': 2}, {'action': 'insert', 'root': -1, 'key': 2}], '3': [{'action': 'move-left', 'root': 50, 'key': 43}, {'action': 'move-right', 'root': 17, 'key': 43}, {'action': 'move-right', 'root': 23, 'key': 43}, {'action': 'insert', 'root': -1, 'key': 43}], '4': [{'action': 'move-right', 'root': 5, 'key': 9}, {'action': 'move-right', 'root': 7, 'key': 9}, {'action': 'insert', 'root': -1, 'key': 9}], '5': [{'action': 'move-right', 'root': 8, 'key': 15}, {'action': 'move-right', 'root': 10, 'key': 15}, {'action': 'move-right', 'root': 12, 'key': 15}, {'action': 'move-right', 'root': 13, 'key': 15}, {'action': 'insert', 'root': -1, 'key': 15}], '6': [{'action': 'move-left', 'root': 50, 'key': 43}, {'action': 'move-right', 'root': 17, 'key': 43}, {'action': 'move-right', 'root': 23, 'key': 43}, {'action': 'insert', 'root': -1, 'key': 43}]}}}
2021-02-22 17:20:56.912865,insert,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root == None:\n        return False   \n    if root.val == None:\n        return False   \n    elif root.val == key:\n        return True\n    else:\n        if key < root.val:\n            return search(root.left, key)\n        else:\n            return search(root.right, key)\n    \n#    else:\n#        left = False\n#        if (root.left != None):\n#            left = search(root.left, key) \n#            \n#        right = False\n#        if (root.right != None):\n#            right = search(root.right, key)\n#       \n#        return (left or right)', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 11}, {'action': 'move-left', 'root': 12, 'key': 11}, {'action': 'move-right', 'root': 9, 'key': 11}, {'action': 'move-right', 'root': 10, 'key': 11}, {'action': 'return-false', 'root': -1, 'key': 11}], '1': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '2': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-false', 'root': -1, 'key': 30}], '3': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '4': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-true', 'root': -1, 'key': 30}]}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    print("Root:" + str(root.val))\n    if root == None or root.val == None:\n        return root\n    \n    if key > root.val:\n        print("Right")\n        if root.right.val == None:\n            root.right.val = key\n        else:\n            root.right.val = insert(root.right, key)\n    else:\n        print("Left")\n        if root.left == None:\n            print("nothing here")\n            root.left.val = Node(16)\n        else:\n            print("something here")\n            root.left.val = insert(root.left, key)\n    return root', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 14}, {'action': 'move-right', 'root': 12, 'key': 14}, {'action': 'move-left', 'root': 15, 'key': 14}, {'action': 'move-right', 'root': 13, 'key': 14}, {'action': 'insert', 'root': -1, 'key': 14}], '1': [{'action': 'move-right', 'root': 5, 'key': 6}, {'action': 'move-left', 'root': 7, 'key': 6}, {'action': 'insert', 'root': -1, 'key': 6}], '2': [{'action': 'move-left', 'root': 8, 'key': 2}, {'action': 'move-left', 'root': 3, 'key': 2}, {'action': 'move-right', 'root': 1, 'key': 2}, {'action': 'insert', 'root': -1, 'key': 2}], '3': [{'action': 'move-left', 'root': 50, 'key': 43}, {'action': 'move-right', 'root': 17, 'key': 43}, {'action': 'move-right', 'root': 23, 'key': 43}, {'action': 'insert', 'root': -1, 'key': 43}], '4': [{'action': 'move-right', 'root': 5, 'key': 9}, {'action': 'move-right', 'root': 7, 'key': 9}, {'action': 'insert', 'root': -1, 'key': 9}], '5': [{'action': 'move-right', 'root': 8, 'key': 15}, {'action': 'move-right', 'root': 10, 'key': 15}, {'action': 'move-right', 'root': 12, 'key': 15}, {'action': 'move-right', 'root': 13, 'key': 15}, {'action': 'insert', 'root': -1, 'key': 15}], '6': [{'action': 'move-left', 'root': 50, 'key': 43}, {'action': 'move-right', 'root': 17, 'key': 43}, {'action': 'move-right', 'root': 23, 'key': 43}, {'action': 'insert', 'root': -1, 'key': 43}]}}}
2021-02-22 17:21:01.517524,insert,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root == None:\n        return False   \n    if root.val == None:\n        return False   \n    elif root.val == key:\n        return True\n    else:\n        if key < root.val:\n            return search(root.left, key)\n        else:\n            return search(root.right, key)\n    \n#    else:\n#        left = False\n#        if (root.left != None):\n#            left = search(root.left, key) \n#            \n#        right = False\n#        if (root.right != None):\n#            right = search(root.right, key)\n#       \n#        return (left or right)', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 11}, {'action': 'move-left', 'root': 12, 'key': 11}, {'action': 'move-right', 'root': 9, 'key': 11}, {'action': 'move-right', 'root': 10, 'key': 11}, {'action': 'return-false', 'root': -1, 'key': 11}], '1': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '2': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-false', 'root': -1, 'key': 30}], '3': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '4': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-true', 'root': -1, 'key': 30}]}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    print("Root:" + str(root.val))\n    if root == None or root.val == None:\n        return root\n    \n    if key > root.val:\n        print("Right")\n        if root.right.val == None:\n            root.right.val = key\n        else:\n            root.right.val = insert(root.right, key)\n    else:\n        print("Left")\n        if root.left == None:\n            print("nothing here")\n            root.left = Node(16)\n        else:\n            print("something here")\n            root.left.val = insert(root.left, key)\n    return root', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 14}, {'action': 'move-right', 'root': 12, 'key': 14}, {'action': 'move-left', 'root': 15, 'key': 14}, {'action': 'move-right', 'root': 13, 'key': 14}, {'action': 'insert', 'root': -1, 'key': 14}], '1': [{'action': 'move-right', 'root': 5, 'key': 6}, {'action': 'move-left', 'root': 7, 'key': 6}, {'action': 'insert', 'root': -1, 'key': 6}], '2': [{'action': 'move-left', 'root': 8, 'key': 2}, {'action': 'move-left', 'root': 3, 'key': 2}, {'action': 'move-right', 'root': 1, 'key': 2}, {'action': 'insert', 'root': -1, 'key': 2}], '3': [{'action': 'move-left', 'root': 50, 'key': 43}, {'action': 'move-right', 'root': 17, 'key': 43}, {'action': 'move-right', 'root': 23, 'key': 43}, {'action': 'insert', 'root': -1, 'key': 43}], '4': [{'action': 'move-right', 'root': 5, 'key': 9}, {'action': 'move-right', 'root': 7, 'key': 9}, {'action': 'insert', 'root': -1, 'key': 9}], '5': [{'action': 'move-right', 'root': 8, 'key': 15}, {'action': 'move-right', 'root': 10, 'key': 15}, {'action': 'move-right', 'root': 12, 'key': 15}, {'action': 'move-right', 'root': 13, 'key': 15}, {'action': 'insert', 'root': -1, 'key': 15}], '6': [{'action': 'move-left', 'root': 50, 'key': 43}, {'action': 'move-right', 'root': 17, 'key': 43}, {'action': 'move-right', 'root': 23, 'key': 43}, {'action': 'insert', 'root': -1, 'key': 43}]}}}
2021-02-22 17:21:06.101724,insert,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root == None:\n        return False   \n    if root.val == None:\n        return False   \n    elif root.val == key:\n        return True\n    else:\n        if key < root.val:\n            return search(root.left, key)\n        else:\n            return search(root.right, key)\n    \n#    else:\n#        left = False\n#        if (root.left != None):\n#            left = search(root.left, key) \n#            \n#        right = False\n#        if (root.right != None):\n#            right = search(root.right, key)\n#       \n#        return (left or right)', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 11}, {'action': 'move-left', 'root': 12, 'key': 11}, {'action': 'move-right', 'root': 9, 'key': 11}, {'action': 'move-right', 'root': 10, 'key': 11}, {'action': 'return-false', 'root': -1, 'key': 11}], '1': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '2': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-false', 'root': -1, 'key': 30}], '3': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '4': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-true', 'root': -1, 'key': 30}]}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    print("Root:" + str(root.val))\n    if root == None or root.val == None:\n        return root\n    \n    if key > root.val:\n        print("Right")\n        if root.right.val == None:\n            root.right.val = key\n        else:\n            root.right.val = insert(root.right, key)\n    else:\n        print("Left")\n        if root.left == None:\n            print("nothing here")\n            root.left = Node\n        else:\n            print("something here")\n            root.left.val = insert(root.left, key)\n    return root', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 14}, {'action': 'move-right', 'root': 12, 'key': 14}, {'action': 'move-left', 'root': 15, 'key': 14}, {'action': 'move-right', 'root': 13, 'key': 14}, {'action': 'insert', 'root': -1, 'key': 14}], '1': [{'action': 'move-right', 'root': 5, 'key': 6}, {'action': 'move-left', 'root': 7, 'key': 6}, {'action': 'insert', 'root': -1, 'key': 6}], '2': [{'action': 'move-left', 'root': 8, 'key': 2}, {'action': 'move-left', 'root': 3, 'key': 2}, {'action': 'move-right', 'root': 1, 'key': 2}, {'action': 'insert', 'root': -1, 'key': 2}], '3': [{'action': 'move-left', 'root': 50, 'key': 43}, {'action': 'move-right', 'root': 17, 'key': 43}, {'action': 'move-right', 'root': 23, 'key': 43}, {'action': 'insert', 'root': -1, 'key': 43}], '4': [{'action': 'move-right', 'root': 5, 'key': 9}, {'action': 'move-right', 'root': 7, 'key': 9}, {'action': 'insert', 'root': -1, 'key': 9}], '5': [{'action': 'move-right', 'root': 8, 'key': 15}, {'action': 'move-right', 'root': 10, 'key': 15}, {'action': 'move-right', 'root': 12, 'key': 15}, {'action': 'move-right', 'root': 13, 'key': 15}, {'action': 'insert', 'root': -1, 'key': 15}], '6': [{'action': 'move-left', 'root': 50, 'key': 43}, {'action': 'move-right', 'root': 17, 'key': 43}, {'action': 'move-right', 'root': 23, 'key': 43}, {'action': 'insert', 'root': -1, 'key': 43}]}}}
2021-02-22 17:21:09.972973,insert,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root == None:\n        return False   \n    if root.val == None:\n        return False   \n    elif root.val == key:\n        return True\n    else:\n        if key < root.val:\n            return search(root.left, key)\n        else:\n            return search(root.right, key)\n    \n#    else:\n#        left = False\n#        if (root.left != None):\n#            left = search(root.left, key) \n#            \n#        right = False\n#        if (root.right != None):\n#            right = search(root.right, key)\n#       \n#        return (left or right)', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 11}, {'action': 'move-left', 'root': 12, 'key': 11}, {'action': 'move-right', 'root': 9, 'key': 11}, {'action': 'move-right', 'root': 10, 'key': 11}, {'action': 'return-false', 'root': -1, 'key': 11}], '1': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '2': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-false', 'root': -1, 'key': 30}], '3': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '4': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-true', 'root': -1, 'key': 30}]}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    print("Root:" + str(root.val))\n    if root == None or root.val == None:\n        return root\n    \n    if key > root.val:\n        print("Right")\n        if root.right.val == None:\n            root.right.val = key\n        else:\n            root.right.val = insert(root.right, key)\n    else:\n        print("Left")\n        if root.left == None:\n            print("nothing here")\n            root.left = new Node\n        else:\n            print("something here")\n            root.left.val = insert(root.left, key)\n    return root', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 14}, {'action': 'move-right', 'root': 12, 'key': 14}, {'action': 'move-left', 'root': 15, 'key': 14}, {'action': 'move-right', 'root': 13, 'key': 14}, {'action': 'insert', 'root': -1, 'key': 14}], '1': [{'action': 'move-right', 'root': 5, 'key': 6}, {'action': 'move-left', 'root': 7, 'key': 6}, {'action': 'insert', 'root': -1, 'key': 6}], '2': [{'action': 'move-left', 'root': 8, 'key': 2}, {'action': 'move-left', 'root': 3, 'key': 2}, {'action': 'move-right', 'root': 1, 'key': 2}, {'action': 'insert', 'root': -1, 'key': 2}], '3': [{'action': 'move-left', 'root': 50, 'key': 43}, {'action': 'move-right', 'root': 17, 'key': 43}, {'action': 'move-right', 'root': 23, 'key': 43}, {'action': 'insert', 'root': -1, 'key': 43}], '4': [{'action': 'move-right', 'root': 5, 'key': 9}, {'action': 'move-right', 'root': 7, 'key': 9}, {'action': 'insert', 'root': -1, 'key': 9}], '5': [{'action': 'move-right', 'root': 8, 'key': 15}, {'action': 'move-right', 'root': 10, 'key': 15}, {'action': 'move-right', 'root': 12, 'key': 15}, {'action': 'move-right', 'root': 13, 'key': 15}, {'action': 'insert', 'root': -1, 'key': 15}], '6': [{'action': 'move-left', 'root': 50, 'key': 43}, {'action': 'move-right', 'root': 17, 'key': 43}, {'action': 'move-right', 'root': 23, 'key': 43}, {'action': 'insert', 'root': -1, 'key': 43}]}}}
2021-02-22 17:21:10.340068,insert,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root == None:\n        return False   \n    if root.val == None:\n        return False   \n    elif root.val == key:\n        return True\n    else:\n        if key < root.val:\n            return search(root.left, key)\n        else:\n            return search(root.right, key)\n    \n#    else:\n#        left = False\n#        if (root.left != None):\n#            left = search(root.left, key) \n#            \n#        right = False\n#        if (root.right != None):\n#            right = search(root.right, key)\n#       \n#        return (left or right)', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 11}, {'action': 'move-left', 'root': 12, 'key': 11}, {'action': 'move-right', 'root': 9, 'key': 11}, {'action': 'move-right', 'root': 10, 'key': 11}, {'action': 'return-false', 'root': -1, 'key': 11}], '1': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '2': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-false', 'root': -1, 'key': 30}], '3': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '4': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-true', 'root': -1, 'key': 30}]}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    print("Root:" + str(root.val))\n    if root == None or root.val == None:\n        return root\n    \n    if key > root.val:\n        print("Right")\n        if root.right.val == None:\n            root.right.val = key\n        else:\n            root.right.val = insert(root.right, key)\n    else:\n        print("Left")\n        if root.left == None:\n            print("nothing here")\n            root.left = new Node\n        else:\n            print("something here")\n            root.left.val = insert(root.left, key)\n    return root', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 14}, {'action': 'move-right', 'root': 12, 'key': 14}, {'action': 'move-left', 'root': 15, 'key': 14}, {'action': 'move-right', 'root': 13, 'key': 14}, {'action': 'insert', 'root': -1, 'key': 14}], '1': [{'action': 'move-right', 'root': 5, 'key': 6}, {'action': 'move-left', 'root': 7, 'key': 6}, {'action': 'insert', 'root': -1, 'key': 6}], '2': [{'action': 'move-left', 'root': 8, 'key': 2}, {'action': 'move-left', 'root': 3, 'key': 2}, {'action': 'move-right', 'root': 1, 'key': 2}, {'action': 'insert', 'root': -1, 'key': 2}], '3': [{'action': 'move-left', 'root': 50, 'key': 43}, {'action': 'move-right', 'root': 17, 'key': 43}, {'action': 'move-right', 'root': 23, 'key': 43}, {'action': 'insert', 'root': -1, 'key': 43}], '4': [{'action': 'move-right', 'root': 5, 'key': 9}, {'action': 'move-right', 'root': 7, 'key': 9}, {'action': 'insert', 'root': -1, 'key': 9}], '5': [{'action': 'move-right', 'root': 8, 'key': 15}, {'action': 'move-right', 'root': 10, 'key': 15}, {'action': 'move-right', 'root': 12, 'key': 15}, {'action': 'move-right', 'root': 13, 'key': 15}, {'action': 'insert', 'root': -1, 'key': 15}], '6': [{'action': 'move-left', 'root': 50, 'key': 43}, {'action': 'move-right', 'root': 17, 'key': 43}, {'action': 'move-right', 'root': 23, 'key': 43}, {'action': 'insert', 'root': -1, 'key': 43}]}}}
2021-02-22 17:21:15.238035,insert,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root == None:\n        return False   \n    if root.val == None:\n        return False   \n    elif root.val == key:\n        return True\n    else:\n        if key < root.val:\n            return search(root.left, key)\n        else:\n            return search(root.right, key)\n    \n#    else:\n#        left = False\n#        if (root.left != None):\n#            left = search(root.left, key) \n#            \n#        right = False\n#        if (root.right != None):\n#            right = search(root.right, key)\n#       \n#        return (left or right)', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 11}, {'action': 'move-left', 'root': 12, 'key': 11}, {'action': 'move-right', 'root': 9, 'key': 11}, {'action': 'move-right', 'root': 10, 'key': 11}, {'action': 'return-false', 'root': -1, 'key': 11}], '1': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '2': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-false', 'root': -1, 'key': 30}], '3': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '4': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-true', 'root': -1, 'key': 30}]}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    print("Root:" + str(root.val))\n    if root == None or root.val == None:\n        return root\n    \n    if key > root.val:\n        print("Right")\n        if root.right.val == None:\n            root.right.val = key\n        else:\n            root.right.val = insert(root.right, key)\n    else:\n        print("Left")\n        if root.left == None:\n            print("nothing here")\n            root.left = new Node(5)\n        else:\n            print("something here")\n            root.left.val = insert(root.left, key)\n    return root', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 14}, {'action': 'move-right', 'root': 12, 'key': 14}, {'action': 'move-left', 'root': 15, 'key': 14}, {'action': 'move-right', 'root': 13, 'key': 14}, {'action': 'insert', 'root': -1, 'key': 14}], '1': [{'action': 'move-right', 'root': 5, 'key': 6}, {'action': 'move-left', 'root': 7, 'key': 6}, {'action': 'insert', 'root': -1, 'key': 6}], '2': [{'action': 'move-left', 'root': 8, 'key': 2}, {'action': 'move-left', 'root': 3, 'key': 2}, {'action': 'move-right', 'root': 1, 'key': 2}, {'action': 'insert', 'root': -1, 'key': 2}], '3': [{'action': 'move-left', 'root': 50, 'key': 43}, {'action': 'move-right', 'root': 17, 'key': 43}, {'action': 'move-right', 'root': 23, 'key': 43}, {'action': 'insert', 'root': -1, 'key': 43}], '4': [{'action': 'move-right', 'root': 5, 'key': 9}, {'action': 'move-right', 'root': 7, 'key': 9}, {'action': 'insert', 'root': -1, 'key': 9}], '5': [{'action': 'move-right', 'root': 8, 'key': 15}, {'action': 'move-right', 'root': 10, 'key': 15}, {'action': 'move-right', 'root': 12, 'key': 15}, {'action': 'move-right', 'root': 13, 'key': 15}, {'action': 'insert', 'root': -1, 'key': 15}], '6': [{'action': 'move-left', 'root': 50, 'key': 43}, {'action': 'move-right', 'root': 17, 'key': 43}, {'action': 'move-right', 'root': 23, 'key': 43}, {'action': 'insert', 'root': -1, 'key': 43}]}}}
2021-02-22 17:21:17.542283,insert,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root == None:\n        return False   \n    if root.val == None:\n        return False   \n    elif root.val == key:\n        return True\n    else:\n        if key < root.val:\n            return search(root.left, key)\n        else:\n            return search(root.right, key)\n    \n#    else:\n#        left = False\n#        if (root.left != None):\n#            left = search(root.left, key) \n#            \n#        right = False\n#        if (root.right != None):\n#            right = search(root.right, key)\n#       \n#        return (left or right)', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 11}, {'action': 'move-left', 'root': 12, 'key': 11}, {'action': 'move-right', 'root': 9, 'key': 11}, {'action': 'move-right', 'root': 10, 'key': 11}, {'action': 'return-false', 'root': -1, 'key': 11}], '1': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '2': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-false', 'root': -1, 'key': 30}], '3': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '4': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-true', 'root': -1, 'key': 30}]}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    print("Root:" + str(root.val))\n    if root == None or root.val == None:\n        return root\n    \n    if key > root.val:\n        print("Right")\n        if root.right.val == None:\n            root.right.val = key\n        else:\n            root.right.val = insert(root.right, key)\n    else:\n        print("Left")\n        if root.left == None:\n            print("nothing here")\n            root.left = Node(5)\n        else:\n            print("something here")\n            root.left.val = insert(root.left, key)\n    return root', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 14}, {'action': 'move-right', 'root': 12, 'key': 14}, {'action': 'move-left', 'root': 15, 'key': 14}, {'action': 'move-right', 'root': 13, 'key': 14}, {'action': 'insert', 'root': -1, 'key': 14}], '1': [{'action': 'move-right', 'root': 5, 'key': 6}, {'action': 'move-left', 'root': 7, 'key': 6}, {'action': 'insert', 'root': -1, 'key': 6}], '2': [{'action': 'move-left', 'root': 8, 'key': 2}, {'action': 'move-left', 'root': 3, 'key': 2}, {'action': 'move-right', 'root': 1, 'key': 2}, {'action': 'insert', 'root': -1, 'key': 2}], '3': [{'action': 'move-left', 'root': 50, 'key': 43}, {'action': 'move-right', 'root': 17, 'key': 43}, {'action': 'move-right', 'root': 23, 'key': 43}, {'action': 'insert', 'root': -1, 'key': 43}], '4': [{'action': 'move-right', 'root': 5, 'key': 9}, {'action': 'move-right', 'root': 7, 'key': 9}, {'action': 'insert', 'root': -1, 'key': 9}], '5': [{'action': 'move-right', 'root': 8, 'key': 15}, {'action': 'move-right', 'root': 10, 'key': 15}, {'action': 'move-right', 'root': 12, 'key': 15}, {'action': 'move-right', 'root': 13, 'key': 15}, {'action': 'insert', 'root': -1, 'key': 15}], '6': [{'action': 'move-left', 'root': 50, 'key': 43}, {'action': 'move-right', 'root': 17, 'key': 43}, {'action': 'move-right', 'root': 23, 'key': 43}, {'action': 'insert', 'root': -1, 'key': 43}]}}}
2021-02-22 17:22:18.842770,insert,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root == None:\n        return False   \n    if root.val == None:\n        return False   \n    elif root.val == key:\n        return True\n    else:\n        if key < root.val:\n            return search(root.left, key)\n        else:\n            return search(root.right, key)\n    \n#    else:\n#        left = False\n#        if (root.left != None):\n#            left = search(root.left, key) \n#            \n#        right = False\n#        if (root.right != None):\n#            right = search(root.right, key)\n#       \n#        return (left or right)', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 11}, {'action': 'move-left', 'root': 12, 'key': 11}, {'action': 'move-right', 'root': 9, 'key': 11}, {'action': 'move-right', 'root': 10, 'key': 11}, {'action': 'return-false', 'root': -1, 'key': 11}], '1': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '2': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-false', 'root': -1, 'key': 30}], '3': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '4': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-true', 'root': -1, 'key': 30}]}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    print("Root:" + str(root.val))\n    if root == None or root.val == None:\n        return root\n    \n    if key > root.val:\n        print("Right")\n        if root.right == None:\n            root.right = key\n        else:\n            root.right = insert(root.right, key)\n    else:\n        print("Left")\n        if root.left == None:\n            print("nothing here")\n            root.left = new Node(5)\n        else:\n            print("something here")\n            root.left = insert(root.left, key)\n    return root', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 14}, {'action': 'move-right', 'root': 12, 'key': 14}, {'action': 'move-left', 'root': 15, 'key': 14}, {'action': 'move-right', 'root': 13, 'key': 14}, {'action': 'insert', 'root': -1, 'key': 14}], '1': [{'action': 'move-right', 'root': 5, 'key': 6}, {'action': 'move-left', 'root': 7, 'key': 6}, {'action': 'insert', 'root': -1, 'key': 6}], '2': [{'action': 'move-left', 'root': 8, 'key': 2}, {'action': 'move-left', 'root': 3, 'key': 2}, {'action': 'move-right', 'root': 1, 'key': 2}, {'action': 'insert', 'root': -1, 'key': 2}], '3': [{'action': 'move-left', 'root': 50, 'key': 43}, {'action': 'move-right', 'root': 17, 'key': 43}, {'action': 'move-right', 'root': 23, 'key': 43}, {'action': 'insert', 'root': -1, 'key': 43}], '4': [{'action': 'move-right', 'root': 5, 'key': 9}, {'action': 'move-right', 'root': 7, 'key': 9}, {'action': 'insert', 'root': -1, 'key': 9}], '5': [{'action': 'move-right', 'root': 8, 'key': 15}, {'action': 'move-right', 'root': 10, 'key': 15}, {'action': 'move-right', 'root': 12, 'key': 15}, {'action': 'move-right', 'root': 13, 'key': 15}, {'action': 'insert', 'root': -1, 'key': 15}], '6': [{'action': 'move-left', 'root': 50, 'key': 43}, {'action': 'move-right', 'root': 17, 'key': 43}, {'action': 'move-right', 'root': 23, 'key': 43}, {'action': 'insert', 'root': -1, 'key': 43}]}}}
2021-02-22 17:22:25.522113,insert,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root == None:\n        return False   \n    if root.val == None:\n        return False   \n    elif root.val == key:\n        return True\n    else:\n        if key < root.val:\n            return search(root.left, key)\n        else:\n            return search(root.right, key)\n    \n#    else:\n#        left = False\n#        if (root.left != None):\n#            left = search(root.left, key) \n#            \n#        right = False\n#        if (root.right != None):\n#            right = search(root.right, key)\n#       \n#        return (left or right)', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 11}, {'action': 'move-left', 'root': 12, 'key': 11}, {'action': 'move-right', 'root': 9, 'key': 11}, {'action': 'move-right', 'root': 10, 'key': 11}, {'action': 'return-false', 'root': -1, 'key': 11}], '1': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '2': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-false', 'root': -1, 'key': 30}], '3': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '4': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-true', 'root': -1, 'key': 30}]}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    print("Root:" + str(root.val))\n    if root == None or root.val == None:\n        return root\n    \n    if key > root.val:\n        print("Right")\n        if root.right == None:\n            root.right = key\n        else:\n            root.right = insert(root.right, key)\n    else:\n        print("Left")\n        if root.left == None:\n            print("nothing here")\n            root.left = new Node(5)\n        else:\n            print("something here")\n            root.left = insert(root.left, key)\n    return root', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 14}, {'action': 'move-right', 'root': 12, 'key': 14}, {'action': 'move-left', 'root': 15, 'key': 14}, {'action': 'move-right', 'root': 13, 'key': 14}, {'action': 'insert', 'root': -1, 'key': 14}], '1': [{'action': 'move-right', 'root': 5, 'key': 6}, {'action': 'move-left', 'root': 7, 'key': 6}, {'action': 'insert', 'root': -1, 'key': 6}], '2': [{'action': 'move-left', 'root': 8, 'key': 2}, {'action': 'move-left', 'root': 3, 'key': 2}, {'action': 'move-right', 'root': 1, 'key': 2}, {'action': 'insert', 'root': -1, 'key': 2}], '3': [{'action': 'move-left', 'root': 50, 'key': 43}, {'action': 'move-right', 'root': 17, 'key': 43}, {'action': 'move-right', 'root': 23, 'key': 43}, {'action': 'insert', 'root': -1, 'key': 43}], '4': [{'action': 'move-right', 'root': 5, 'key': 9}, {'action': 'move-right', 'root': 7, 'key': 9}, {'action': 'insert', 'root': -1, 'key': 9}], '5': [{'action': 'move-right', 'root': 8, 'key': 15}, {'action': 'move-right', 'root': 10, 'key': 15}, {'action': 'move-right', 'root': 12, 'key': 15}, {'action': 'move-right', 'root': 13, 'key': 15}, {'action': 'insert', 'root': -1, 'key': 15}], '6': [{'action': 'move-left', 'root': 50, 'key': 43}, {'action': 'move-right', 'root': 17, 'key': 43}, {'action': 'move-right', 'root': 23, 'key': 43}, {'action': 'insert', 'root': -1, 'key': 43}]}}}
2021-02-22 17:22:47.923924,insert,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root == None:\n        return False   \n    if root.val == None:\n        return False   \n    elif root.val == key:\n        return True\n    else:\n        if key < root.val:\n            return search(root.left, key)\n        else:\n            return search(root.right, key)\n    \n#    else:\n#        left = False\n#        if (root.left != None):\n#            left = search(root.left, key) \n#            \n#        right = False\n#        if (root.right != None):\n#            right = search(root.right, key)\n#       \n#        return (left or right)', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 11}, {'action': 'move-left', 'root': 12, 'key': 11}, {'action': 'move-right', 'root': 9, 'key': 11}, {'action': 'move-right', 'root': 10, 'key': 11}, {'action': 'return-false', 'root': -1, 'key': 11}], '1': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '2': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-false', 'root': -1, 'key': 30}], '3': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '4': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-true', 'root': -1, 'key': 30}]}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    print("Root:" + str(root.val))\n    if root == None or root.val == None:\n        return root\n    \n    if key > root.val:\n        print("Right")\n        if root.right == None:\n            root.right = key\n        else:\n            root.right = insert(root.right, key)\n    else:\n        print("Left")\n        if root.left == None:\n            print("nothing here")\n            node8 = Node(8)\n            root.left = node8\n        else:\n            print("something here")\n            root.left = insert(root.left, key)\n    return root', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 14}, {'action': 'move-right', 'root': 12, 'key': 14}, {'action': 'move-left', 'root': 15, 'key': 14}, {'action': 'move-right', 'root': 13, 'key': 14}, {'action': 'insert', 'root': -1, 'key': 14}], '1': [{'action': 'move-right', 'root': 5, 'key': 6}, {'action': 'move-left', 'root': 7, 'key': 6}, {'action': 'insert', 'root': -1, 'key': 6}], '2': [{'action': 'move-left', 'root': 8, 'key': 2}, {'action': 'move-left', 'root': 3, 'key': 2}, {'action': 'move-right', 'root': 1, 'key': 2}, {'action': 'insert', 'root': -1, 'key': 2}], '3': [{'action': 'move-left', 'root': 50, 'key': 43}, {'action': 'move-right', 'root': 17, 'key': 43}, {'action': 'move-right', 'root': 23, 'key': 43}, {'action': 'insert', 'root': -1, 'key': 43}], '4': [{'action': 'move-right', 'root': 5, 'key': 9}, {'action': 'move-right', 'root': 7, 'key': 9}, {'action': 'insert', 'root': -1, 'key': 9}], '5': [{'action': 'move-right', 'root': 8, 'key': 15}, {'action': 'move-right', 'root': 10, 'key': 15}, {'action': 'move-right', 'root': 12, 'key': 15}, {'action': 'move-right', 'root': 13, 'key': 15}, {'action': 'insert', 'root': -1, 'key': 15}], '6': [{'action': 'move-left', 'root': 50, 'key': 43}, {'action': 'move-right', 'root': 17, 'key': 43}, {'action': 'move-right', 'root': 23, 'key': 43}, {'action': 'insert', 'root': -1, 'key': 43}]}}}
2021-02-22 17:23:08.211360,insert,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root == None:\n        return False   \n    if root.val == None:\n        return False   \n    elif root.val == key:\n        return True\n    else:\n        if key < root.val:\n            return search(root.left, key)\n        else:\n            return search(root.right, key)\n    \n#    else:\n#        left = False\n#        if (root.left != None):\n#            left = search(root.left, key) \n#            \n#        right = False\n#        if (root.right != None):\n#            right = search(root.right, key)\n#       \n#        return (left or right)', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 11}, {'action': 'move-left', 'root': 12, 'key': 11}, {'action': 'move-right', 'root': 9, 'key': 11}, {'action': 'move-right', 'root': 10, 'key': 11}, {'action': 'return-false', 'root': -1, 'key': 11}], '1': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '2': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-false', 'root': -1, 'key': 30}], '3': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '4': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-true', 'root': -1, 'key': 30}]}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    print("Root:" + str(root.val))\n    if root == None or root.val == None:\n        return root\n    \n    if key > root.val:\n        print("Right")\n        if root.right == None:\n            root.right = key\n        else:\n            root.right = insert(root.right, key)\n    else:\n        print("Left")\n        if root.left == None:\n            print("nothing here")\n            k = Node(key)\n            root.left = k\n        else:\n            print("something here")\n            root.left = insert(root.left, key)\n    return root', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 14}, {'action': 'move-right', 'root': 12, 'key': 14}, {'action': 'move-left', 'root': 15, 'key': 14}, {'action': 'move-right', 'root': 13, 'key': 14}, {'action': 'insert', 'root': -1, 'key': 14}], '1': [{'action': 'move-right', 'root': 5, 'key': 6}, {'action': 'move-left', 'root': 7, 'key': 6}, {'action': 'insert', 'root': -1, 'key': 6}], '2': [{'action': 'move-left', 'root': 8, 'key': 2}, {'action': 'move-left', 'root': 3, 'key': 2}, {'action': 'move-right', 'root': 1, 'key': 2}, {'action': 'insert', 'root': -1, 'key': 2}], '3': [{'action': 'move-left', 'root': 50, 'key': 43}, {'action': 'move-right', 'root': 17, 'key': 43}, {'action': 'move-right', 'root': 23, 'key': 43}, {'action': 'insert', 'root': -1, 'key': 43}], '4': [{'action': 'move-right', 'root': 5, 'key': 9}, {'action': 'move-right', 'root': 7, 'key': 9}, {'action': 'insert', 'root': -1, 'key': 9}], '5': [{'action': 'move-right', 'root': 8, 'key': 15}, {'action': 'move-right', 'root': 10, 'key': 15}, {'action': 'move-right', 'root': 12, 'key': 15}, {'action': 'move-right', 'root': 13, 'key': 15}, {'action': 'insert', 'root': -1, 'key': 15}], '6': [{'action': 'move-left', 'root': 50, 'key': 43}, {'action': 'move-right', 'root': 17, 'key': 43}, {'action': 'move-right', 'root': 23, 'key': 43}, {'action': 'insert', 'root': -1, 'key': 43}]}}}
2021-02-22 17:23:17.570607,insert,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root == None:\n        return False   \n    if root.val == None:\n        return False   \n    elif root.val == key:\n        return True\n    else:\n        if key < root.val:\n            return search(root.left, key)\n        else:\n            return search(root.right, key)\n    \n#    else:\n#        left = False\n#        if (root.left != None):\n#            left = search(root.left, key) \n#            \n#        right = False\n#        if (root.right != None):\n#            right = search(root.right, key)\n#       \n#        return (left or right)', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 11}, {'action': 'move-left', 'root': 12, 'key': 11}, {'action': 'move-right', 'root': 9, 'key': 11}, {'action': 'move-right', 'root': 10, 'key': 11}, {'action': 'return-false', 'root': -1, 'key': 11}], '1': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '2': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-false', 'root': -1, 'key': 30}], '3': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '4': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-true', 'root': -1, 'key': 30}]}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    print("Root:" + str(root.val))\n    if root == None or root.val == None:\n        return root\n    \n    if key > root.val:\n        print("Right")\n        if root.right == None:\n            root.right = key\n        else:\n            root.right = insert(root.right, key)\n    else:\n        print("Left")\n        if root.left == None:\n            print("nothing here")\n            k = Node(key)\n            root.left = k\n        else:\n            print("something here")\n            root.left = insert(root.left, key)\n    return root', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 14}, {'action': 'move-right', 'root': 12, 'key': 14}, {'action': 'move-left', 'root': 15, 'key': 14}, {'action': 'move-right', 'root': 13, 'key': 14}, {'action': 'insert', 'root': -1, 'key': 14}], '1': [{'action': 'move-right', 'root': 5, 'key': 6}, {'action': 'move-left', 'root': 7, 'key': 6}, {'action': 'insert', 'root': -1, 'key': 6}], '2': [{'action': 'move-left', 'root': 8, 'key': 2}, {'action': 'move-left', 'root': 3, 'key': 2}, {'action': 'move-right', 'root': 1, 'key': 2}, {'action': 'insert', 'root': -1, 'key': 2}], '3': [{'action': 'move-left', 'root': 50, 'key': 43}, {'action': 'move-right', 'root': 17, 'key': 43}, {'action': 'move-right', 'root': 23, 'key': 43}, {'action': 'insert', 'root': -1, 'key': 43}], '4': [{'action': 'move-right', 'root': 5, 'key': 9}, {'action': 'move-right', 'root': 7, 'key': 9}, {'action': 'insert', 'root': -1, 'key': 9}], '5': [{'action': 'move-right', 'root': 8, 'key': 15}, {'action': 'move-right', 'root': 10, 'key': 15}, {'action': 'move-right', 'root': 12, 'key': 15}, {'action': 'move-right', 'root': 13, 'key': 15}, {'action': 'insert', 'root': -1, 'key': 15}], '6': [{'action': 'move-left', 'root': 50, 'key': 43}, {'action': 'move-right', 'root': 17, 'key': 43}, {'action': 'move-right', 'root': 23, 'key': 43}, {'action': 'insert', 'root': -1, 'key': 43}]}}}
2021-02-22 17:23:33.913684,insert,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root == None:\n        return False   \n    if root.val == None:\n        return False   \n    elif root.val == key:\n        return True\n    else:\n        if key < root.val:\n            return search(root.left, key)\n        else:\n            return search(root.right, key)\n    \n#    else:\n#        left = False\n#        if (root.left != None):\n#            left = search(root.left, key) \n#            \n#        right = False\n#        if (root.right != None):\n#            right = search(root.right, key)\n#       \n#        return (left or right)', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 11}, {'action': 'move-left', 'root': 12, 'key': 11}, {'action': 'move-right', 'root': 9, 'key': 11}, {'action': 'move-right', 'root': 10, 'key': 11}, {'action': 'return-false', 'root': -1, 'key': 11}], '1': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '2': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-false', 'root': -1, 'key': 30}], '3': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '4': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-true', 'root': -1, 'key': 30}]}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    print("Root:" + str(root.val))\n    if root == None or root.val == None:\n        return root\n    \n    if key > root.val:\n        print("Right")\n        if root.right == None:\n            k = Node(key)\n            root.left = k\n        else:\n            root.right = insert(root.right, key)\n    else:\n        print("Left")\n        if root.left == None:\n            print("nothing here")\n            k = Node(key)\n            root.left = k\n        else:\n            print("something here")\n            root.left = insert(root.left, key)\n    return root', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 14}, {'action': 'move-right', 'root': 12, 'key': 14}, {'action': 'move-left', 'root': 15, 'key': 14}, {'action': 'move-right', 'root': 13, 'key': 14}, {'action': 'insert', 'root': -1, 'key': 14}], '1': [{'action': 'move-right', 'root': 5, 'key': 6}, {'action': 'move-left', 'root': 7, 'key': 6}, {'action': 'insert', 'root': -1, 'key': 6}], '2': [{'action': 'move-left', 'root': 8, 'key': 2}, {'action': 'move-left', 'root': 3, 'key': 2}, {'action': 'move-right', 'root': 1, 'key': 2}, {'action': 'insert', 'root': -1, 'key': 2}], '3': [{'action': 'move-left', 'root': 50, 'key': 43}, {'action': 'move-right', 'root': 17, 'key': 43}, {'action': 'move-right', 'root': 23, 'key': 43}, {'action': 'insert', 'root': -1, 'key': 43}], '4': [{'action': 'move-right', 'root': 5, 'key': 9}, {'action': 'move-right', 'root': 7, 'key': 9}, {'action': 'insert', 'root': -1, 'key': 9}], '5': [{'action': 'move-right', 'root': 8, 'key': 15}, {'action': 'move-right', 'root': 10, 'key': 15}, {'action': 'move-right', 'root': 12, 'key': 15}, {'action': 'move-right', 'root': 13, 'key': 15}, {'action': 'insert', 'root': -1, 'key': 15}], '6': [{'action': 'move-left', 'root': 50, 'key': 43}, {'action': 'move-right', 'root': 17, 'key': 43}, {'action': 'move-right', 'root': 23, 'key': 43}, {'action': 'insert', 'root': -1, 'key': 43}]}}}
2021-02-22 17:23:50.425941,insert,check-correct,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root == None:\n        return False   \n    if root.val == None:\n        return False   \n    elif root.val == key:\n        return True\n    else:\n        if key < root.val:\n            return search(root.left, key)\n        else:\n            return search(root.right, key)\n    \n#    else:\n#        left = False\n#        if (root.left != None):\n#            left = search(root.left, key) \n#            \n#        right = False\n#        if (root.right != None):\n#            right = search(root.right, key)\n#       \n#        return (left or right)', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 11}, {'action': 'move-left', 'root': 12, 'key': 11}, {'action': 'move-right', 'root': 9, 'key': 11}, {'action': 'move-right', 'root': 10, 'key': 11}, {'action': 'return-false', 'root': -1, 'key': 11}], '1': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '2': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-false', 'root': -1, 'key': 30}], '3': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '4': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-true', 'root': -1, 'key': 30}]}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    print("Root:" + str(root.val))\n    if root == None or root.val == None:\n        return root\n    \n    if key > root.val:\n        print("Right")\n        if root.right == None:\n            k = Node(key)\n            root.left = k\n        else:\n            root.right = insert(root.right, key)\n    else:\n        print("Left")\n        if root.left == None:\n            print("nothing here")\n            k = Node(key)\n            root.left = k\n        else:\n            print("something here")\n            root.left = insert(root.left, key)\n    return root', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 14}, {'action': 'move-right', 'root': 12, 'key': 14}, {'action': 'move-left', 'root': 15, 'key': 14}, {'action': 'move-right', 'root': 13, 'key': 14}, {'action': 'insert', 'root': -1, 'key': 14}], '1': [{'action': 'move-right', 'root': 5, 'key': 6}, {'action': 'move-left', 'root': 7, 'key': 6}, {'action': 'insert', 'root': -1, 'key': 6}], '2': [{'action': 'move-left', 'root': 8, 'key': 2}, {'action': 'move-left', 'root': 3, 'key': 2}, {'action': 'move-right', 'root': 1, 'key': 2}, {'action': 'insert', 'root': -1, 'key': 2}], '3': [{'action': 'move-left', 'root': 50, 'key': 43}, {'action': 'move-right', 'root': 17, 'key': 43}, {'action': 'move-right', 'root': 23, 'key': 43}, {'action': 'insert', 'root': -1, 'key': 43}], '4': [{'action': 'move-right', 'root': 5, 'key': 9}, {'action': 'move-right', 'root': 7, 'key': 9}, {'action': 'insert', 'root': -1, 'key': 9}], '5': [{'action': 'move-right', 'root': 8, 'key': 15}, {'action': 'move-right', 'root': 10, 'key': 15}, {'action': 'move-right', 'root': 12, 'key': 15}, {'action': 'move-right', 'root': 13, 'key': 15}, {'action': 'insert', 'root': -1, 'key': 15}], '6': [{'action': 'move-left', 'root': 50, 'key': 43}, {'action': 'move-right', 'root': 17, 'key': 43}, {'action': 'move-right', 'root': 23, 'key': 43}, {'action': 'insert', 'root': -1, 'key': 43}]}}}
2021-02-22 17:23:55.233488,insert,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root == None:\n        return False   \n    if root.val == None:\n        return False   \n    elif root.val == key:\n        return True\n    else:\n        if key < root.val:\n            return search(root.left, key)\n        else:\n            return search(root.right, key)\n    \n#    else:\n#        left = False\n#        if (root.left != None):\n#            left = search(root.left, key) \n#            \n#        right = False\n#        if (root.right != None):\n#            right = search(root.right, key)\n#       \n#        return (left or right)', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 11}, {'action': 'move-left', 'root': 12, 'key': 11}, {'action': 'move-right', 'root': 9, 'key': 11}, {'action': 'move-right', 'root': 10, 'key': 11}, {'action': 'return-false', 'root': -1, 'key': 11}], '1': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '2': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-false', 'root': -1, 'key': 30}], '3': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '4': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-true', 'root': -1, 'key': 30}]}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    print("Root:" + str(root.val))\n    if root == None or root.val == None:\n        return root\n    \n    if key > root.val:\n        print("Right")\n        if root.right == None:\n            k = Node(key)\n            root.left = k\n        else:\n            root.right = insert(root.right, key)\n    else:\n        print("Left")\n        if root.left == None:\n            print("nothing here")\n            k = Node(key)\n            root.left = k\n        else:\n            print("something here")\n            root.left = insert(root.left, key)\n    return root', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 14}, {'action': 'move-right', 'root': 12, 'key': 14}, {'action': 'move-left', 'root': 15, 'key': 14}, {'action': 'move-right', 'root': 13, 'key': 14}, {'action': 'insert', 'root': -1, 'key': 14}], '1': [{'action': 'move-right', 'root': 5, 'key': 6}, {'action': 'move-left', 'root': 7, 'key': 6}, {'action': 'insert', 'root': -1, 'key': 6}], '2': [{'action': 'move-left', 'root': 8, 'key': 2}, {'action': 'move-left', 'root': 3, 'key': 2}, {'action': 'move-right', 'root': 1, 'key': 2}, {'action': 'insert', 'root': -1, 'key': 2}], '3': [{'action': 'move-left', 'root': 50, 'key': 43}, {'action': 'move-right', 'root': 17, 'key': 43}, {'action': 'move-right', 'root': 23, 'key': 43}, {'action': 'insert', 'root': -1, 'key': 43}], '4': [{'action': 'move-right', 'root': 5, 'key': 9}, {'action': 'move-right', 'root': 7, 'key': 9}, {'action': 'insert', 'root': -1, 'key': 9}], '5': [{'action': 'move-right', 'root': 8, 'key': 15}, {'action': 'move-right', 'root': 10, 'key': 15}, {'action': 'move-right', 'root': 12, 'key': 15}, {'action': 'move-right', 'root': 13, 'key': 15}, {'action': 'insert', 'root': -1, 'key': 15}], '6': [{'action': 'move-left', 'root': 50, 'key': 43}, {'action': 'move-right', 'root': 17, 'key': 43}, {'action': 'move-right', 'root': 23, 'key': 43}, {'action': 'insert', 'root': -1, 'key': 43}]}}}
2021-02-22 17:24:47.769017,insert,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root == None:\n        return False   \n    if root.val == None:\n        return False   \n    elif root.val == key:\n        return True\n    else:\n        if key < root.val:\n            return search(root.left, key)\n        else:\n            return search(root.right, key)\n    \n#    else:\n#        left = False\n#        if (root.left != None):\n#            left = search(root.left, key) \n#            \n#        right = False\n#        if (root.right != None):\n#            right = search(root.right, key)\n#       \n#        return (left or right)', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 11}, {'action': 'move-left', 'root': 12, 'key': 11}, {'action': 'move-right', 'root': 9, 'key': 11}, {'action': 'move-right', 'root': 10, 'key': 11}, {'action': 'return-false', 'root': -1, 'key': 11}], '1': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '2': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-false', 'root': -1, 'key': 30}], '3': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '4': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-true', 'root': -1, 'key': 30}]}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    print("Root:" + str(root.val))\n    if root == None or root.val == None:\n        return root\n    \n    if key > root.val:\n        print("Right")\n        if root.right == None:\n            print("--nothing here")\n            k = Node(key)\n            root.right = k\n        else:\n            print("--something here")\n            root.right = insert(root.right, key)\n    else:\n        print("Left")\n        if root.left == None:\n            print("--nothing here")\n            k = Node(key)\n            root.left = k\n        else:\n            print("--something here")\n            root.left = insert(root.left, key)\n    return root', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 14}, {'action': 'move-right', 'root': 12, 'key': 14}, {'action': 'move-left', 'root': 15, 'key': 14}, {'action': 'move-right', 'root': 13, 'key': 14}, {'action': 'insert', 'root': -1, 'key': 14}], '1': [{'action': 'move-right', 'root': 5, 'key': 6}, {'action': 'move-left', 'root': 7, 'key': 6}, {'action': 'insert', 'root': -1, 'key': 6}], '2': [{'action': 'move-left', 'root': 8, 'key': 2}, {'action': 'move-left', 'root': 3, 'key': 2}, {'action': 'move-right', 'root': 1, 'key': 2}, {'action': 'insert', 'root': -1, 'key': 2}], '3': [{'action': 'move-left', 'root': 50, 'key': 43}, {'action': 'move-right', 'root': 17, 'key': 43}, {'action': 'move-right', 'root': 23, 'key': 43}, {'action': 'insert', 'root': -1, 'key': 43}], '4': [{'action': 'move-right', 'root': 5, 'key': 9}, {'action': 'move-right', 'root': 7, 'key': 9}, {'action': 'insert', 'root': -1, 'key': 9}], '5': [{'action': 'move-right', 'root': 8, 'key': 15}, {'action': 'move-right', 'root': 10, 'key': 15}, {'action': 'move-right', 'root': 12, 'key': 15}, {'action': 'move-right', 'root': 13, 'key': 15}, {'action': 'insert', 'root': -1, 'key': 15}], '6': [{'action': 'move-left', 'root': 50, 'key': 43}, {'action': 'move-right', 'root': 17, 'key': 43}, {'action': 'move-right', 'root': 23, 'key': 43}, {'action': 'insert', 'root': -1, 'key': 43}]}}}
2021-02-22 17:24:52.248513,insert,check-correct,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root == None:\n        return False   \n    if root.val == None:\n        return False   \n    elif root.val == key:\n        return True\n    else:\n        if key < root.val:\n            return search(root.left, key)\n        else:\n            return search(root.right, key)\n    \n#    else:\n#        left = False\n#        if (root.left != None):\n#            left = search(root.left, key) \n#            \n#        right = False\n#        if (root.right != None):\n#            right = search(root.right, key)\n#       \n#        return (left or right)', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 11}, {'action': 'move-left', 'root': 12, 'key': 11}, {'action': 'move-right', 'root': 9, 'key': 11}, {'action': 'move-right', 'root': 10, 'key': 11}, {'action': 'return-false', 'root': -1, 'key': 11}], '1': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '2': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-false', 'root': -1, 'key': 30}], '3': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '4': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-true', 'root': -1, 'key': 30}]}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    print("Root:" + str(root.val))\n    if root == None or root.val == None:\n        return root\n    \n    if key > root.val:\n        print("Right")\n        if root.right == None:\n            print("--nothing here")\n            k = Node(key)\n            root.right = k\n        else:\n            print("--something here")\n            root.right = insert(root.right, key)\n    else:\n        print("Left")\n        if root.left == None:\n            print("--nothing here")\n            k = Node(key)\n            root.left = k\n        else:\n            print("--something here")\n            root.left = insert(root.left, key)\n    return root', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 14}, {'action': 'move-right', 'root': 12, 'key': 14}, {'action': 'move-left', 'root': 15, 'key': 14}, {'action': 'move-right', 'root': 13, 'key': 14}, {'action': 'insert', 'root': -1, 'key': 14}], '1': [{'action': 'move-right', 'root': 5, 'key': 6}, {'action': 'move-left', 'root': 7, 'key': 6}, {'action': 'insert', 'root': -1, 'key': 6}], '2': [{'action': 'move-left', 'root': 8, 'key': 2}, {'action': 'move-left', 'root': 3, 'key': 2}, {'action': 'move-right', 'root': 1, 'key': 2}, {'action': 'insert', 'root': -1, 'key': 2}], '3': [{'action': 'move-left', 'root': 50, 'key': 43}, {'action': 'move-right', 'root': 17, 'key': 43}, {'action': 'move-right', 'root': 23, 'key': 43}, {'action': 'insert', 'root': -1, 'key': 43}], '4': [{'action': 'move-right', 'root': 5, 'key': 9}, {'action': 'move-right', 'root': 7, 'key': 9}, {'action': 'insert', 'root': -1, 'key': 9}], '5': [{'action': 'move-right', 'root': 8, 'key': 15}, {'action': 'move-right', 'root': 10, 'key': 15}, {'action': 'move-right', 'root': 12, 'key': 15}, {'action': 'move-right', 'root': 13, 'key': 15}, {'action': 'insert', 'root': -1, 'key': 15}], '6': [{'action': 'move-left', 'root': 50, 'key': 43}, {'action': 'move-right', 'root': 17, 'key': 43}, {'action': 'move-right', 'root': 23, 'key': 43}, {'action': 'insert', 'root': -1, 'key': 43}]}}}
2021-02-22 17:24:55.190473,insert,check-correct,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root == None:\n        return False   \n    if root.val == None:\n        return False   \n    elif root.val == key:\n        return True\n    else:\n        if key < root.val:\n            return search(root.left, key)\n        else:\n            return search(root.right, key)\n    \n#    else:\n#        left = False\n#        if (root.left != None):\n#            left = search(root.left, key) \n#            \n#        right = False\n#        if (root.right != None):\n#            right = search(root.right, key)\n#       \n#        return (left or right)', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 11}, {'action': 'move-left', 'root': 12, 'key': 11}, {'action': 'move-right', 'root': 9, 'key': 11}, {'action': 'move-right', 'root': 10, 'key': 11}, {'action': 'return-false', 'root': -1, 'key': 11}], '1': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '2': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-false', 'root': -1, 'key': 30}], '3': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '4': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-true', 'root': -1, 'key': 30}]}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    print("Root:" + str(root.val))\n    if root == None or root.val == None:\n        return root\n    \n    if key > root.val:\n        print("Right")\n        if root.right == None:\n            print("--nothing here")\n            k = Node(key)\n            root.right = k\n        else:\n            print("--something here")\n            root.right = insert(root.right, key)\n    else:\n        print("Left")\n        if root.left == None:\n            print("--nothing here")\n            k = Node(key)\n            root.left = k\n        else:\n            print("--something here")\n            root.left = insert(root.left, key)\n    return root', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 14}, {'action': 'move-right', 'root': 12, 'key': 14}, {'action': 'move-left', 'root': 15, 'key': 14}, {'action': 'move-right', 'root': 13, 'key': 14}, {'action': 'insert', 'root': -1, 'key': 14}], '1': [{'action': 'move-right', 'root': 5, 'key': 6}, {'action': 'move-left', 'root': 7, 'key': 6}, {'action': 'insert', 'root': -1, 'key': 6}], '2': [{'action': 'move-left', 'root': 8, 'key': 2}, {'action': 'move-left', 'root': 3, 'key': 2}, {'action': 'move-right', 'root': 1, 'key': 2}, {'action': 'insert', 'root': -1, 'key': 2}], '3': [{'action': 'move-left', 'root': 50, 'key': 43}, {'action': 'move-right', 'root': 17, 'key': 43}, {'action': 'move-right', 'root': 23, 'key': 43}, {'action': 'insert', 'root': -1, 'key': 43}], '4': [{'action': 'move-right', 'root': 5, 'key': 9}, {'action': 'move-right', 'root': 7, 'key': 9}, {'action': 'insert', 'root': -1, 'key': 9}], '5': [{'action': 'move-right', 'root': 8, 'key': 15}, {'action': 'move-right', 'root': 10, 'key': 15}, {'action': 'move-right', 'root': 12, 'key': 15}, {'action': 'move-right', 'root': 13, 'key': 15}, {'action': 'insert', 'root': -1, 'key': 15}], '6': [{'action': 'move-left', 'root': 50, 'key': 43}, {'action': 'move-right', 'root': 17, 'key': 43}, {'action': 'move-right', 'root': 23, 'key': 43}, {'action': 'insert', 'root': -1, 'key': 43}]}}}
2021-02-22 17:25:29.342167,insert,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root == None:\n        return False   \n    if root.val == None:\n        return False   \n    elif root.val == key:\n        return True\n    else:\n        if key < root.val:\n            return search(root.left, key)\n        else:\n            return search(root.right, key)\n    \n#    else:\n#        left = False\n#        if (root.left != None):\n#            left = search(root.left, key) \n#            \n#        right = False\n#        if (root.right != None):\n#            right = search(root.right, key)\n#       \n#        return (left or right)', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 11}, {'action': 'move-left', 'root': 12, 'key': 11}, {'action': 'move-right', 'root': 9, 'key': 11}, {'action': 'move-right', 'root': 10, 'key': 11}, {'action': 'return-false', 'root': -1, 'key': 11}], '1': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '2': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-false', 'root': -1, 'key': 30}], '3': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '4': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-true', 'root': -1, 'key': 30}]}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    print("Root:" + str(root.val))\n    if root == None or root.val == None:\n        return root\n    \n    if key > root.val:\n        print("Right")\n        if root.right == None:\n            print("--nothing here")\n            k = Node(key)\n            root.right = k\n        else:\n            print("--something here")\n            root.right = insert(root.right, key)\n    else:\n        print("Left")\n        if root.left == None:\n            print("--nothing here")\n            k = Node(key)\n            root.left = k\n        else:\n            print("--something here")\n            root.left = insert(root.left, key)\n    return root', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 14}, {'action': 'move-right', 'root': 12, 'key': 14}, {'action': 'move-left', 'root': 15, 'key': 14}, {'action': 'move-right', 'root': 13, 'key': 14}, {'action': 'insert', 'root': -1, 'key': 14}], '1': [{'action': 'move-right', 'root': 5, 'key': 6}, {'action': 'move-left', 'root': 7, 'key': 6}, {'action': 'insert', 'root': -1, 'key': 6}], '2': [{'action': 'move-left', 'root': 8, 'key': 2}, {'action': 'move-left', 'root': 3, 'key': 2}, {'action': 'move-right', 'root': 1, 'key': 2}, {'action': 'insert', 'root': -1, 'key': 2}], '3': [{'action': 'move-left', 'root': 50, 'key': 43}, {'action': 'move-right', 'root': 17, 'key': 43}, {'action': 'move-right', 'root': 23, 'key': 43}, {'action': 'insert', 'root': -1, 'key': 43}], '4': [{'action': 'move-right', 'root': 5, 'key': 9}, {'action': 'move-right', 'root': 7, 'key': 9}, {'action': 'insert', 'root': -1, 'key': 9}], '5': [{'action': 'move-right', 'root': 8, 'key': 15}, {'action': 'move-right', 'root': 10, 'key': 15}, {'action': 'move-right', 'root': 12, 'key': 15}, {'action': 'move-right', 'root': 13, 'key': 15}, {'action': 'insert', 'root': -1, 'key': 15}], '6': [{'action': 'move-left', 'root': 50, 'key': 43}, {'action': 'move-right', 'root': 17, 'key': 43}, {'action': 'move-right', 'root': 23, 'key': 43}, {'action': 'insert', 'root': -1, 'key': 43}]}}}
2021-02-22 17:26:07.946838,insert,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root == None:\n        return False   \n    if root.val == None:\n        return False   \n    elif root.val == key:\n        return True\n    else:\n        if key < root.val:\n            return search(root.left, key)\n        else:\n            return search(root.right, key)\n    \n#    else:\n#        left = False\n#        if (root.left != None):\n#            left = search(root.left, key) \n#            \n#        right = False\n#        if (root.right != None):\n#            right = search(root.right, key)\n#       \n#        return (left or right)', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 11}, {'action': 'move-left', 'root': 12, 'key': 11}, {'action': 'move-right', 'root': 9, 'key': 11}, {'action': 'move-right', 'root': 10, 'key': 11}, {'action': 'return-false', 'root': -1, 'key': 11}], '1': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '2': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-false', 'root': -1, 'key': 30}], '3': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '4': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-true', 'root': -1, 'key': 30}]}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    #print("Root:" + str(root.val))\n    if root == None or root.val == None:\n        return root\n    if key > root.val:\n        #print("Right")\n        if root.right == None:\n            #print("--nothing here")\n            k = Node(key)\n            root.right = k\n        else:\n            #print("--something here")\n            root.right = insert(root.right, key)\n    else:\n        #print("Left")\n        if root.left == None:\n            #print("--nothing here")\n            k = Node(key)\n            root.left = k\n        else:\n            #print("--something here")\n            root.left = insert(root.left, key)\n    return root', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 14}, {'action': 'move-right', 'root': 12, 'key': 14}, {'action': 'move-left', 'root': 15, 'key': 14}, {'action': 'move-right', 'root': 13, 'key': 14}, {'action': 'insert', 'root': -1, 'key': 14}], '1': [{'action': 'move-right', 'root': 5, 'key': 6}, {'action': 'move-left', 'root': 7, 'key': 6}, {'action': 'insert', 'root': -1, 'key': 6}], '2': [{'action': 'move-left', 'root': 8, 'key': 2}, {'action': 'move-left', 'root': 3, 'key': 2}, {'action': 'move-right', 'root': 1, 'key': 2}, {'action': 'insert', 'root': -1, 'key': 2}], '3': [{'action': 'move-left', 'root': 50, 'key': 43}, {'action': 'move-right', 'root': 17, 'key': 43}, {'action': 'move-right', 'root': 23, 'key': 43}, {'action': 'insert', 'root': -1, 'key': 43}], '4': [{'action': 'move-right', 'root': 5, 'key': 9}, {'action': 'move-right', 'root': 7, 'key': 9}, {'action': 'insert', 'root': -1, 'key': 9}], '5': [{'action': 'move-right', 'root': 8, 'key': 15}, {'action': 'move-right', 'root': 10, 'key': 15}, {'action': 'move-right', 'root': 12, 'key': 15}, {'action': 'move-right', 'root': 13, 'key': 15}, {'action': 'insert', 'root': -1, 'key': 15}], '6': [{'action': 'move-left', 'root': 50, 'key': 43}, {'action': 'move-right', 'root': 17, 'key': 43}, {'action': 'move-right', 'root': 23, 'key': 43}, {'action': 'insert', 'root': -1, 'key': 43}]}}}
2021-02-22 17:26:10.136749,insert,check-correct,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root == None:\n        return False   \n    if root.val == None:\n        return False   \n    elif root.val == key:\n        return True\n    else:\n        if key < root.val:\n            return search(root.left, key)\n        else:\n            return search(root.right, key)\n    \n#    else:\n#        left = False\n#        if (root.left != None):\n#            left = search(root.left, key) \n#            \n#        right = False\n#        if (root.right != None):\n#            right = search(root.right, key)\n#       \n#        return (left or right)', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 11}, {'action': 'move-left', 'root': 12, 'key': 11}, {'action': 'move-right', 'root': 9, 'key': 11}, {'action': 'move-right', 'root': 10, 'key': 11}, {'action': 'return-false', 'root': -1, 'key': 11}], '1': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '2': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-false', 'root': -1, 'key': 30}], '3': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '4': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-true', 'root': -1, 'key': 30}]}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    #print("Root:" + str(root.val))\n    if root == None or root.val == None:\n        return root\n    if key > root.val:\n        #print("Right")\n        if root.right == None:\n            #print("--nothing here")\n            k = Node(key)\n            root.right = k\n        else:\n            #print("--something here")\n            root.right = insert(root.right, key)\n    else:\n        #print("Left")\n        if root.left == None:\n            #print("--nothing here")\n            k = Node(key)\n            root.left = k\n        else:\n            #print("--something here")\n            root.left = insert(root.left, key)\n    return root', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 14}, {'action': 'move-right', 'root': 12, 'key': 14}, {'action': 'move-left', 'root': 15, 'key': 14}, {'action': 'move-right', 'root': 13, 'key': 14}, {'action': 'insert', 'root': -1, 'key': 14}], '1': [{'action': 'move-right', 'root': 5, 'key': 6}, {'action': 'move-left', 'root': 7, 'key': 6}, {'action': 'insert', 'root': -1, 'key': 6}], '2': [{'action': 'move-left', 'root': 8, 'key': 2}, {'action': 'move-left', 'root': 3, 'key': 2}, {'action': 'move-right', 'root': 1, 'key': 2}, {'action': 'insert', 'root': -1, 'key': 2}], '3': [{'action': 'move-left', 'root': 50, 'key': 43}, {'action': 'move-right', 'root': 17, 'key': 43}, {'action': 'move-right', 'root': 23, 'key': 43}, {'action': 'insert', 'root': -1, 'key': 43}], '4': [{'action': 'move-right', 'root': 5, 'key': 9}, {'action': 'move-right', 'root': 7, 'key': 9}, {'action': 'insert', 'root': -1, 'key': 9}], '5': [{'action': 'move-right', 'root': 8, 'key': 15}, {'action': 'move-right', 'root': 10, 'key': 15}, {'action': 'move-right', 'root': 12, 'key': 15}, {'action': 'move-right', 'root': 13, 'key': 15}, {'action': 'insert', 'root': -1, 'key': 15}], '6': [{'action': 'move-left', 'root': 50, 'key': 43}, {'action': 'move-right', 'root': 17, 'key': 43}, {'action': 'move-right', 'root': 23, 'key': 43}, {'action': 'insert', 'root': -1, 'key': 43}]}}}
2021-02-22 17:26:28.931281,insert,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root == None:\n        return False   \n    if root.val == None:\n        return False   \n    elif root.val == key:\n        return True\n    else:\n        if key < root.val:\n            return search(root.left, key)\n        else:\n            return search(root.right, key)\n    \n#    else:\n#        left = False\n#        if (root.left != None):\n#            left = search(root.left, key) \n#            \n#        right = False\n#        if (root.right != None):\n#            right = search(root.right, key)\n#       \n#        return (left or right)', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 11}, {'action': 'move-left', 'root': 12, 'key': 11}, {'action': 'move-right', 'root': 9, 'key': 11}, {'action': 'move-right', 'root': 10, 'key': 11}, {'action': 'return-false', 'root': -1, 'key': 11}], '1': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '2': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-false', 'root': -1, 'key': 30}], '3': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '4': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-true', 'root': -1, 'key': 30}]}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    #print("Root:" + str(root.val))\n    if root == None or root.val == None:\n        return root\n    if key > root.val:\n        #print("Right")\n        if root.right == None:\n            #print("--nothing here")\n            k = Node(key)\n            root.right = k\n        else:\n            #print("--something here")\n            root.right = insert(root.right, key)\n    else:\n        #print("Left")\n        if root.left == None:\n            #print("--nothing here")\n            k = Node(key)\n            root.left = k\n        else:\n            #print("--something here")\n            root.left = insert(root.left, key)\n    return root', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 14}, {'action': 'move-right', 'root': 12, 'key': 14}, {'action': 'move-left', 'root': 15, 'key': 14}, {'action': 'move-right', 'root': 13, 'key': 14}, {'action': 'insert', 'root': -1, 'key': 14}], '1': [{'action': 'move-right', 'root': 5, 'key': 6}, {'action': 'move-left', 'root': 7, 'key': 6}, {'action': 'insert', 'root': -1, 'key': 6}], '2': [{'action': 'move-left', 'root': 8, 'key': 2}, {'action': 'move-left', 'root': 3, 'key': 2}, {'action': 'move-right', 'root': 1, 'key': 2}, {'action': 'insert', 'root': -1, 'key': 2}], '3': [{'action': 'move-left', 'root': 50, 'key': 43}, {'action': 'move-right', 'root': 17, 'key': 43}, {'action': 'move-right', 'root': 23, 'key': 43}, {'action': 'insert', 'root': -1, 'key': 43}], '4': [{'action': 'move-right', 'root': 5, 'key': 9}, {'action': 'move-right', 'root': 7, 'key': 9}, {'action': 'insert', 'root': -1, 'key': 9}], '5': [{'action': 'move-right', 'root': 8, 'key': 15}, {'action': 'move-right', 'root': 10, 'key': 15}, {'action': 'move-right', 'root': 12, 'key': 15}, {'action': 'move-right', 'root': 13, 'key': 15}, {'action': 'insert', 'root': -1, 'key': 15}], '6': [{'action': 'move-left', 'root': 50, 'key': 43}, {'action': 'move-right', 'root': 17, 'key': 43}, {'action': 'move-right', 'root': 23, 'key': 43}, {'action': 'insert', 'root': -1, 'key': 43}]}}}
2021-02-22 17:26:41.319097,insert,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root == None:\n        return False   \n    if root.val == None:\n        return False   \n    elif root.val == key:\n        return True\n    else:\n        if key < root.val:\n            return search(root.left, key)\n        else:\n            return search(root.right, key)\n    \n#    else:\n#        left = False\n#        if (root.left != None):\n#            left = search(root.left, key) \n#            \n#        right = False\n#        if (root.right != None):\n#            right = search(root.right, key)\n#       \n#        return (left or right)', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 11}, {'action': 'move-left', 'root': 12, 'key': 11}, {'action': 'move-right', 'root': 9, 'key': 11}, {'action': 'move-right', 'root': 10, 'key': 11}, {'action': 'return-false', 'root': -1, 'key': 11}], '1': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '2': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-false', 'root': -1, 'key': 30}], '3': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '4': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-true', 'root': -1, 'key': 30}]}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    #print("Root:" + str(root.val))\n    if root == None or root.val == None:\n        return root\n    if key > root.val:\n        #print("Right")\n        if root.right == None:\n            #print("--nothing here")\n            k = Node(key)\n            root.right = k\n        else:\n            #print("--something here")\n            root.right = insert(root.right, key)\n    else:\n        #print("Left")\n        if root.left == None:\n            #print("--nothing here")\n            k = Node(key)\n            root.left = k\n        else:\n            #print("--something here")\n            root.left = insert(root.left, key)\n    return root', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 14}, {'action': 'move-right', 'root': 12, 'key': 14}, {'action': 'move-left', 'root': 15, 'key': 14}, {'action': 'move-right', 'root': 13, 'key': 14}, {'action': 'insert', 'root': -1, 'key': 14}], '1': [{'action': 'move-right', 'root': 5, 'key': 6}, {'action': 'move-left', 'root': 7, 'key': 6}, {'action': 'insert', 'root': -1, 'key': 6}], '2': [{'action': 'move-left', 'root': 8, 'key': 2}, {'action': 'move-left', 'root': 3, 'key': 2}, {'action': 'move-right', 'root': 1, 'key': 2}, {'action': 'insert', 'root': -1, 'key': 2}], '3': [{'action': 'move-left', 'root': 50, 'key': 43}, {'action': 'move-right', 'root': 17, 'key': 43}, {'action': 'move-right', 'root': 23, 'key': 43}, {'action': 'insert', 'root': -1, 'key': 43}], '4': [{'action': 'move-right', 'root': 5, 'key': 9}, {'action': 'move-right', 'root': 7, 'key': 9}, {'action': 'insert', 'root': -1, 'key': 9}], '5': [{'action': 'move-right', 'root': 8, 'key': 15}, {'action': 'move-right', 'root': 10, 'key': 15}, {'action': 'move-right', 'root': 12, 'key': 15}, {'action': 'move-right', 'root': 13, 'key': 15}, {'action': 'insert', 'root': -1, 'key': 15}], '6': [{'action': 'move-left', 'root': 50, 'key': 43}, {'action': 'move-right', 'root': 17, 'key': 43}, {'action': 'move-right', 'root': 23, 'key': 43}, {'action': 'insert', 'root': -1, 'key': 43}]}}}
2021-02-22 17:26:51.692038,insert,check-correct,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root == None:\n        return False   \n    if root.val == None:\n        return False   \n    elif root.val == key:\n        return True\n    else:\n        if key < root.val:\n            return search(root.left, key)\n        else:\n            return search(root.right, key)\n    \n#    else:\n#        left = False\n#        if (root.left != None):\n#            left = search(root.left, key) \n#            \n#        right = False\n#        if (root.right != None):\n#            right = search(root.right, key)\n#       \n#        return (left or right)', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 11}, {'action': 'move-left', 'root': 12, 'key': 11}, {'action': 'move-right', 'root': 9, 'key': 11}, {'action': 'move-right', 'root': 10, 'key': 11}, {'action': 'return-false', 'root': -1, 'key': 11}], '1': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '2': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-false', 'root': -1, 'key': 30}], '3': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '4': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-true', 'root': -1, 'key': 30}]}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    #print("Root:" + str(root.val))\n    if root == None or root.val == None:\n        return root\n    if key > root.val:\n        #print("Right")\n        if root.right == None:\n            #print("--nothing here")\n            k = Node(key)\n            root.right = k\n        else:\n            #print("--something here")\n            root.right = insert(root.right, key)\n    else:\n        #print("Left")\n        if root.left == None:\n            #print("--nothing here")\n            k = Node(key)\n            root.left = k\n        else:\n            #print("--something here")\n            root.left = insert(root.left, key)\n    return root', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 14}, {'action': 'move-right', 'root': 12, 'key': 14}, {'action': 'move-left', 'root': 15, 'key': 14}, {'action': 'move-right', 'root': 13, 'key': 14}, {'action': 'insert', 'root': -1, 'key': 14}], '1': [{'action': 'move-right', 'root': 5, 'key': 6}, {'action': 'move-left', 'root': 7, 'key': 6}, {'action': 'insert', 'root': -1, 'key': 6}], '2': [{'action': 'move-left', 'root': 8, 'key': 2}, {'action': 'move-left', 'root': 3, 'key': 2}, {'action': 'move-right', 'root': 1, 'key': 2}, {'action': 'insert', 'root': -1, 'key': 2}], '3': [{'action': 'move-left', 'root': 50, 'key': 43}, {'action': 'move-right', 'root': 17, 'key': 43}, {'action': 'move-right', 'root': 23, 'key': 43}, {'action': 'insert', 'root': -1, 'key': 43}], '4': [{'action': 'move-right', 'root': 5, 'key': 9}, {'action': 'move-right', 'root': 7, 'key': 9}, {'action': 'insert', 'root': -1, 'key': 9}], '5': [{'action': 'move-right', 'root': 8, 'key': 15}, {'action': 'move-right', 'root': 10, 'key': 15}, {'action': 'move-right', 'root': 12, 'key': 15}, {'action': 'move-right', 'root': 13, 'key': 15}, {'action': 'insert', 'root': -1, 'key': 15}], '6': [{'action': 'move-left', 'root': 50, 'key': 43}, {'action': 'move-right', 'root': 17, 'key': 43}, {'action': 'move-right', 'root': 23, 'key': 43}, {'action': 'insert', 'root': -1, 'key': 43}]}}}
2021-02-22 17:27:06.757110,insert,check-correct,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root == None:\n        return False   \n    if root.val == None:\n        return False   \n    elif root.val == key:\n        return True\n    else:\n        if key < root.val:\n            return search(root.left, key)\n        else:\n            return search(root.right, key)\n    \n#    else:\n#        left = False\n#        if (root.left != None):\n#            left = search(root.left, key) \n#            \n#        right = False\n#        if (root.right != None):\n#            right = search(root.right, key)\n#       \n#        return (left or right)', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 11}, {'action': 'move-left', 'root': 12, 'key': 11}, {'action': 'move-right', 'root': 9, 'key': 11}, {'action': 'move-right', 'root': 10, 'key': 11}, {'action': 'return-false', 'root': -1, 'key': 11}], '1': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '2': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-false', 'root': -1, 'key': 30}], '3': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '4': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-true', 'root': -1, 'key': 30}]}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    #print("Root:" + str(root.val))\n    if root == None or root.val == None:\n        return root\n    if key > root.val:\n        #print("Right")\n        if root.right == None:\n            #print("--nothing here")\n            k = Node(key)\n            root.right = k\n        else:\n            #print("--something here")\n            root.right = insert(root.right, key)\n    else:\n        #print("Left")\n        if root.left == None:\n            #print("--nothing here")\n            k = Node(key)\n            root.left = k\n        else:\n            #print("--something here")\n            root.left = insert(root.left, key)\n    return root', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 14}, {'action': 'move-right', 'root': 12, 'key': 14}, {'action': 'move-left', 'root': 15, 'key': 14}, {'action': 'move-right', 'root': 13, 'key': 14}, {'action': 'insert', 'root': -1, 'key': 14}], '1': [{'action': 'move-right', 'root': 5, 'key': 6}, {'action': 'move-left', 'root': 7, 'key': 6}, {'action': 'insert', 'root': -1, 'key': 6}], '2': [{'action': 'move-left', 'root': 8, 'key': 2}, {'action': 'move-left', 'root': 3, 'key': 2}, {'action': 'move-right', 'root': 1, 'key': 2}, {'action': 'insert', 'root': -1, 'key': 2}], '3': [{'action': 'move-left', 'root': 50, 'key': 43}, {'action': 'move-right', 'root': 17, 'key': 43}, {'action': 'move-right', 'root': 23, 'key': 43}, {'action': 'insert', 'root': -1, 'key': 43}], '4': [{'action': 'move-right', 'root': 5, 'key': 9}, {'action': 'move-right', 'root': 7, 'key': 9}, {'action': 'insert', 'root': -1, 'key': 9}], '5': [{'action': 'move-right', 'root': 8, 'key': 15}, {'action': 'move-right', 'root': 10, 'key': 15}, {'action': 'move-right', 'root': 12, 'key': 15}, {'action': 'move-right', 'root': 13, 'key': 15}, {'action': 'insert', 'root': -1, 'key': 15}], '6': [{'action': 'move-left', 'root': 50, 'key': 43}, {'action': 'move-right', 'root': 17, 'key': 43}, {'action': 'move-right', 'root': 23, 'key': 43}, {'action': 'insert', 'root': -1, 'key': 43}]}}}
2021-02-22 17:27:08.627638,insert,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root == None:\n        return False   \n    if root.val == None:\n        return False   \n    elif root.val == key:\n        return True\n    else:\n        if key < root.val:\n            return search(root.left, key)\n        else:\n            return search(root.right, key)\n    \n#    else:\n#        left = False\n#        if (root.left != None):\n#            left = search(root.left, key) \n#            \n#        right = False\n#        if (root.right != None):\n#            right = search(root.right, key)\n#       \n#        return (left or right)', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 11}, {'action': 'move-left', 'root': 12, 'key': 11}, {'action': 'move-right', 'root': 9, 'key': 11}, {'action': 'move-right', 'root': 10, 'key': 11}, {'action': 'return-false', 'root': -1, 'key': 11}], '1': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '2': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-false', 'root': -1, 'key': 30}], '3': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '4': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-true', 'root': -1, 'key': 30}]}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    #print("Root:" + str(root.val))\n    if root == None or root.val == None:\n        return root\n    if key > root.val:\n        #print("Right")\n        if root.right == None:\n            #print("--nothing here")\n            k = Node(key)\n            root.right = k\n        else:\n            #print("--something here")\n            root.right = insert(root.right, key)\n    else:\n        #print("Left")\n        if root.left == None:\n            #print("--nothing here")\n            k = Node(key)\n            root.left = k\n        else:\n            #print("--something here")\n            root.left = insert(root.left, key)\n    return root', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 14}, {'action': 'move-right', 'root': 12, 'key': 14}, {'action': 'move-left', 'root': 15, 'key': 14}, {'action': 'move-right', 'root': 13, 'key': 14}, {'action': 'insert', 'root': -1, 'key': 14}], '1': [{'action': 'move-right', 'root': 5, 'key': 6}, {'action': 'move-left', 'root': 7, 'key': 6}, {'action': 'insert', 'root': -1, 'key': 6}], '2': [{'action': 'move-left', 'root': 8, 'key': 2}, {'action': 'move-left', 'root': 3, 'key': 2}, {'action': 'move-right', 'root': 1, 'key': 2}, {'action': 'insert', 'root': -1, 'key': 2}], '3': [{'action': 'move-left', 'root': 50, 'key': 43}, {'action': 'move-right', 'root': 17, 'key': 43}, {'action': 'move-right', 'root': 23, 'key': 43}, {'action': 'insert', 'root': -1, 'key': 43}], '4': [{'action': 'move-right', 'root': 5, 'key': 9}, {'action': 'move-right', 'root': 7, 'key': 9}, {'action': 'insert', 'root': -1, 'key': 9}], '5': [{'action': 'move-right', 'root': 8, 'key': 15}, {'action': 'move-right', 'root': 10, 'key': 15}, {'action': 'move-right', 'root': 12, 'key': 15}, {'action': 'move-right', 'root': 13, 'key': 15}, {'action': 'insert', 'root': -1, 'key': 15}], '6': [{'action': 'move-left', 'root': 50, 'key': 43}, {'action': 'move-right', 'root': 17, 'key': 43}, {'action': 'move-right', 'root': 23, 'key': 43}, {'action': 'insert', 'root': -1, 'key': 43}]}}}
2021-02-22 17:27:10.522099,insert,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root == None:\n        return False   \n    if root.val == None:\n        return False   \n    elif root.val == key:\n        return True\n    else:\n        if key < root.val:\n            return search(root.left, key)\n        else:\n            return search(root.right, key)\n    \n#    else:\n#        left = False\n#        if (root.left != None):\n#            left = search(root.left, key) \n#            \n#        right = False\n#        if (root.right != None):\n#            right = search(root.right, key)\n#       \n#        return (left or right)', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 11}, {'action': 'move-left', 'root': 12, 'key': 11}, {'action': 'move-right', 'root': 9, 'key': 11}, {'action': 'move-right', 'root': 10, 'key': 11}, {'action': 'return-false', 'root': -1, 'key': 11}], '1': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '2': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-false', 'root': -1, 'key': 30}], '3': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '4': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-true', 'root': -1, 'key': 30}]}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    #print("Root:" + str(root.val))\n    if root == None or root.val == None:\n        return root\n    if key > root.val:\n        #print("Right")\n        if root.right == None:\n            #print("--nothing here")\n            k = Node(key)\n            root.right = k\n        else:\n            #print("--something here")\n            root.right = insert(root.right, key)\n    else:\n        #print("Left")\n        if root.left == None:\n            #print("--nothing here")\n            k = Node(key)\n            root.left = k\n        else:\n            #print("--something here")\n            root.left = insert(root.left, key)\n    return root', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 14}, {'action': 'move-right', 'root': 12, 'key': 14}, {'action': 'move-left', 'root': 15, 'key': 14}, {'action': 'move-right', 'root': 13, 'key': 14}, {'action': 'insert', 'root': -1, 'key': 14}], '1': [{'action': 'move-right', 'root': 5, 'key': 6}, {'action': 'move-left', 'root': 7, 'key': 6}, {'action': 'insert', 'root': -1, 'key': 6}], '2': [{'action': 'move-left', 'root': 8, 'key': 2}, {'action': 'move-left', 'root': 3, 'key': 2}, {'action': 'move-right', 'root': 1, 'key': 2}, {'action': 'insert', 'root': -1, 'key': 2}], '3': [{'action': 'move-left', 'root': 50, 'key': 43}, {'action': 'move-right', 'root': 17, 'key': 43}, {'action': 'move-right', 'root': 23, 'key': 43}, {'action': 'insert', 'root': -1, 'key': 43}], '4': [{'action': 'move-right', 'root': 5, 'key': 9}, {'action': 'move-right', 'root': 7, 'key': 9}, {'action': 'insert', 'root': -1, 'key': 9}], '5': [{'action': 'move-right', 'root': 8, 'key': 15}, {'action': 'move-right', 'root': 10, 'key': 15}, {'action': 'move-right', 'root': 12, 'key': 15}, {'action': 'move-right', 'root': 13, 'key': 15}, {'action': 'insert', 'root': -1, 'key': 15}], '6': [{'action': 'move-left', 'root': 50, 'key': 43}, {'action': 'move-right', 'root': 17, 'key': 43}, {'action': 'move-right', 'root': 23, 'key': 43}, {'action': 'insert', 'root': -1, 'key': 43}]}}}
2021-02-22 17:27:13.624164,insert,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root == None:\n        return False   \n    if root.val == None:\n        return False   \n    elif root.val == key:\n        return True\n    else:\n        if key < root.val:\n            return search(root.left, key)\n        else:\n            return search(root.right, key)\n    \n#    else:\n#        left = False\n#        if (root.left != None):\n#            left = search(root.left, key) \n#            \n#        right = False\n#        if (root.right != None):\n#            right = search(root.right, key)\n#       \n#        return (left or right)', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 11}, {'action': 'move-left', 'root': 12, 'key': 11}, {'action': 'move-right', 'root': 9, 'key': 11}, {'action': 'move-right', 'root': 10, 'key': 11}, {'action': 'return-false', 'root': -1, 'key': 11}], '1': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '2': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-false', 'root': -1, 'key': 30}], '3': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '4': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-true', 'root': -1, 'key': 30}]}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    #print("Root:" + str(root.val))\n    if root == None or root.val == None:\n        return root\n    if key > root.val:\n        #print("Right")\n        if root.right == None:\n            #print("--nothing here")\n            k = Node(key)\n            root.right = k\n        else:\n            #print("--something here")\n            root.right = insert(root.right, key)\n    else:\n        #print("Left")\n        if root.left == None:\n            #print("--nothing here")\n            k = Node(key)\n            root.left = k\n        else:\n            #print("--something here")\n            root.left = insert(root.left, key)\n    return root', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 14}, {'action': 'move-right', 'root': 12, 'key': 14}, {'action': 'move-left', 'root': 15, 'key': 14}, {'action': 'move-right', 'root': 13, 'key': 14}, {'action': 'insert', 'root': -1, 'key': 14}], '1': [{'action': 'move-right', 'root': 5, 'key': 6}, {'action': 'move-left', 'root': 7, 'key': 6}, {'action': 'insert', 'root': -1, 'key': 6}], '2': [{'action': 'move-left', 'root': 8, 'key': 2}, {'action': 'move-left', 'root': 3, 'key': 2}, {'action': 'move-right', 'root': 1, 'key': 2}, {'action': 'insert', 'root': -1, 'key': 2}], '3': [{'action': 'move-left', 'root': 50, 'key': 43}, {'action': 'move-right', 'root': 17, 'key': 43}, {'action': 'move-right', 'root': 23, 'key': 43}, {'action': 'insert', 'root': -1, 'key': 43}], '4': [{'action': 'move-right', 'root': 5, 'key': 9}, {'action': 'move-right', 'root': 7, 'key': 9}, {'action': 'insert', 'root': -1, 'key': 9}], '5': [{'action': 'move-right', 'root': 8, 'key': 15}, {'action': 'move-right', 'root': 10, 'key': 15}, {'action': 'move-right', 'root': 12, 'key': 15}, {'action': 'move-right', 'root': 13, 'key': 15}, {'action': 'insert', 'root': -1, 'key': 15}], '6': [{'action': 'move-left', 'root': 50, 'key': 43}, {'action': 'move-right', 'root': 17, 'key': 43}, {'action': 'move-right', 'root': 23, 'key': 43}, {'action': 'insert', 'root': -1, 'key': 43}]}}}
2021-02-22 17:27:29.085154,insert,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root == None:\n        return False   \n    if root.val == None:\n        return False   \n    elif root.val == key:\n        return True\n    else:\n        if key < root.val:\n            return search(root.left, key)\n        else:\n            return search(root.right, key)\n    \n#    else:\n#        left = False\n#        if (root.left != None):\n#            left = search(root.left, key) \n#            \n#        right = False\n#        if (root.right != None):\n#            right = search(root.right, key)\n#       \n#        return (left or right)', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 11}, {'action': 'move-left', 'root': 12, 'key': 11}, {'action': 'move-right', 'root': 9, 'key': 11}, {'action': 'move-right', 'root': 10, 'key': 11}, {'action': 'return-false', 'root': -1, 'key': 11}], '1': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '2': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-false', 'root': -1, 'key': 30}], '3': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '4': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-true', 'root': -1, 'key': 30}]}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    #print("Root:" + str(root.val))\n    if root == None or root.val == None:\n        return root\n    if key > root.val:\n        #print("Right")\n        if root.right == None:\n            #print("--nothing here")\n            k = Node(key)\n            root.right = k\n        else:\n            #print("--something here")\n            root.right = insert(root.right, key)\n    else:\n        #print("Left")\n        if root.left == None:\n            #print("--nothing here")\n            k = Node(key)\n            root.left = k\n        else:\n            #print("--something here")\n            root.left = insert(root.left, key)\n    return root', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 14}, {'action': 'move-right', 'root': 12, 'key': 14}, {'action': 'move-left', 'root': 15, 'key': 14}, {'action': 'move-right', 'root': 13, 'key': 14}, {'action': 'insert', 'root': -1, 'key': 14}], '1': [{'action': 'move-right', 'root': 5, 'key': 6}, {'action': 'move-left', 'root': 7, 'key': 6}, {'action': 'insert', 'root': -1, 'key': 6}], '2': [{'action': 'move-left', 'root': 8, 'key': 2}, {'action': 'move-left', 'root': 3, 'key': 2}, {'action': 'move-right', 'root': 1, 'key': 2}, {'action': 'insert', 'root': -1, 'key': 2}], '3': [{'action': 'move-left', 'root': 50, 'key': 43}, {'action': 'move-right', 'root': 17, 'key': 43}, {'action': 'move-right', 'root': 23, 'key': 43}, {'action': 'insert', 'root': -1, 'key': 43}], '4': [{'action': 'move-right', 'root': 5, 'key': 9}, {'action': 'move-right', 'root': 7, 'key': 9}, {'action': 'insert', 'root': -1, 'key': 9}], '5': [{'action': 'move-right', 'root': 8, 'key': 15}, {'action': 'move-right', 'root': 10, 'key': 15}, {'action': 'move-right', 'root': 12, 'key': 15}, {'action': 'move-right', 'root': 13, 'key': 15}, {'action': 'insert', 'root': -1, 'key': 15}], '6': [{'action': 'move-left', 'root': 50, 'key': 43}, {'action': 'move-right', 'root': 17, 'key': 43}, {'action': 'move-right', 'root': 23, 'key': 43}, {'action': 'insert', 'root': -1, 'key': 43}]}}}
2021-02-22 17:27:31.274192,insert,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root == None:\n        return False   \n    if root.val == None:\n        return False   \n    elif root.val == key:\n        return True\n    else:\n        if key < root.val:\n            return search(root.left, key)\n        else:\n            return search(root.right, key)\n    \n#    else:\n#        left = False\n#        if (root.left != None):\n#            left = search(root.left, key) \n#            \n#        right = False\n#        if (root.right != None):\n#            right = search(root.right, key)\n#       \n#        return (left or right)', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 11}, {'action': 'move-left', 'root': 12, 'key': 11}, {'action': 'move-right', 'root': 9, 'key': 11}, {'action': 'move-right', 'root': 10, 'key': 11}, {'action': 'return-false', 'root': -1, 'key': 11}], '1': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '2': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-false', 'root': -1, 'key': 30}], '3': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '4': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-true', 'root': -1, 'key': 30}]}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    #print("Root:" + str(root.val))\n    if root == None or root.val == None:\n        return root\n    if key > root.val:\n        #print("Right")\n        if root.right == None:\n            #print("--nothing here")\n            k = Node(key)\n            root.right = k\n        else:\n            #print("--something here")\n            root.right = insert(root.right, key)\n    else:\n        #print("Left")\n        if root.left == None:\n            #print("--nothing here")\n            k = Node(key)\n            root.left = k\n        else:\n            #print("--something here")\n            root.left = insert(root.left, key)\n    return root', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 14}, {'action': 'move-right', 'root': 12, 'key': 14}, {'action': 'move-left', 'root': 15, 'key': 14}, {'action': 'move-right', 'root': 13, 'key': 14}, {'action': 'insert', 'root': -1, 'key': 14}], '1': [{'action': 'move-right', 'root': 5, 'key': 6}, {'action': 'move-left', 'root': 7, 'key': 6}, {'action': 'insert', 'root': -1, 'key': 6}], '2': [{'action': 'move-left', 'root': 8, 'key': 2}, {'action': 'move-left', 'root': 3, 'key': 2}, {'action': 'move-right', 'root': 1, 'key': 2}, {'action': 'insert', 'root': -1, 'key': 2}], '3': [{'action': 'move-left', 'root': 50, 'key': 43}, {'action': 'move-right', 'root': 17, 'key': 43}, {'action': 'move-right', 'root': 23, 'key': 43}, {'action': 'insert', 'root': -1, 'key': 43}], '4': [{'action': 'move-right', 'root': 5, 'key': 9}, {'action': 'move-right', 'root': 7, 'key': 9}, {'action': 'insert', 'root': -1, 'key': 9}], '5': [{'action': 'move-right', 'root': 8, 'key': 15}, {'action': 'move-right', 'root': 10, 'key': 15}, {'action': 'move-right', 'root': 12, 'key': 15}, {'action': 'move-right', 'root': 13, 'key': 15}, {'action': 'insert', 'root': -1, 'key': 15}], '6': [{'action': 'move-left', 'root': 50, 'key': 43}, {'action': 'move-right', 'root': 17, 'key': 43}, {'action': 'move-right', 'root': 23, 'key': 43}, {'action': 'insert', 'root': -1, 'key': 43}]}}}
2021-02-22 17:27:36.356679,insert,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root == None:\n        return False   \n    if root.val == None:\n        return False   \n    elif root.val == key:\n        return True\n    else:\n        if key < root.val:\n            return search(root.left, key)\n        else:\n            return search(root.right, key)\n    \n#    else:\n#        left = False\n#        if (root.left != None):\n#            left = search(root.left, key) \n#            \n#        right = False\n#        if (root.right != None):\n#            right = search(root.right, key)\n#       \n#        return (left or right)', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 11}, {'action': 'move-left', 'root': 12, 'key': 11}, {'action': 'move-right', 'root': 9, 'key': 11}, {'action': 'move-right', 'root': 10, 'key': 11}, {'action': 'return-false', 'root': -1, 'key': 11}], '1': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '2': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-false', 'root': -1, 'key': 30}], '3': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '4': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-true', 'root': -1, 'key': 30}]}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    #print("Root:" + str(root.val))\n    if root == None or root.val == None:\n        return root\n    if key > root.val:\n        #print("Right")\n        if root.right == None:\n            #print("--nothing here")\n            k = Node(key)\n            root.right = k\n        else:\n            #print("--something here")\n            root.right = insert(root.right, key)\n    else:\n        #print("Left")\n        if root.left == None:\n            #print("--nothing here")\n            k = Node(key)\n            root.left = k\n        else:\n            #print("--something here")\n            root.left = insert(root.left, key)\n    return root', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 14}, {'action': 'move-right', 'root': 12, 'key': 14}, {'action': 'move-left', 'root': 15, 'key': 14}, {'action': 'move-right', 'root': 13, 'key': 14}, {'action': 'insert', 'root': -1, 'key': 14}], '1': [{'action': 'move-right', 'root': 5, 'key': 6}, {'action': 'move-left', 'root': 7, 'key': 6}, {'action': 'insert', 'root': -1, 'key': 6}], '2': [{'action': 'move-left', 'root': 8, 'key': 2}, {'action': 'move-left', 'root': 3, 'key': 2}, {'action': 'move-right', 'root': 1, 'key': 2}, {'action': 'insert', 'root': -1, 'key': 2}], '3': [{'action': 'move-left', 'root': 50, 'key': 43}, {'action': 'move-right', 'root': 17, 'key': 43}, {'action': 'move-right', 'root': 23, 'key': 43}, {'action': 'insert', 'root': -1, 'key': 43}], '4': [{'action': 'move-right', 'root': 5, 'key': 9}, {'action': 'move-right', 'root': 7, 'key': 9}, {'action': 'insert', 'root': -1, 'key': 9}], '5': [{'action': 'move-right', 'root': 8, 'key': 15}, {'action': 'move-right', 'root': 10, 'key': 15}, {'action': 'move-right', 'root': 12, 'key': 15}, {'action': 'move-right', 'root': 13, 'key': 15}, {'action': 'insert', 'root': -1, 'key': 15}], '6': [{'action': 'move-left', 'root': 50, 'key': 43}, {'action': 'move-right', 'root': 17, 'key': 43}, {'action': 'move-right', 'root': 23, 'key': 43}, {'action': 'insert', 'root': -1, 'key': 43}]}}}
2021-02-22 17:27:39.840567,insert,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root == None:\n        return False   \n    if root.val == None:\n        return False   \n    elif root.val == key:\n        return True\n    else:\n        if key < root.val:\n            return search(root.left, key)\n        else:\n            return search(root.right, key)\n    \n#    else:\n#        left = False\n#        if (root.left != None):\n#            left = search(root.left, key) \n#            \n#        right = False\n#        if (root.right != None):\n#            right = search(root.right, key)\n#       \n#        return (left or right)', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 11}, {'action': 'move-left', 'root': 12, 'key': 11}, {'action': 'move-right', 'root': 9, 'key': 11}, {'action': 'move-right', 'root': 10, 'key': 11}, {'action': 'return-false', 'root': -1, 'key': 11}], '1': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '2': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-false', 'root': -1, 'key': 30}], '3': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '4': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-true', 'root': -1, 'key': 30}]}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    #print("Root:" + str(root.val))\n    if root == None or root.val == None:\n        return root\n    if key > root.val:\n        #print("Right")\n        if root.right == None:\n            #print("--nothing here")\n            k = Node(key)\n            root.right = k\n        else:\n            #print("--something here")\n            root.right = insert(root.right, key)\n    else:\n        #print("Left")\n        if root.left == None:\n            #print("--nothing here")\n            k = Node(key)\n            root.left = k\n        else:\n            #print("--something here")\n            root.left = insert(root.left, key)\n    return root', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 14}, {'action': 'move-right', 'root': 12, 'key': 14}, {'action': 'move-left', 'root': 15, 'key': 14}, {'action': 'move-right', 'root': 13, 'key': 14}, {'action': 'insert', 'root': -1, 'key': 14}], '1': [{'action': 'move-right', 'root': 5, 'key': 6}, {'action': 'move-left', 'root': 7, 'key': 6}, {'action': 'insert', 'root': -1, 'key': 6}], '2': [{'action': 'move-left', 'root': 8, 'key': 2}, {'action': 'move-left', 'root': 3, 'key': 2}, {'action': 'move-right', 'root': 1, 'key': 2}, {'action': 'insert', 'root': -1, 'key': 2}], '3': [{'action': 'move-left', 'root': 50, 'key': 43}, {'action': 'move-right', 'root': 17, 'key': 43}, {'action': 'move-right', 'root': 23, 'key': 43}, {'action': 'insert', 'root': -1, 'key': 43}], '4': [{'action': 'move-right', 'root': 5, 'key': 9}, {'action': 'move-right', 'root': 7, 'key': 9}, {'action': 'insert', 'root': -1, 'key': 9}], '5': [{'action': 'move-right', 'root': 8, 'key': 15}, {'action': 'move-right', 'root': 10, 'key': 15}, {'action': 'move-right', 'root': 12, 'key': 15}, {'action': 'move-right', 'root': 13, 'key': 15}, {'action': 'insert', 'root': -1, 'key': 15}], '6': [{'action': 'move-left', 'root': 50, 'key': 43}, {'action': 'move-right', 'root': 17, 'key': 43}, {'action': 'move-right', 'root': 23, 'key': 43}, {'action': 'insert', 'root': -1, 'key': 43}]}}}
2021-02-22 17:27:42.908468,insert,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root == None:\n        return False   \n    if root.val == None:\n        return False   \n    elif root.val == key:\n        return True\n    else:\n        if key < root.val:\n            return search(root.left, key)\n        else:\n            return search(root.right, key)\n    \n#    else:\n#        left = False\n#        if (root.left != None):\n#            left = search(root.left, key) \n#            \n#        right = False\n#        if (root.right != None):\n#            right = search(root.right, key)\n#       \n#        return (left or right)', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 11}, {'action': 'move-left', 'root': 12, 'key': 11}, {'action': 'move-right', 'root': 9, 'key': 11}, {'action': 'move-right', 'root': 10, 'key': 11}, {'action': 'return-false', 'root': -1, 'key': 11}], '1': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '2': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-false', 'root': -1, 'key': 30}], '3': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '4': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-true', 'root': -1, 'key': 30}]}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    #print("Root:" + str(root.val))\n    if root == None or root.val == None:\n        return root\n    if key > root.val:\n        #print("Right")\n        if root.right == None:\n            #print("--nothing here")\n            k = Node(key)\n            root.right = k\n        else:\n            #print("--something here")\n            root.right = insert(root.right, key)\n    else:\n        #print("Left")\n        if root.left == None:\n            #print("--nothing here")\n            k = Node(key)\n            root.left = k\n        else:\n            #print("--something here")\n            root.left = insert(root.left, key)\n    return root', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 14}, {'action': 'move-right', 'root': 12, 'key': 14}, {'action': 'move-left', 'root': 15, 'key': 14}, {'action': 'move-right', 'root': 13, 'key': 14}, {'action': 'insert', 'root': -1, 'key': 14}], '1': [{'action': 'move-right', 'root': 5, 'key': 6}, {'action': 'move-left', 'root': 7, 'key': 6}, {'action': 'insert', 'root': -1, 'key': 6}], '2': [{'action': 'move-left', 'root': 8, 'key': 2}, {'action': 'move-left', 'root': 3, 'key': 2}, {'action': 'move-right', 'root': 1, 'key': 2}, {'action': 'insert', 'root': -1, 'key': 2}], '3': [{'action': 'move-left', 'root': 50, 'key': 43}, {'action': 'move-right', 'root': 17, 'key': 43}, {'action': 'move-right', 'root': 23, 'key': 43}, {'action': 'insert', 'root': -1, 'key': 43}], '4': [{'action': 'move-right', 'root': 5, 'key': 9}, {'action': 'move-right', 'root': 7, 'key': 9}, {'action': 'insert', 'root': -1, 'key': 9}], '5': [{'action': 'move-right', 'root': 8, 'key': 15}, {'action': 'move-right', 'root': 10, 'key': 15}, {'action': 'move-right', 'root': 12, 'key': 15}, {'action': 'move-right', 'root': 13, 'key': 15}, {'action': 'insert', 'root': -1, 'key': 15}], '6': [{'action': 'move-left', 'root': 50, 'key': 43}, {'action': 'move-right', 'root': 17, 'key': 43}, {'action': 'move-right', 'root': 23, 'key': 43}, {'action': 'insert', 'root': -1, 'key': 43}]}}}
2021-02-22 17:27:47.503326,insert,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root == None:\n        return False   \n    if root.val == None:\n        return False   \n    elif root.val == key:\n        return True\n    else:\n        if key < root.val:\n            return search(root.left, key)\n        else:\n            return search(root.right, key)\n    \n#    else:\n#        left = False\n#        if (root.left != None):\n#            left = search(root.left, key) \n#            \n#        right = False\n#        if (root.right != None):\n#            right = search(root.right, key)\n#       \n#        return (left or right)', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 11}, {'action': 'move-left', 'root': 12, 'key': 11}, {'action': 'move-right', 'root': 9, 'key': 11}, {'action': 'move-right', 'root': 10, 'key': 11}, {'action': 'return-false', 'root': -1, 'key': 11}], '1': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '2': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-false', 'root': -1, 'key': 30}], '3': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '4': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-true', 'root': -1, 'key': 30}]}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    #print("Root:" + str(root.val))\n    if root == None or root.val == None:\n        return root\n    if key > root.val:\n        #print("Right")\n        if root.right == None:\n            #print("--nothing here")\n            k = Node(key)\n            root.right = k\n        else:\n            #print("--something here")\n            root.right = insert(root.right, key)\n    else:\n        #print("Left")\n        if root.left == None:\n            #print("--nothing here")\n            k = Node(key)\n            root.left = k\n        else:\n            #print("--something here")\n            root.left = insert(root.left, key)\n    return root', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 14}, {'action': 'move-right', 'root': 12, 'key': 14}, {'action': 'move-left', 'root': 15, 'key': 14}, {'action': 'move-right', 'root': 13, 'key': 14}, {'action': 'insert', 'root': -1, 'key': 14}], '1': [{'action': 'move-right', 'root': 5, 'key': 6}, {'action': 'move-left', 'root': 7, 'key': 6}, {'action': 'insert', 'root': -1, 'key': 6}], '2': [{'action': 'move-left', 'root': 8, 'key': 2}, {'action': 'move-left', 'root': 3, 'key': 2}, {'action': 'move-right', 'root': 1, 'key': 2}, {'action': 'insert', 'root': -1, 'key': 2}], '3': [{'action': 'move-left', 'root': 50, 'key': 43}, {'action': 'move-right', 'root': 17, 'key': 43}, {'action': 'move-right', 'root': 23, 'key': 43}, {'action': 'insert', 'root': -1, 'key': 43}], '4': [{'action': 'move-right', 'root': 5, 'key': 9}, {'action': 'move-right', 'root': 7, 'key': 9}, {'action': 'insert', 'root': -1, 'key': 9}], '5': [{'action': 'move-right', 'root': 8, 'key': 15}, {'action': 'move-right', 'root': 10, 'key': 15}, {'action': 'move-right', 'root': 12, 'key': 15}, {'action': 'move-right', 'root': 13, 'key': 15}, {'action': 'insert', 'root': -1, 'key': 15}], '6': [{'action': 'move-left', 'root': 50, 'key': 43}, {'action': 'move-right', 'root': 17, 'key': 43}, {'action': 'move-right', 'root': 23, 'key': 43}, {'action': 'insert', 'root': -1, 'key': 43}]}}}
2021-02-22 17:27:50.344291,insert,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root == None:\n        return False   \n    if root.val == None:\n        return False   \n    elif root.val == key:\n        return True\n    else:\n        if key < root.val:\n            return search(root.left, key)\n        else:\n            return search(root.right, key)\n    \n#    else:\n#        left = False\n#        if (root.left != None):\n#            left = search(root.left, key) \n#            \n#        right = False\n#        if (root.right != None):\n#            right = search(root.right, key)\n#       \n#        return (left or right)', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 11}, {'action': 'move-left', 'root': 12, 'key': 11}, {'action': 'move-right', 'root': 9, 'key': 11}, {'action': 'move-right', 'root': 10, 'key': 11}, {'action': 'return-false', 'root': -1, 'key': 11}], '1': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '2': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-false', 'root': -1, 'key': 30}], '3': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '4': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-true', 'root': -1, 'key': 30}]}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    #print("Root:" + str(root.val))\n    if root == None or root.val == None:\n        return root\n    if key > root.val:\n        #print("Right")\n        if root.right == None:\n            #print("--nothing here")\n            k = Node(key)\n            root.right = k\n        else:\n            #print("--something here")\n            root.right = insert(root.right, key)\n    else:\n        #print("Left")\n        if root.left == None:\n            #print("--nothing here")\n            k = Node(key)\n            root.left = k\n        else:\n            #print("--something here")\n            root.left = insert(root.left, key)\n    return root', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 14}, {'action': 'move-right', 'root': 12, 'key': 14}, {'action': 'move-left', 'root': 15, 'key': 14}, {'action': 'move-right', 'root': 13, 'key': 14}, {'action': 'insert', 'root': -1, 'key': 14}], '1': [{'action': 'move-right', 'root': 5, 'key': 6}, {'action': 'move-left', 'root': 7, 'key': 6}, {'action': 'insert', 'root': -1, 'key': 6}], '2': [{'action': 'move-left', 'root': 8, 'key': 2}, {'action': 'move-left', 'root': 3, 'key': 2}, {'action': 'move-right', 'root': 1, 'key': 2}, {'action': 'insert', 'root': -1, 'key': 2}], '3': [{'action': 'move-left', 'root': 50, 'key': 43}, {'action': 'move-right', 'root': 17, 'key': 43}, {'action': 'move-right', 'root': 23, 'key': 43}, {'action': 'insert', 'root': -1, 'key': 43}], '4': [{'action': 'move-right', 'root': 5, 'key': 9}, {'action': 'move-right', 'root': 7, 'key': 9}, {'action': 'insert', 'root': -1, 'key': 9}], '5': [{'action': 'move-right', 'root': 8, 'key': 15}, {'action': 'move-right', 'root': 10, 'key': 15}, {'action': 'move-right', 'root': 12, 'key': 15}, {'action': 'move-right', 'root': 13, 'key': 15}, {'action': 'insert', 'root': -1, 'key': 15}], '6': [{'action': 'move-left', 'root': 50, 'key': 43}, {'action': 'move-right', 'root': 17, 'key': 43}, {'action': 'move-right', 'root': 23, 'key': 43}, {'action': 'insert', 'root': -1, 'key': 43}]}}}
2021-02-22 17:27:52.581421,insert,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root == None:\n        return False   \n    if root.val == None:\n        return False   \n    elif root.val == key:\n        return True\n    else:\n        if key < root.val:\n            return search(root.left, key)\n        else:\n            return search(root.right, key)\n    \n#    else:\n#        left = False\n#        if (root.left != None):\n#            left = search(root.left, key) \n#            \n#        right = False\n#        if (root.right != None):\n#            right = search(root.right, key)\n#       \n#        return (left or right)', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 11}, {'action': 'move-left', 'root': 12, 'key': 11}, {'action': 'move-right', 'root': 9, 'key': 11}, {'action': 'move-right', 'root': 10, 'key': 11}, {'action': 'return-false', 'root': -1, 'key': 11}], '1': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '2': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-false', 'root': -1, 'key': 30}], '3': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '4': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-true', 'root': -1, 'key': 30}]}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    #print("Root:" + str(root.val))\n    if root == None or root.val == None:\n        return root\n    if key > root.val:\n        #print("Right")\n        if root.right == None:\n            #print("--nothing here")\n            k = Node(key)\n            root.right = k\n        else:\n            #print("--something here")\n            root.right = insert(root.right, key)\n    else:\n        #print("Left")\n        if root.left == None:\n            #print("--nothing here")\n            k = Node(key)\n            root.left = k\n        else:\n            #print("--something here")\n            root.left = insert(root.left, key)\n    return root', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 14}, {'action': 'move-right', 'root': 12, 'key': 14}, {'action': 'move-left', 'root': 15, 'key': 14}, {'action': 'move-right', 'root': 13, 'key': 14}, {'action': 'insert', 'root': -1, 'key': 14}], '1': [{'action': 'move-right', 'root': 5, 'key': 6}, {'action': 'move-left', 'root': 7, 'key': 6}, {'action': 'insert', 'root': -1, 'key': 6}], '2': [{'action': 'move-left', 'root': 8, 'key': 2}, {'action': 'move-left', 'root': 3, 'key': 2}, {'action': 'move-right', 'root': 1, 'key': 2}, {'action': 'insert', 'root': -1, 'key': 2}], '3': [{'action': 'move-left', 'root': 50, 'key': 43}, {'action': 'move-right', 'root': 17, 'key': 43}, {'action': 'move-right', 'root': 23, 'key': 43}, {'action': 'insert', 'root': -1, 'key': 43}], '4': [{'action': 'move-right', 'root': 5, 'key': 9}, {'action': 'move-right', 'root': 7, 'key': 9}, {'action': 'insert', 'root': -1, 'key': 9}], '5': [{'action': 'move-right', 'root': 8, 'key': 15}, {'action': 'move-right', 'root': 10, 'key': 15}, {'action': 'move-right', 'root': 12, 'key': 15}, {'action': 'move-right', 'root': 13, 'key': 15}, {'action': 'insert', 'root': -1, 'key': 15}], '6': [{'action': 'move-left', 'root': 50, 'key': 43}, {'action': 'move-right', 'root': 17, 'key': 43}, {'action': 'move-right', 'root': 23, 'key': 43}, {'action': 'insert', 'root': -1, 'key': 43}]}}}
2021-02-22 17:27:56.506030,insert,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root == None:\n        return False   \n    if root.val == None:\n        return False   \n    elif root.val == key:\n        return True\n    else:\n        if key < root.val:\n            return search(root.left, key)\n        else:\n            return search(root.right, key)\n    \n#    else:\n#        left = False\n#        if (root.left != None):\n#            left = search(root.left, key) \n#            \n#        right = False\n#        if (root.right != None):\n#            right = search(root.right, key)\n#       \n#        return (left or right)', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 11}, {'action': 'move-left', 'root': 12, 'key': 11}, {'action': 'move-right', 'root': 9, 'key': 11}, {'action': 'move-right', 'root': 10, 'key': 11}, {'action': 'return-false', 'root': -1, 'key': 11}], '1': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '2': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-false', 'root': -1, 'key': 30}], '3': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '4': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-true', 'root': -1, 'key': 30}]}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    #print("Root:" + str(root.val))\n    if root == None or root.val == None:\n        return root\n    if key > root.val:\n        #print("Right")\n        if root.right == None:\n            #print("--nothing here")\n            k = Node(key)\n            root.right = k\n        else:\n            #print("--something here")\n            root.right = insert(root.right, key)\n    else:\n        #print("Left")\n        if root.left == None:\n            #print("--nothing here")\n            k = Node(key)\n            root.left = k\n        else:\n            #print("--something here")\n            root.left = insert(root.left, key)\n    return root', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 14}, {'action': 'move-right', 'root': 12, 'key': 14}, {'action': 'move-left', 'root': 15, 'key': 14}, {'action': 'move-right', 'root': 13, 'key': 14}, {'action': 'insert', 'root': -1, 'key': 14}], '1': [{'action': 'move-right', 'root': 5, 'key': 6}, {'action': 'move-left', 'root': 7, 'key': 6}, {'action': 'insert', 'root': -1, 'key': 6}], '2': [{'action': 'move-left', 'root': 8, 'key': 2}, {'action': 'move-left', 'root': 3, 'key': 2}, {'action': 'move-right', 'root': 1, 'key': 2}, {'action': 'insert', 'root': -1, 'key': 2}], '3': [{'action': 'move-left', 'root': 50, 'key': 43}, {'action': 'move-right', 'root': 17, 'key': 43}, {'action': 'move-right', 'root': 23, 'key': 43}, {'action': 'insert', 'root': -1, 'key': 43}], '4': [{'action': 'move-right', 'root': 5, 'key': 9}, {'action': 'move-right', 'root': 7, 'key': 9}, {'action': 'insert', 'root': -1, 'key': 9}], '5': [{'action': 'move-right', 'root': 8, 'key': 15}, {'action': 'move-right', 'root': 10, 'key': 15}, {'action': 'move-right', 'root': 12, 'key': 15}, {'action': 'move-right', 'root': 13, 'key': 15}, {'action': 'insert', 'root': -1, 'key': 15}], '6': [{'action': 'move-left', 'root': 50, 'key': 43}, {'action': 'move-right', 'root': 17, 'key': 43}, {'action': 'move-right', 'root': 23, 'key': 43}, {'action': 'insert', 'root': -1, 'key': 43}]}}}
2021-02-22 17:28:02.783873,insert,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root == None:\n        return False   \n    if root.val == None:\n        return False   \n    elif root.val == key:\n        return True\n    else:\n        if key < root.val:\n            return search(root.left, key)\n        else:\n            return search(root.right, key)\n    \n#    else:\n#        left = False\n#        if (root.left != None):\n#            left = search(root.left, key) \n#            \n#        right = False\n#        if (root.right != None):\n#            right = search(root.right, key)\n#       \n#        return (left or right)', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 11}, {'action': 'move-left', 'root': 12, 'key': 11}, {'action': 'move-right', 'root': 9, 'key': 11}, {'action': 'move-right', 'root': 10, 'key': 11}, {'action': 'return-false', 'root': -1, 'key': 11}], '1': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '2': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-false', 'root': -1, 'key': 30}], '3': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '4': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-true', 'root': -1, 'key': 30}]}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    #print("Root:" + str(root.val))\n    if root == None or root.val == None:\n        return root\n    if key > root.val:\n        #print("Right")\n        if root.right == None:\n            #print("--nothing here")\n            k = Node(key)\n            root.right = k\n        else:\n            #print("--something here")\n            root.right = insert(root.right, key)\n    else:\n        #print("Left")\n        if root.left == None:\n            #print("--nothing here")\n            k = Node(key)\n            root.left = k\n        else:\n            #print("--something here")\n            root.left = insert(root.left, key)\n    return root', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 14}, {'action': 'move-right', 'root': 12, 'key': 14}, {'action': 'move-left', 'root': 15, 'key': 14}, {'action': 'move-right', 'root': 13, 'key': 14}, {'action': 'insert', 'root': -1, 'key': 14}], '1': [{'action': 'move-right', 'root': 5, 'key': 6}, {'action': 'move-left', 'root': 7, 'key': 6}, {'action': 'insert', 'root': -1, 'key': 6}], '2': [{'action': 'move-left', 'root': 8, 'key': 2}, {'action': 'move-left', 'root': 3, 'key': 2}, {'action': 'move-right', 'root': 1, 'key': 2}, {'action': 'insert', 'root': -1, 'key': 2}], '3': [{'action': 'move-left', 'root': 50, 'key': 43}, {'action': 'move-right', 'root': 17, 'key': 43}, {'action': 'move-right', 'root': 23, 'key': 43}, {'action': 'insert', 'root': -1, 'key': 43}], '4': [{'action': 'move-right', 'root': 5, 'key': 9}, {'action': 'move-right', 'root': 7, 'key': 9}, {'action': 'insert', 'root': -1, 'key': 9}], '5': [{'action': 'move-right', 'root': 8, 'key': 15}, {'action': 'move-right', 'root': 10, 'key': 15}, {'action': 'move-right', 'root': 12, 'key': 15}, {'action': 'move-right', 'root': 13, 'key': 15}, {'action': 'insert', 'root': -1, 'key': 15}], '6': [{'action': 'move-left', 'root': 50, 'key': 43}, {'action': 'move-right', 'root': 17, 'key': 43}, {'action': 'move-right', 'root': 23, 'key': 43}, {'action': 'insert', 'root': -1, 'key': 43}]}}}
2021-02-22 17:28:06.825937,insert,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root == None:\n        return False   \n    if root.val == None:\n        return False   \n    elif root.val == key:\n        return True\n    else:\n        if key < root.val:\n            return search(root.left, key)\n        else:\n            return search(root.right, key)\n    \n#    else:\n#        left = False\n#        if (root.left != None):\n#            left = search(root.left, key) \n#            \n#        right = False\n#        if (root.right != None):\n#            right = search(root.right, key)\n#       \n#        return (left or right)', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 11}, {'action': 'move-left', 'root': 12, 'key': 11}, {'action': 'move-right', 'root': 9, 'key': 11}, {'action': 'move-right', 'root': 10, 'key': 11}, {'action': 'return-false', 'root': -1, 'key': 11}], '1': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '2': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-false', 'root': -1, 'key': 30}], '3': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '4': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-true', 'root': -1, 'key': 30}]}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    #print("Root:" + str(root.val))\n    if root == None or root.val == None:\n        return root\n    if key > root.val:\n        #print("Right")\n        if root.right == None:\n            #print("--nothing here")\n            k = Node(key)\n            root.right = k\n        else:\n            #print("--something here")\n            root.right = insert(root.right, key)\n    else:\n        #print("Left")\n        if root.left == None:\n            #print("--nothing here")\n            k = Node(key)\n            root.left = k\n        else:\n            #print("--something here")\n            root.left = insert(root.left, key)\n    return root', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 14}, {'action': 'move-right', 'root': 12, 'key': 14}, {'action': 'move-left', 'root': 15, 'key': 14}, {'action': 'move-right', 'root': 13, 'key': 14}, {'action': 'insert', 'root': -1, 'key': 14}], '1': [{'action': 'move-right', 'root': 5, 'key': 6}, {'action': 'move-left', 'root': 7, 'key': 6}, {'action': 'insert', 'root': -1, 'key': 6}], '2': [{'action': 'move-left', 'root': 8, 'key': 2}, {'action': 'move-left', 'root': 3, 'key': 2}, {'action': 'move-right', 'root': 1, 'key': 2}, {'action': 'insert', 'root': -1, 'key': 2}], '3': [{'action': 'move-left', 'root': 50, 'key': 43}, {'action': 'move-right', 'root': 17, 'key': 43}, {'action': 'move-right', 'root': 23, 'key': 43}, {'action': 'insert', 'root': -1, 'key': 43}], '4': [{'action': 'move-right', 'root': 5, 'key': 9}, {'action': 'move-right', 'root': 7, 'key': 9}, {'action': 'insert', 'root': -1, 'key': 9}], '5': [{'action': 'move-right', 'root': 8, 'key': 15}, {'action': 'move-right', 'root': 10, 'key': 15}, {'action': 'move-right', 'root': 12, 'key': 15}, {'action': 'move-right', 'root': 13, 'key': 15}, {'action': 'insert', 'root': -1, 'key': 15}], '6': [{'action': 'move-left', 'root': 50, 'key': 43}, {'action': 'move-right', 'root': 17, 'key': 43}, {'action': 'move-right', 'root': 23, 'key': 43}, {'action': 'insert', 'root': -1, 'key': 43}]}}}
2021-02-22 17:28:12.661953,insert,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root == None:\n        return False   \n    if root.val == None:\n        return False   \n    elif root.val == key:\n        return True\n    else:\n        if key < root.val:\n            return search(root.left, key)\n        else:\n            return search(root.right, key)\n    \n#    else:\n#        left = False\n#        if (root.left != None):\n#            left = search(root.left, key) \n#            \n#        right = False\n#        if (root.right != None):\n#            right = search(root.right, key)\n#       \n#        return (left or right)', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 11}, {'action': 'move-left', 'root': 12, 'key': 11}, {'action': 'move-right', 'root': 9, 'key': 11}, {'action': 'move-right', 'root': 10, 'key': 11}, {'action': 'return-false', 'root': -1, 'key': 11}], '1': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '2': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-false', 'root': -1, 'key': 30}], '3': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '4': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-true', 'root': -1, 'key': 30}]}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    #print("Root:" + str(root.val))\n    if root == None or root.val == None:\n        return root\n    if key > root.val:\n        #print("Right")\n        if root.right == None:\n            #print("--nothing here")\n            k = Node(key)\n            root.right = k\n        else:\n            #print("--something here")\n            root.right = insert(root.right, key)\n    else:\n        #print("Left")\n        if root.left == None:\n            #print("--nothing here")\n            k = Node(key)\n            root.left = k\n        else:\n            #print("--something here")\n            root.left = insert(root.left, key)\n    return root', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 14}, {'action': 'move-right', 'root': 12, 'key': 14}, {'action': 'move-left', 'root': 15, 'key': 14}, {'action': 'move-right', 'root': 13, 'key': 14}, {'action': 'insert', 'root': -1, 'key': 14}], '1': [{'action': 'move-right', 'root': 5, 'key': 6}, {'action': 'move-left', 'root': 7, 'key': 6}, {'action': 'insert', 'root': -1, 'key': 6}], '2': [{'action': 'move-left', 'root': 8, 'key': 2}, {'action': 'move-left', 'root': 3, 'key': 2}, {'action': 'move-right', 'root': 1, 'key': 2}, {'action': 'insert', 'root': -1, 'key': 2}], '3': [{'action': 'move-left', 'root': 50, 'key': 43}, {'action': 'move-right', 'root': 17, 'key': 43}, {'action': 'move-right', 'root': 23, 'key': 43}, {'action': 'insert', 'root': -1, 'key': 43}], '4': [{'action': 'move-right', 'root': 5, 'key': 9}, {'action': 'move-right', 'root': 7, 'key': 9}, {'action': 'insert', 'root': -1, 'key': 9}], '5': [{'action': 'move-right', 'root': 8, 'key': 15}, {'action': 'move-right', 'root': 10, 'key': 15}, {'action': 'move-right', 'root': 12, 'key': 15}, {'action': 'move-right', 'root': 13, 'key': 15}, {'action': 'insert', 'root': -1, 'key': 15}], '6': [{'action': 'move-left', 'root': 50, 'key': 43}, {'action': 'move-right', 'root': 17, 'key': 43}, {'action': 'move-right', 'root': 23, 'key': 43}, {'action': 'insert', 'root': -1, 'key': 43}]}}}
2021-02-22 17:28:17.139097,insert,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root == None:\n        return False   \n    if root.val == None:\n        return False   \n    elif root.val == key:\n        return True\n    else:\n        if key < root.val:\n            return search(root.left, key)\n        else:\n            return search(root.right, key)\n    \n#    else:\n#        left = False\n#        if (root.left != None):\n#            left = search(root.left, key) \n#            \n#        right = False\n#        if (root.right != None):\n#            right = search(root.right, key)\n#       \n#        return (left or right)', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 11}, {'action': 'move-left', 'root': 12, 'key': 11}, {'action': 'move-right', 'root': 9, 'key': 11}, {'action': 'move-right', 'root': 10, 'key': 11}, {'action': 'return-false', 'root': -1, 'key': 11}], '1': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '2': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-false', 'root': -1, 'key': 30}], '3': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '4': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-true', 'root': -1, 'key': 30}]}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    #print("Root:" + str(root.val))\n    if root == None or root.val == None:\n        return root\n    if key > root.val:\n        #print("Right")\n        if root.right == None:\n            #print("--nothing here")\n            k = Node(key)\n            root.right = k\n        else:\n            #print("--something here")\n            root.right = insert(root.right, key)\n    else:\n        #print("Left")\n        if root.left == None:\n            #print("--nothing here")\n            k = Node(key)\n            root.left = k\n        else:\n            #print("--something here")\n            root.left = insert(root.left, key)\n    return root', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 14}, {'action': 'move-right', 'root': 12, 'key': 14}, {'action': 'move-left', 'root': 15, 'key': 14}, {'action': 'move-right', 'root': 13, 'key': 14}, {'action': 'insert', 'root': -1, 'key': 14}], '1': [{'action': 'move-right', 'root': 5, 'key': 6}, {'action': 'move-left', 'root': 7, 'key': 6}, {'action': 'insert', 'root': -1, 'key': 6}], '2': [{'action': 'move-left', 'root': 8, 'key': 2}, {'action': 'move-left', 'root': 3, 'key': 2}, {'action': 'move-right', 'root': 1, 'key': 2}, {'action': 'insert', 'root': -1, 'key': 2}], '3': [{'action': 'move-left', 'root': 50, 'key': 43}, {'action': 'move-right', 'root': 17, 'key': 43}, {'action': 'move-right', 'root': 23, 'key': 43}, {'action': 'insert', 'root': -1, 'key': 43}], '4': [{'action': 'move-right', 'root': 5, 'key': 9}, {'action': 'move-right', 'root': 7, 'key': 9}, {'action': 'insert', 'root': -1, 'key': 9}], '5': [{'action': 'move-right', 'root': 8, 'key': 15}, {'action': 'move-right', 'root': 10, 'key': 15}, {'action': 'move-right', 'root': 12, 'key': 15}, {'action': 'move-right', 'root': 13, 'key': 15}, {'action': 'insert', 'root': -1, 'key': 15}], '6': [{'action': 'move-left', 'root': 50, 'key': 43}, {'action': 'move-right', 'root': 17, 'key': 43}, {'action': 'move-right', 'root': 23, 'key': 43}, {'action': 'insert', 'root': -1, 'key': 43}]}}}
2021-02-22 17:29:40.953183,insert,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root == None:\n        return False   \n    if root.val == None:\n        return False   \n    elif root.val == key:\n        return True\n    else:\n        if key < root.val:\n            return search(root.left, key)\n        else:\n            return search(root.right, key)\n    \n#    else:\n#        left = False\n#        if (root.left != None):\n#            left = search(root.left, key) \n#            \n#        right = False\n#        if (root.right != None):\n#            right = search(root.right, key)\n#       \n#        return (left or right)', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 11}, {'action': 'move-left', 'root': 12, 'key': 11}, {'action': 'move-right', 'root': 9, 'key': 11}, {'action': 'move-right', 'root': 10, 'key': 11}, {'action': 'return-false', 'root': -1, 'key': 11}], '1': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '2': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-false', 'root': -1, 'key': 30}], '3': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '4': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-true', 'root': -1, 'key': 30}]}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    #print("Root:" + str(root.val))\n    if root == None or root.val == None:\n        return root\n    if key > root.val:\n        #print("Right")\n        if root.right == None:\n            #print("--nothing here")\n            print(str(root.val) + \' : \' + "right")\n            k = Node(key)\n            root.right = k\n        else:\n            #print("--something here")\n            root.right = insert(root.right, key)\n    else:\n        #print("Left")\n        if root.left == None:\n            #print("--nothing here")\n            print(str(root.val) + \' : \' + "left")\n            k = Node(key)\n            root.left = k\n        else:\n            #print("--something here")\n            root.left = insert(root.left, key)\n    return root', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 14}, {'action': 'move-right', 'root': 12, 'key': 14}, {'action': 'move-left', 'root': 15, 'key': 14}, {'action': 'move-right', 'root': 13, 'key': 14}, {'action': 'insert', 'root': -1, 'key': 14}], '1': [{'action': 'move-right', 'root': 5, 'key': 6}, {'action': 'move-left', 'root': 7, 'key': 6}, {'action': 'insert', 'root': -1, 'key': 6}], '2': [{'action': 'move-left', 'root': 8, 'key': 2}, {'action': 'move-left', 'root': 3, 'key': 2}, {'action': 'move-right', 'root': 1, 'key': 2}, {'action': 'insert', 'root': -1, 'key': 2}], '3': [{'action': 'move-left', 'root': 50, 'key': 43}, {'action': 'move-right', 'root': 17, 'key': 43}, {'action': 'move-right', 'root': 23, 'key': 43}, {'action': 'insert', 'root': -1, 'key': 43}], '4': [{'action': 'move-right', 'root': 5, 'key': 9}, {'action': 'move-right', 'root': 7, 'key': 9}, {'action': 'insert', 'root': -1, 'key': 9}], '5': [{'action': 'move-right', 'root': 8, 'key': 15}, {'action': 'move-right', 'root': 10, 'key': 15}, {'action': 'move-right', 'root': 12, 'key': 15}, {'action': 'move-right', 'root': 13, 'key': 15}, {'action': 'insert', 'root': -1, 'key': 15}], '6': [{'action': 'move-left', 'root': 50, 'key': 43}, {'action': 'move-right', 'root': 17, 'key': 43}, {'action': 'move-right', 'root': 23, 'key': 43}, {'action': 'insert', 'root': -1, 'key': 43}]}}}
2021-02-22 17:29:53.423084,insert,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root == None:\n        return False   \n    if root.val == None:\n        return False   \n    elif root.val == key:\n        return True\n    else:\n        if key < root.val:\n            return search(root.left, key)\n        else:\n            return search(root.right, key)\n    \n#    else:\n#        left = False\n#        if (root.left != None):\n#            left = search(root.left, key) \n#            \n#        right = False\n#        if (root.right != None):\n#            right = search(root.right, key)\n#       \n#        return (left or right)', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 11}, {'action': 'move-left', 'root': 12, 'key': 11}, {'action': 'move-right', 'root': 9, 'key': 11}, {'action': 'move-right', 'root': 10, 'key': 11}, {'action': 'return-false', 'root': -1, 'key': 11}], '1': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '2': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-false', 'root': -1, 'key': 30}], '3': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '4': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-true', 'root': -1, 'key': 30}]}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    #print("Root:" + str(root.val))\n    if root == None or root.val == None:\n        return root\n    if key > root.val:\n        #print("Right")\n        if root.right == None:\n            #print("--nothing here")\n            print(str(root.val) + \' : \' + "right")\n            k = Node(key)\n            root.right = k\n        else:\n            #print("--something here")\n            root.right = insert(root.right, key)\n    else:\n        #print("Left")\n        if root.left == None:\n            #print("--nothing here")\n            print(str(root.val) + \' : \' + "left")\n            k = Node(key)\n            root.left = k\n        else:\n            #print("--something here")\n            root.left = insert(root.left, key)\n    return root', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 14}, {'action': 'move-right', 'root': 12, 'key': 14}, {'action': 'move-left', 'root': 15, 'key': 14}, {'action': 'move-right', 'root': 13, 'key': 14}, {'action': 'insert', 'root': -1, 'key': 14}], '1': [{'action': 'move-right', 'root': 5, 'key': 6}, {'action': 'move-left', 'root': 7, 'key': 6}, {'action': 'insert', 'root': -1, 'key': 6}], '2': [{'action': 'move-left', 'root': 8, 'key': 2}, {'action': 'move-left', 'root': 3, 'key': 2}, {'action': 'move-right', 'root': 1, 'key': 2}, {'action': 'insert', 'root': -1, 'key': 2}], '3': [{'action': 'move-left', 'root': 50, 'key': 43}, {'action': 'move-right', 'root': 17, 'key': 43}, {'action': 'move-right', 'root': 23, 'key': 43}, {'action': 'insert', 'root': -1, 'key': 43}], '4': [{'action': 'move-right', 'root': 5, 'key': 9}, {'action': 'move-right', 'root': 7, 'key': 9}, {'action': 'insert', 'root': -1, 'key': 9}], '5': [{'action': 'move-right', 'root': 8, 'key': 15}, {'action': 'move-right', 'root': 10, 'key': 15}, {'action': 'move-right', 'root': 12, 'key': 15}, {'action': 'move-right', 'root': 13, 'key': 15}, {'action': 'insert', 'root': -1, 'key': 15}], '6': [{'action': 'move-left', 'root': 50, 'key': 43}, {'action': 'move-right', 'root': 17, 'key': 43}, {'action': 'move-right', 'root': 23, 'key': 43}, {'action': 'insert', 'root': -1, 'key': 43}]}}}
2021-02-22 17:29:57.515294,insert,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root == None:\n        return False   \n    if root.val == None:\n        return False   \n    elif root.val == key:\n        return True\n    else:\n        if key < root.val:\n            return search(root.left, key)\n        else:\n            return search(root.right, key)\n    \n#    else:\n#        left = False\n#        if (root.left != None):\n#            left = search(root.left, key) \n#            \n#        right = False\n#        if (root.right != None):\n#            right = search(root.right, key)\n#       \n#        return (left or right)', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 11}, {'action': 'move-left', 'root': 12, 'key': 11}, {'action': 'move-right', 'root': 9, 'key': 11}, {'action': 'move-right', 'root': 10, 'key': 11}, {'action': 'return-false', 'root': -1, 'key': 11}], '1': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '2': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-false', 'root': -1, 'key': 30}], '3': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '4': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-true', 'root': -1, 'key': 30}]}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    #print("Root:" + str(root.val))\n    if root == None or root.val == None:\n        return root\n    if key > root.val:\n        #print("Right")\n        if root.right == None:\n            #print("--nothing here")\n            print(str(root.val) + \' : \' + "right")\n            k = Node(key)\n            root.right = k\n        else:\n            #print("--something here")\n            root.right = insert(root.right, key)\n    else:\n        #print("Left")\n        if root.left == None:\n            #print("--nothing here")\n            print(str(root.val) + \' : \' + "left")\n            k = Node(key)\n            root.left = k\n        else:\n            #print("--something here")\n            root.left = insert(root.left, key)\n    return root', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 14}, {'action': 'move-right', 'root': 12, 'key': 14}, {'action': 'move-left', 'root': 15, 'key': 14}, {'action': 'move-right', 'root': 13, 'key': 14}, {'action': 'insert', 'root': -1, 'key': 14}], '1': [{'action': 'move-right', 'root': 5, 'key': 6}, {'action': 'move-left', 'root': 7, 'key': 6}, {'action': 'insert', 'root': -1, 'key': 6}], '2': [{'action': 'move-left', 'root': 8, 'key': 2}, {'action': 'move-left', 'root': 3, 'key': 2}, {'action': 'move-right', 'root': 1, 'key': 2}, {'action': 'insert', 'root': -1, 'key': 2}], '3': [{'action': 'move-left', 'root': 50, 'key': 43}, {'action': 'move-right', 'root': 17, 'key': 43}, {'action': 'move-right', 'root': 23, 'key': 43}, {'action': 'insert', 'root': -1, 'key': 43}], '4': [{'action': 'move-right', 'root': 5, 'key': 9}, {'action': 'move-right', 'root': 7, 'key': 9}, {'action': 'insert', 'root': -1, 'key': 9}], '5': [{'action': 'move-right', 'root': 8, 'key': 15}, {'action': 'move-right', 'root': 10, 'key': 15}, {'action': 'move-right', 'root': 12, 'key': 15}, {'action': 'move-right', 'root': 13, 'key': 15}, {'action': 'insert', 'root': -1, 'key': 15}], '6': [{'action': 'move-left', 'root': 50, 'key': 43}, {'action': 'move-right', 'root': 17, 'key': 43}, {'action': 'move-right', 'root': 23, 'key': 43}, {'action': 'insert', 'root': -1, 'key': 43}]}}}
2021-02-22 17:30:03.778858,insert,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root == None:\n        return False   \n    if root.val == None:\n        return False   \n    elif root.val == key:\n        return True\n    else:\n        if key < root.val:\n            return search(root.left, key)\n        else:\n            return search(root.right, key)\n    \n#    else:\n#        left = False\n#        if (root.left != None):\n#            left = search(root.left, key) \n#            \n#        right = False\n#        if (root.right != None):\n#            right = search(root.right, key)\n#       \n#        return (left or right)', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 11}, {'action': 'move-left', 'root': 12, 'key': 11}, {'action': 'move-right', 'root': 9, 'key': 11}, {'action': 'move-right', 'root': 10, 'key': 11}, {'action': 'return-false', 'root': -1, 'key': 11}], '1': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '2': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-false', 'root': -1, 'key': 30}], '3': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '4': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-true', 'root': -1, 'key': 30}]}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    #print("Root:" + str(root.val))\n    if root == None or root.val == None:\n        return root\n    if key > root.val:\n        #print("Right")\n        if root.right == None:\n            #print("--nothing here")\n            print(str(root.val) + \' : \' + "right")\n            k = Node(key)\n            root.right = k\n        else:\n            #print("--something here")\n            root.right = insert(root.right, key)\n    else:\n        #print("Left")\n        if root.left == None:\n            #print("--nothing here")\n            print(str(root.val) + \' : \' + "left")\n            k = Node(key)\n            root.left = k\n        else:\n            #print("--something here")\n            root.left = insert(root.left, key)\n    return root', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 14}, {'action': 'move-right', 'root': 12, 'key': 14}, {'action': 'move-left', 'root': 15, 'key': 14}, {'action': 'move-right', 'root': 13, 'key': 14}, {'action': 'insert', 'root': -1, 'key': 14}], '1': [{'action': 'move-right', 'root': 5, 'key': 6}, {'action': 'move-left', 'root': 7, 'key': 6}, {'action': 'insert', 'root': -1, 'key': 6}], '2': [{'action': 'move-left', 'root': 8, 'key': 2}, {'action': 'move-left', 'root': 3, 'key': 2}, {'action': 'move-right', 'root': 1, 'key': 2}, {'action': 'insert', 'root': -1, 'key': 2}], '3': [{'action': 'move-left', 'root': 50, 'key': 43}, {'action': 'move-right', 'root': 17, 'key': 43}, {'action': 'move-right', 'root': 23, 'key': 43}, {'action': 'insert', 'root': -1, 'key': 43}], '4': [{'action': 'move-right', 'root': 5, 'key': 9}, {'action': 'move-right', 'root': 7, 'key': 9}, {'action': 'insert', 'root': -1, 'key': 9}], '5': [{'action': 'move-right', 'root': 8, 'key': 15}, {'action': 'move-right', 'root': 10, 'key': 15}, {'action': 'move-right', 'root': 12, 'key': 15}, {'action': 'move-right', 'root': 13, 'key': 15}, {'action': 'insert', 'root': -1, 'key': 15}], '6': [{'action': 'move-left', 'root': 50, 'key': 43}, {'action': 'move-right', 'root': 17, 'key': 43}, {'action': 'move-right', 'root': 23, 'key': 43}, {'action': 'insert', 'root': -1, 'key': 43}]}}}
2021-02-22 17:30:07.943007,insert,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root == None:\n        return False   \n    if root.val == None:\n        return False   \n    elif root.val == key:\n        return True\n    else:\n        if key < root.val:\n            return search(root.left, key)\n        else:\n            return search(root.right, key)\n    \n#    else:\n#        left = False\n#        if (root.left != None):\n#            left = search(root.left, key) \n#            \n#        right = False\n#        if (root.right != None):\n#            right = search(root.right, key)\n#       \n#        return (left or right)', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 11}, {'action': 'move-left', 'root': 12, 'key': 11}, {'action': 'move-right', 'root': 9, 'key': 11}, {'action': 'move-right', 'root': 10, 'key': 11}, {'action': 'return-false', 'root': -1, 'key': 11}], '1': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '2': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-false', 'root': -1, 'key': 30}], '3': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '4': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-true', 'root': -1, 'key': 30}]}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    #print("Root:" + str(root.val))\n    if root == None or root.val == None:\n        return root\n    if key > root.val:\n        #print("Right")\n        if root.right == None:\n            #print("--nothing here")\n            print(str(root.val) + \' : \' + "right")\n            k = Node(key)\n            root.right = k\n        else:\n            #print("--something here")\n            root.right = insert(root.right, key)\n    else:\n        #print("Left")\n        if root.left == None:\n            #print("--nothing here")\n            print(str(root.val) + \' : \' + "left")\n            k = Node(key)\n            root.left = k\n        else:\n            #print("--something here")\n            root.left = insert(root.left, key)\n    return root', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 14}, {'action': 'move-right', 'root': 12, 'key': 14}, {'action': 'move-left', 'root': 15, 'key': 14}, {'action': 'move-right', 'root': 13, 'key': 14}, {'action': 'insert', 'root': -1, 'key': 14}], '1': [{'action': 'move-right', 'root': 5, 'key': 6}, {'action': 'move-left', 'root': 7, 'key': 6}, {'action': 'insert', 'root': -1, 'key': 6}], '2': [{'action': 'move-left', 'root': 8, 'key': 2}, {'action': 'move-left', 'root': 3, 'key': 2}, {'action': 'move-right', 'root': 1, 'key': 2}, {'action': 'insert', 'root': -1, 'key': 2}], '3': [{'action': 'move-left', 'root': 50, 'key': 43}, {'action': 'move-right', 'root': 17, 'key': 43}, {'action': 'move-right', 'root': 23, 'key': 43}, {'action': 'insert', 'root': -1, 'key': 43}], '4': [{'action': 'move-right', 'root': 5, 'key': 9}, {'action': 'move-right', 'root': 7, 'key': 9}, {'action': 'insert', 'root': -1, 'key': 9}], '5': [{'action': 'move-right', 'root': 8, 'key': 15}, {'action': 'move-right', 'root': 10, 'key': 15}, {'action': 'move-right', 'root': 12, 'key': 15}, {'action': 'move-right', 'root': 13, 'key': 15}, {'action': 'insert', 'root': -1, 'key': 15}], '6': [{'action': 'move-left', 'root': 50, 'key': 43}, {'action': 'move-right', 'root': 17, 'key': 43}, {'action': 'move-right', 'root': 23, 'key': 43}, {'action': 'insert', 'root': -1, 'key': 43}]}}}
2021-02-22 17:30:20.661382,insert,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root == None:\n        return False   \n    if root.val == None:\n        return False   \n    elif root.val == key:\n        return True\n    else:\n        if key < root.val:\n            return search(root.left, key)\n        else:\n            return search(root.right, key)\n    \n#    else:\n#        left = False\n#        if (root.left != None):\n#            left = search(root.left, key) \n#            \n#        right = False\n#        if (root.right != None):\n#            right = search(root.right, key)\n#       \n#        return (left or right)', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 11}, {'action': 'move-left', 'root': 12, 'key': 11}, {'action': 'move-right', 'root': 9, 'key': 11}, {'action': 'move-right', 'root': 10, 'key': 11}, {'action': 'return-false', 'root': -1, 'key': 11}], '1': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '2': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-false', 'root': -1, 'key': 30}], '3': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '4': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-true', 'root': -1, 'key': 30}]}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    #print("Root:" + str(root.val))\n    if root == None or root.val == None:\n        return root\n    if key > root.val:\n        #print("Right")\n        if root.right == None:\n            #print("--nothing here")\n            print(str(root.val) + \' : \' + "right")\n            k = Node(key)\n            root.right = k\n        else:\n            #print("--something here")\n            root.right = insert(root.right, key)\n    else:\n        #print("Left")\n        if root.left == None:\n            #print("--nothing here")\n            print(str(root.val) + \' : \' + "left")\n            k = Node(key)\n            root.left = k\n        else:\n            #print("--something here")\n            root.left = insert(root.left, key)\n    return root', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 14}, {'action': 'move-right', 'root': 12, 'key': 14}, {'action': 'move-left', 'root': 15, 'key': 14}, {'action': 'move-right', 'root': 13, 'key': 14}, {'action': 'insert', 'root': -1, 'key': 14}], '1': [{'action': 'move-right', 'root': 5, 'key': 6}, {'action': 'move-left', 'root': 7, 'key': 6}, {'action': 'insert', 'root': -1, 'key': 6}], '2': [{'action': 'move-left', 'root': 8, 'key': 2}, {'action': 'move-left', 'root': 3, 'key': 2}, {'action': 'move-right', 'root': 1, 'key': 2}, {'action': 'insert', 'root': -1, 'key': 2}], '3': [{'action': 'move-left', 'root': 50, 'key': 43}, {'action': 'move-right', 'root': 17, 'key': 43}, {'action': 'move-right', 'root': 23, 'key': 43}, {'action': 'insert', 'root': -1, 'key': 43}], '4': [{'action': 'move-right', 'root': 5, 'key': 9}, {'action': 'move-right', 'root': 7, 'key': 9}, {'action': 'insert', 'root': -1, 'key': 9}], '5': [{'action': 'move-right', 'root': 8, 'key': 15}, {'action': 'move-right', 'root': 10, 'key': 15}, {'action': 'move-right', 'root': 12, 'key': 15}, {'action': 'move-right', 'root': 13, 'key': 15}, {'action': 'insert', 'root': -1, 'key': 15}], '6': [{'action': 'move-left', 'root': 50, 'key': 43}, {'action': 'move-right', 'root': 17, 'key': 43}, {'action': 'move-right', 'root': 23, 'key': 43}, {'action': 'insert', 'root': -1, 'key': 43}]}}}
2021-02-22 17:30:23.859640,insert,check-correct,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root == None:\n        return False   \n    if root.val == None:\n        return False   \n    elif root.val == key:\n        return True\n    else:\n        if key < root.val:\n            return search(root.left, key)\n        else:\n            return search(root.right, key)\n    \n#    else:\n#        left = False\n#        if (root.left != None):\n#            left = search(root.left, key) \n#            \n#        right = False\n#        if (root.right != None):\n#            right = search(root.right, key)\n#       \n#        return (left or right)', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 11}, {'action': 'move-left', 'root': 12, 'key': 11}, {'action': 'move-right', 'root': 9, 'key': 11}, {'action': 'move-right', 'root': 10, 'key': 11}, {'action': 'return-false', 'root': -1, 'key': 11}], '1': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '2': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-false', 'root': -1, 'key': 30}], '3': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '4': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-true', 'root': -1, 'key': 30}]}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    #print("Root:" + str(root.val))\n    if root == None or root.val == None:\n        return root\n    if key > root.val:\n        #print("Right")\n        if root.right == None:\n            #print("--nothing here")\n            print(str(root.val) + \' : \' + "right")\n            k = Node(key)\n            root.right = k\n        else:\n            #print("--something here")\n            root.right = insert(root.right, key)\n    else:\n        #print("Left")\n        if root.left == None:\n            #print("--nothing here")\n            print(str(root.val) + \' : \' + "left")\n            k = Node(key)\n            root.left = k\n        else:\n            #print("--something here")\n            root.left = insert(root.left, key)\n    return root', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 14}, {'action': 'move-right', 'root': 12, 'key': 14}, {'action': 'move-left', 'root': 15, 'key': 14}, {'action': 'move-right', 'root': 13, 'key': 14}, {'action': 'insert', 'root': -1, 'key': 14}], '1': [{'action': 'move-right', 'root': 5, 'key': 6}, {'action': 'move-left', 'root': 7, 'key': 6}, {'action': 'insert', 'root': -1, 'key': 6}], '2': [{'action': 'move-left', 'root': 8, 'key': 2}, {'action': 'move-left', 'root': 3, 'key': 2}, {'action': 'move-right', 'root': 1, 'key': 2}, {'action': 'insert', 'root': -1, 'key': 2}], '3': [{'action': 'move-left', 'root': 50, 'key': 43}, {'action': 'move-right', 'root': 17, 'key': 43}, {'action': 'move-right', 'root': 23, 'key': 43}, {'action': 'insert', 'root': -1, 'key': 43}], '4': [{'action': 'move-right', 'root': 5, 'key': 9}, {'action': 'move-right', 'root': 7, 'key': 9}, {'action': 'insert', 'root': -1, 'key': 9}], '5': [{'action': 'move-right', 'root': 8, 'key': 15}, {'action': 'move-right', 'root': 10, 'key': 15}, {'action': 'move-right', 'root': 12, 'key': 15}, {'action': 'move-right', 'root': 13, 'key': 15}, {'action': 'insert', 'root': -1, 'key': 15}], '6': [{'action': 'move-left', 'root': 50, 'key': 43}, {'action': 'move-right', 'root': 17, 'key': 43}, {'action': 'move-right', 'root': 23, 'key': 43}, {'action': 'insert', 'root': -1, 'key': 43}]}}}
2021-02-22 17:30:44.184023,insert,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root == None:\n        return False   \n    if root.val == None:\n        return False   \n    elif root.val == key:\n        return True\n    else:\n        if key < root.val:\n            return search(root.left, key)\n        else:\n            return search(root.right, key)\n    \n#    else:\n#        left = False\n#        if (root.left != None):\n#            left = search(root.left, key) \n#            \n#        right = False\n#        if (root.right != None):\n#            right = search(root.right, key)\n#       \n#        return (left or right)', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 11}, {'action': 'move-left', 'root': 12, 'key': 11}, {'action': 'move-right', 'root': 9, 'key': 11}, {'action': 'move-right', 'root': 10, 'key': 11}, {'action': 'return-false', 'root': -1, 'key': 11}], '1': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '2': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-false', 'root': -1, 'key': 30}], '3': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '4': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-true', 'root': -1, 'key': 30}]}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    #print("Root:" + str(root.val))\n    if root == None or root.val == None:\n        return root\n    if key > root.val:\n        #print("Right")\n        if root.right == None:\n            #print("--nothing here")\n            print(str(root.val) + \' : \' + "right")\n            k = Node(key)\n            root.right = k\n        else:\n            #print("--something here")\n            root.right = insert(root.right, key)\n    else:\n        #print("Left")\n        if root.left == None:\n            #print("--nothing here")\n            print(str(root.val) + \' : \' + "left")\n            k = Node(key)\n            root.left = k\n        else:\n            #print("--something here")\n            root.left = insert(root.left, key)\n    return root', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 14}, {'action': 'move-right', 'root': 12, 'key': 14}, {'action': 'move-left', 'root': 15, 'key': 14}, {'action': 'move-right', 'root': 13, 'key': 14}, {'action': 'insert', 'root': -1, 'key': 14}], '1': [{'action': 'move-right', 'root': 5, 'key': 6}, {'action': 'move-left', 'root': 7, 'key': 6}, {'action': 'insert', 'root': -1, 'key': 6}], '2': [{'action': 'move-left', 'root': 8, 'key': 2}, {'action': 'move-left', 'root': 3, 'key': 2}, {'action': 'move-right', 'root': 1, 'key': 2}, {'action': 'insert', 'root': -1, 'key': 2}], '3': [{'action': 'move-left', 'root': 50, 'key': 43}, {'action': 'move-right', 'root': 17, 'key': 43}, {'action': 'move-right', 'root': 23, 'key': 43}, {'action': 'insert', 'root': -1, 'key': 43}], '4': [{'action': 'move-right', 'root': 5, 'key': 9}, {'action': 'move-right', 'root': 7, 'key': 9}, {'action': 'insert', 'root': -1, 'key': 9}], '5': [{'action': 'move-right', 'root': 8, 'key': 15}, {'action': 'move-right', 'root': 10, 'key': 15}, {'action': 'move-right', 'root': 12, 'key': 15}, {'action': 'move-right', 'root': 13, 'key': 15}, {'action': 'insert', 'root': -1, 'key': 15}], '6': [{'action': 'move-left', 'root': 50, 'key': 43}, {'action': 'move-right', 'root': 17, 'key': 43}, {'action': 'move-right', 'root': 23, 'key': 43}, {'action': 'insert', 'root': -1, 'key': 43}]}}}
2021-02-22 17:30:48.752897,insert,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root == None:\n        return False   \n    if root.val == None:\n        return False   \n    elif root.val == key:\n        return True\n    else:\n        if key < root.val:\n            return search(root.left, key)\n        else:\n            return search(root.right, key)\n    \n#    else:\n#        left = False\n#        if (root.left != None):\n#            left = search(root.left, key) \n#            \n#        right = False\n#        if (root.right != None):\n#            right = search(root.right, key)\n#       \n#        return (left or right)', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 11}, {'action': 'move-left', 'root': 12, 'key': 11}, {'action': 'move-right', 'root': 9, 'key': 11}, {'action': 'move-right', 'root': 10, 'key': 11}, {'action': 'return-false', 'root': -1, 'key': 11}], '1': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '2': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-false', 'root': -1, 'key': 30}], '3': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '4': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-true', 'root': -1, 'key': 30}]}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    #print("Root:" + str(root.val))\n    if root == None or root.val == None:\n        return root\n    if key > root.val:\n        #print("Right")\n        if root.right == None:\n            #print("--nothing here")\n            print(str(root.val) + \' : \' + "right")\n            k = Node(key)\n            root.right = k\n        else:\n            #print("--something here")\n            root.right = insert(root.right, key)\n    else:\n        #print("Left")\n        if root.left == None:\n            #print("--nothing here")\n            print(str(root.val) + \' : \' + "left")\n            k = Node(key)\n            root.left = k\n        else:\n            #print("--something here")\n            root.left = insert(root.left, key)\n    return root', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 14}, {'action': 'move-right', 'root': 12, 'key': 14}, {'action': 'move-left', 'root': 15, 'key': 14}, {'action': 'move-right', 'root': 13, 'key': 14}, {'action': 'insert', 'root': -1, 'key': 14}], '1': [{'action': 'move-right', 'root': 5, 'key': 6}, {'action': 'move-left', 'root': 7, 'key': 6}, {'action': 'insert', 'root': -1, 'key': 6}], '2': [{'action': 'move-left', 'root': 8, 'key': 2}, {'action': 'move-left', 'root': 3, 'key': 2}, {'action': 'move-right', 'root': 1, 'key': 2}, {'action': 'insert', 'root': -1, 'key': 2}], '3': [{'action': 'move-left', 'root': 50, 'key': 43}, {'action': 'move-right', 'root': 17, 'key': 43}, {'action': 'move-right', 'root': 23, 'key': 43}, {'action': 'insert', 'root': -1, 'key': 43}], '4': [{'action': 'move-right', 'root': 5, 'key': 9}, {'action': 'move-right', 'root': 7, 'key': 9}, {'action': 'insert', 'root': -1, 'key': 9}], '5': [{'action': 'move-right', 'root': 8, 'key': 15}, {'action': 'move-right', 'root': 10, 'key': 15}, {'action': 'move-right', 'root': 12, 'key': 15}, {'action': 'move-right', 'root': 13, 'key': 15}, {'action': 'insert', 'root': -1, 'key': 15}], '6': [{'action': 'move-left', 'root': 50, 'key': 43}, {'action': 'move-right', 'root': 17, 'key': 43}, {'action': 'move-right', 'root': 23, 'key': 43}, {'action': 'insert', 'root': -1, 'key': 43}]}}}
2021-02-22 17:30:51.231177,insert,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root == None:\n        return False   \n    if root.val == None:\n        return False   \n    elif root.val == key:\n        return True\n    else:\n        if key < root.val:\n            return search(root.left, key)\n        else:\n            return search(root.right, key)\n    \n#    else:\n#        left = False\n#        if (root.left != None):\n#            left = search(root.left, key) \n#            \n#        right = False\n#        if (root.right != None):\n#            right = search(root.right, key)\n#       \n#        return (left or right)', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 11}, {'action': 'move-left', 'root': 12, 'key': 11}, {'action': 'move-right', 'root': 9, 'key': 11}, {'action': 'move-right', 'root': 10, 'key': 11}, {'action': 'return-false', 'root': -1, 'key': 11}], '1': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '2': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-false', 'root': -1, 'key': 30}], '3': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '4': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-true', 'root': -1, 'key': 30}]}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    #print("Root:" + str(root.val))\n    if root == None or root.val == None:\n        return root\n    if key > root.val:\n        #print("Right")\n        if root.right == None:\n            #print("--nothing here")\n            print(str(root.val) + \' : \' + "right")\n            k = Node(key)\n            root.right = k\n        else:\n            #print("--something here")\n            root.right = insert(root.right, key)\n    else:\n        #print("Left")\n        if root.left == None:\n            #print("--nothing here")\n            print(str(root.val) + \' : \' + "left")\n            k = Node(key)\n            root.left = k\n        else:\n            #print("--something here")\n            root.left = insert(root.left, key)\n    return root', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 14}, {'action': 'move-right', 'root': 12, 'key': 14}, {'action': 'move-left', 'root': 15, 'key': 14}, {'action': 'move-right', 'root': 13, 'key': 14}, {'action': 'insert', 'root': -1, 'key': 14}], '1': [{'action': 'move-right', 'root': 5, 'key': 6}, {'action': 'move-left', 'root': 7, 'key': 6}, {'action': 'insert', 'root': -1, 'key': 6}], '2': [{'action': 'move-left', 'root': 8, 'key': 2}, {'action': 'move-left', 'root': 3, 'key': 2}, {'action': 'move-right', 'root': 1, 'key': 2}, {'action': 'insert', 'root': -1, 'key': 2}], '3': [{'action': 'move-left', 'root': 50, 'key': 43}, {'action': 'move-right', 'root': 17, 'key': 43}, {'action': 'move-right', 'root': 23, 'key': 43}, {'action': 'insert', 'root': -1, 'key': 43}], '4': [{'action': 'move-right', 'root': 5, 'key': 9}, {'action': 'move-right', 'root': 7, 'key': 9}, {'action': 'insert', 'root': -1, 'key': 9}], '5': [{'action': 'move-right', 'root': 8, 'key': 15}, {'action': 'move-right', 'root': 10, 'key': 15}, {'action': 'move-right', 'root': 12, 'key': 15}, {'action': 'move-right', 'root': 13, 'key': 15}, {'action': 'insert', 'root': -1, 'key': 15}], '6': [{'action': 'move-left', 'root': 50, 'key': 43}, {'action': 'move-right', 'root': 17, 'key': 43}, {'action': 'move-right', 'root': 23, 'key': 43}, {'action': 'insert', 'root': -1, 'key': 43}]}}}
2021-02-22 17:31:01.503098,insert,check-correct,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root == None:\n        return False   \n    if root.val == None:\n        return False   \n    elif root.val == key:\n        return True\n    else:\n        if key < root.val:\n            return search(root.left, key)\n        else:\n            return search(root.right, key)\n    \n#    else:\n#        left = False\n#        if (root.left != None):\n#            left = search(root.left, key) \n#            \n#        right = False\n#        if (root.right != None):\n#            right = search(root.right, key)\n#       \n#        return (left or right)', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 11}, {'action': 'move-left', 'root': 12, 'key': 11}, {'action': 'move-right', 'root': 9, 'key': 11}, {'action': 'move-right', 'root': 10, 'key': 11}, {'action': 'return-false', 'root': -1, 'key': 11}], '1': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '2': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-false', 'root': -1, 'key': 30}], '3': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '4': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-true', 'root': -1, 'key': 30}]}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    #print("Root:" + str(root.val))\n    if key > root.val:\n        #print("Right")\n        if root.right == None:\n            #print("--nothing here")\n            print(str(root.val) + \' : \' + "right")\n            k = Node(key)\n            root.right = k\n        else:\n            #print("--something here")\n            root.right = insert(root.right, key)\n    else:\n        #print("Left")\n        if root.left == None:\n            #print("--nothing here")\n            print(str(root.val) + \' : \' + "left")\n            k = Node(key)\n            root.left = k\n        else:\n            #print("--something here")\n            root.left = insert(root.left, key)\n    return root', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 14}, {'action': 'move-right', 'root': 12, 'key': 14}, {'action': 'move-left', 'root': 15, 'key': 14}, {'action': 'move-right', 'root': 13, 'key': 14}, {'action': 'insert', 'root': -1, 'key': 14}], '1': [{'action': 'move-right', 'root': 5, 'key': 6}, {'action': 'move-left', 'root': 7, 'key': 6}, {'action': 'insert', 'root': -1, 'key': 6}], '2': [{'action': 'move-left', 'root': 8, 'key': 2}, {'action': 'move-left', 'root': 3, 'key': 2}, {'action': 'move-right', 'root': 1, 'key': 2}, {'action': 'insert', 'root': -1, 'key': 2}], '3': [{'action': 'move-left', 'root': 50, 'key': 43}, {'action': 'move-right', 'root': 17, 'key': 43}, {'action': 'move-right', 'root': 23, 'key': 43}, {'action': 'insert', 'root': -1, 'key': 43}], '4': [{'action': 'move-right', 'root': 5, 'key': 9}, {'action': 'move-right', 'root': 7, 'key': 9}, {'action': 'insert', 'root': -1, 'key': 9}], '5': [{'action': 'move-right', 'root': 8, 'key': 15}, {'action': 'move-right', 'root': 10, 'key': 15}, {'action': 'move-right', 'root': 12, 'key': 15}, {'action': 'move-right', 'root': 13, 'key': 15}, {'action': 'insert', 'root': -1, 'key': 15}], '6': [{'action': 'move-left', 'root': 50, 'key': 43}, {'action': 'move-right', 'root': 17, 'key': 43}, {'action': 'move-right', 'root': 23, 'key': 43}, {'action': 'insert', 'root': -1, 'key': 43}]}}}
2021-02-22 17:31:02.511870,insert,check-correct,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root == None:\n        return False   \n    if root.val == None:\n        return False   \n    elif root.val == key:\n        return True\n    else:\n        if key < root.val:\n            return search(root.left, key)\n        else:\n            return search(root.right, key)\n    \n#    else:\n#        left = False\n#        if (root.left != None):\n#            left = search(root.left, key) \n#            \n#        right = False\n#        if (root.right != None):\n#            right = search(root.right, key)\n#       \n#        return (left or right)', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 11}, {'action': 'move-left', 'root': 12, 'key': 11}, {'action': 'move-right', 'root': 9, 'key': 11}, {'action': 'move-right', 'root': 10, 'key': 11}, {'action': 'return-false', 'root': -1, 'key': 11}], '1': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '2': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-false', 'root': -1, 'key': 30}], '3': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '4': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-true', 'root': -1, 'key': 30}]}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    #print("Root:" + str(root.val))\n    if key > root.val:\n        #print("Right")\n        if root.right == None:\n            #print("--nothing here")\n            print(str(root.val) + \' : \' + "right")\n            k = Node(key)\n            root.right = k\n        else:\n            #print("--something here")\n            root.right = insert(root.right, key)\n    else:\n        #print("Left")\n        if root.left == None:\n            #print("--nothing here")\n            print(str(root.val) + \' : \' + "left")\n            k = Node(key)\n            root.left = k\n        else:\n            #print("--something here")\n            root.left = insert(root.left, key)\n    return root', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 14}, {'action': 'move-right', 'root': 12, 'key': 14}, {'action': 'move-left', 'root': 15, 'key': 14}, {'action': 'move-right', 'root': 13, 'key': 14}, {'action': 'insert', 'root': -1, 'key': 14}], '1': [{'action': 'move-right', 'root': 5, 'key': 6}, {'action': 'move-left', 'root': 7, 'key': 6}, {'action': 'insert', 'root': -1, 'key': 6}], '2': [{'action': 'move-left', 'root': 8, 'key': 2}, {'action': 'move-left', 'root': 3, 'key': 2}, {'action': 'move-right', 'root': 1, 'key': 2}, {'action': 'insert', 'root': -1, 'key': 2}], '3': [{'action': 'move-left', 'root': 50, 'key': 43}, {'action': 'move-right', 'root': 17, 'key': 43}, {'action': 'move-right', 'root': 23, 'key': 43}, {'action': 'insert', 'root': -1, 'key': 43}], '4': [{'action': 'move-right', 'root': 5, 'key': 9}, {'action': 'move-right', 'root': 7, 'key': 9}, {'action': 'insert', 'root': -1, 'key': 9}], '5': [{'action': 'move-right', 'root': 8, 'key': 15}, {'action': 'move-right', 'root': 10, 'key': 15}, {'action': 'move-right', 'root': 12, 'key': 15}, {'action': 'move-right', 'root': 13, 'key': 15}, {'action': 'insert', 'root': -1, 'key': 15}], '6': [{'action': 'move-left', 'root': 50, 'key': 43}, {'action': 'move-right', 'root': 17, 'key': 43}, {'action': 'move-right', 'root': 23, 'key': 43}, {'action': 'insert', 'root': -1, 'key': 43}]}}}
2021-02-22 17:31:04.203195,insert,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root == None:\n        return False   \n    if root.val == None:\n        return False   \n    elif root.val == key:\n        return True\n    else:\n        if key < root.val:\n            return search(root.left, key)\n        else:\n            return search(root.right, key)\n    \n#    else:\n#        left = False\n#        if (root.left != None):\n#            left = search(root.left, key) \n#            \n#        right = False\n#        if (root.right != None):\n#            right = search(root.right, key)\n#       \n#        return (left or right)', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 11}, {'action': 'move-left', 'root': 12, 'key': 11}, {'action': 'move-right', 'root': 9, 'key': 11}, {'action': 'move-right', 'root': 10, 'key': 11}, {'action': 'return-false', 'root': -1, 'key': 11}], '1': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '2': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-false', 'root': -1, 'key': 30}], '3': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '4': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-true', 'root': -1, 'key': 30}]}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    #print("Root:" + str(root.val))\n    if key > root.val:\n        #print("Right")\n        if root.right == None:\n            #print("--nothing here")\n            print(str(root.val) + \' : \' + "right")\n            k = Node(key)\n            root.right = k\n        else:\n            #print("--something here")\n            root.right = insert(root.right, key)\n    else:\n        #print("Left")\n        if root.left == None:\n            #print("--nothing here")\n            print(str(root.val) + \' : \' + "left")\n            k = Node(key)\n            root.left = k\n        else:\n            #print("--something here")\n            root.left = insert(root.left, key)\n    return root', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 14}, {'action': 'move-right', 'root': 12, 'key': 14}, {'action': 'move-left', 'root': 15, 'key': 14}, {'action': 'move-right', 'root': 13, 'key': 14}, {'action': 'insert', 'root': -1, 'key': 14}], '1': [{'action': 'move-right', 'root': 5, 'key': 6}, {'action': 'move-left', 'root': 7, 'key': 6}, {'action': 'insert', 'root': -1, 'key': 6}], '2': [{'action': 'move-left', 'root': 8, 'key': 2}, {'action': 'move-left', 'root': 3, 'key': 2}, {'action': 'move-right', 'root': 1, 'key': 2}, {'action': 'insert', 'root': -1, 'key': 2}], '3': [{'action': 'move-left', 'root': 50, 'key': 43}, {'action': 'move-right', 'root': 17, 'key': 43}, {'action': 'move-right', 'root': 23, 'key': 43}, {'action': 'insert', 'root': -1, 'key': 43}], '4': [{'action': 'move-right', 'root': 5, 'key': 9}, {'action': 'move-right', 'root': 7, 'key': 9}, {'action': 'insert', 'root': -1, 'key': 9}], '5': [{'action': 'move-right', 'root': 8, 'key': 15}, {'action': 'move-right', 'root': 10, 'key': 15}, {'action': 'move-right', 'root': 12, 'key': 15}, {'action': 'move-right', 'root': 13, 'key': 15}, {'action': 'insert', 'root': -1, 'key': 15}], '6': [{'action': 'move-left', 'root': 50, 'key': 43}, {'action': 'move-right', 'root': 17, 'key': 43}, {'action': 'move-right', 'root': 23, 'key': 43}, {'action': 'insert', 'root': -1, 'key': 43}]}}}
2021-02-22 17:31:25.161794,insert,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root == None:\n        return False   \n    if root.val == None:\n        return False   \n    elif root.val == key:\n        return True\n    else:\n        if key < root.val:\n            return search(root.left, key)\n        else:\n            return search(root.right, key)\n    \n#    else:\n#        left = False\n#        if (root.left != None):\n#            left = search(root.left, key) \n#            \n#        right = False\n#        if (root.right != None):\n#            right = search(root.right, key)\n#       \n#        return (left or right)', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 11}, {'action': 'move-left', 'root': 12, 'key': 11}, {'action': 'move-right', 'root': 9, 'key': 11}, {'action': 'move-right', 'root': 10, 'key': 11}, {'action': 'return-false', 'root': -1, 'key': 11}], '1': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '2': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-false', 'root': -1, 'key': 30}], '3': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '4': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-true', 'root': -1, 'key': 30}]}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    if key > root.val:\n        if root.right == None:\n            k = Node(key)\n            root.right = k\n        else:\n            root.right = insert(root.right, key)\n    else:\n        if root.left == None:\n            k = Node(key)\n            root.left = k\n        else:\n            root.left = insert(root.left, key)\n    return root', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 14}, {'action': 'move-right', 'root': 12, 'key': 14}, {'action': 'move-left', 'root': 15, 'key': 14}, {'action': 'move-right', 'root': 13, 'key': 14}, {'action': 'insert', 'root': -1, 'key': 14}], '1': [{'action': 'move-right', 'root': 5, 'key': 6}, {'action': 'move-left', 'root': 7, 'key': 6}, {'action': 'insert', 'root': -1, 'key': 6}], '2': [{'action': 'move-left', 'root': 8, 'key': 2}, {'action': 'move-left', 'root': 3, 'key': 2}, {'action': 'move-right', 'root': 1, 'key': 2}, {'action': 'insert', 'root': -1, 'key': 2}], '3': [{'action': 'move-left', 'root': 50, 'key': 43}, {'action': 'move-right', 'root': 17, 'key': 43}, {'action': 'move-right', 'root': 23, 'key': 43}, {'action': 'insert', 'root': -1, 'key': 43}], '4': [{'action': 'move-right', 'root': 5, 'key': 9}, {'action': 'move-right', 'root': 7, 'key': 9}, {'action': 'insert', 'root': -1, 'key': 9}], '5': [{'action': 'move-right', 'root': 8, 'key': 15}, {'action': 'move-right', 'root': 10, 'key': 15}, {'action': 'move-right', 'root': 12, 'key': 15}, {'action': 'move-right', 'root': 13, 'key': 15}, {'action': 'insert', 'root': -1, 'key': 15}], '6': [{'action': 'move-left', 'root': 50, 'key': 43}, {'action': 'move-right', 'root': 17, 'key': 43}, {'action': 'move-right', 'root': 23, 'key': 43}, {'action': 'insert', 'root': -1, 'key': 43}]}}}
2021-02-22 17:31:29.880624,insert,check-correct,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root == None:\n        return False   \n    if root.val == None:\n        return False   \n    elif root.val == key:\n        return True\n    else:\n        if key < root.val:\n            return search(root.left, key)\n        else:\n            return search(root.right, key)\n    \n#    else:\n#        left = False\n#        if (root.left != None):\n#            left = search(root.left, key) \n#            \n#        right = False\n#        if (root.right != None):\n#            right = search(root.right, key)\n#       \n#        return (left or right)', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 11}, {'action': 'move-left', 'root': 12, 'key': 11}, {'action': 'move-right', 'root': 9, 'key': 11}, {'action': 'move-right', 'root': 10, 'key': 11}, {'action': 'return-false', 'root': -1, 'key': 11}], '1': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '2': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-false', 'root': -1, 'key': 30}], '3': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '4': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-true', 'root': -1, 'key': 30}]}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    if key > root.val:\n        if root.right == None:\n            k = Node(key)\n            root.right = k\n        else:\n            root.right = insert(root.right, key)\n    else:\n        if root.left == None:\n            k = Node(key)\n            root.left = k\n        else:\n            root.left = insert(root.left, key)\n    return root', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 14}, {'action': 'move-right', 'root': 12, 'key': 14}, {'action': 'move-left', 'root': 15, 'key': 14}, {'action': 'move-right', 'root': 13, 'key': 14}, {'action': 'insert', 'root': -1, 'key': 14}], '1': [{'action': 'move-right', 'root': 5, 'key': 6}, {'action': 'move-left', 'root': 7, 'key': 6}, {'action': 'insert', 'root': -1, 'key': 6}], '2': [{'action': 'move-left', 'root': 8, 'key': 2}, {'action': 'move-left', 'root': 3, 'key': 2}, {'action': 'move-right', 'root': 1, 'key': 2}, {'action': 'insert', 'root': -1, 'key': 2}], '3': [{'action': 'move-left', 'root': 50, 'key': 43}, {'action': 'move-right', 'root': 17, 'key': 43}, {'action': 'move-right', 'root': 23, 'key': 43}, {'action': 'insert', 'root': -1, 'key': 43}], '4': [{'action': 'move-right', 'root': 5, 'key': 9}, {'action': 'move-right', 'root': 7, 'key': 9}, {'action': 'insert', 'root': -1, 'key': 9}], '5': [{'action': 'move-right', 'root': 8, 'key': 15}, {'action': 'move-right', 'root': 10, 'key': 15}, {'action': 'move-right', 'root': 12, 'key': 15}, {'action': 'move-right', 'root': 13, 'key': 15}, {'action': 'insert', 'root': -1, 'key': 15}], '6': [{'action': 'move-left', 'root': 50, 'key': 43}, {'action': 'move-right', 'root': 17, 'key': 43}, {'action': 'move-right', 'root': 23, 'key': 43}, {'action': 'insert', 'root': -1, 'key': 43}]}}}
2021-02-22 17:32:08.606993,insert,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root == None:\n        return False   \n    if root.val == None:\n        return False   \n    elif root.val == key:\n        return True\n    else:\n        if key < root.val:\n            return search(root.left, key)\n        else:\n            return search(root.right, key)\n    \n#    else:\n#        left = False\n#        if (root.left != None):\n#            left = search(root.left, key) \n#            \n#        right = False\n#        if (root.right != None):\n#            right = search(root.right, key)\n#       \n#        return (left or right)', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 11}, {'action': 'move-left', 'root': 12, 'key': 11}, {'action': 'move-right', 'root': 9, 'key': 11}, {'action': 'move-right', 'root': 10, 'key': 11}, {'action': 'return-false', 'root': -1, 'key': 11}], '1': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '2': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-false', 'root': -1, 'key': 30}], '3': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '4': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-true', 'root': -1, 'key': 30}]}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root == None:\n        return root\n    if key > root.val:\n        if root.right == None:\n            k = Node(key)\n            root.right = k\n        else:\n            root.right = insert(root.right, key)\n    else:\n        if root.left == None:\n            k = Node(key)\n            root.left = k\n        else:\n            root.left = insert(root.left, key)\n    return root', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 14}, {'action': 'move-right', 'root': 12, 'key': 14}, {'action': 'move-left', 'root': 15, 'key': 14}, {'action': 'move-right', 'root': 13, 'key': 14}, {'action': 'insert', 'root': -1, 'key': 14}], '1': [{'action': 'move-right', 'root': 5, 'key': 6}, {'action': 'move-left', 'root': 7, 'key': 6}, {'action': 'insert', 'root': -1, 'key': 6}], '2': [{'action': 'move-left', 'root': 8, 'key': 2}, {'action': 'move-left', 'root': 3, 'key': 2}, {'action': 'move-right', 'root': 1, 'key': 2}, {'action': 'insert', 'root': -1, 'key': 2}], '3': [{'action': 'move-left', 'root': 50, 'key': 43}, {'action': 'move-right', 'root': 17, 'key': 43}, {'action': 'move-right', 'root': 23, 'key': 43}, {'action': 'insert', 'root': -1, 'key': 43}], '4': [{'action': 'move-right', 'root': 5, 'key': 9}, {'action': 'move-right', 'root': 7, 'key': 9}, {'action': 'insert', 'root': -1, 'key': 9}], '5': [{'action': 'move-right', 'root': 8, 'key': 15}, {'action': 'move-right', 'root': 10, 'key': 15}, {'action': 'move-right', 'root': 12, 'key': 15}, {'action': 'move-right', 'root': 13, 'key': 15}, {'action': 'insert', 'root': -1, 'key': 15}], '6': [{'action': 'move-left', 'root': 50, 'key': 43}, {'action': 'move-right', 'root': 17, 'key': 43}, {'action': 'move-right', 'root': 23, 'key': 43}, {'action': 'insert', 'root': -1, 'key': 43}]}}}
2021-02-22 17:32:10.373658,insert,check-correct,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root == None:\n        return False   \n    if root.val == None:\n        return False   \n    elif root.val == key:\n        return True\n    else:\n        if key < root.val:\n            return search(root.left, key)\n        else:\n            return search(root.right, key)\n    \n#    else:\n#        left = False\n#        if (root.left != None):\n#            left = search(root.left, key) \n#            \n#        right = False\n#        if (root.right != None):\n#            right = search(root.right, key)\n#       \n#        return (left or right)', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 11}, {'action': 'move-left', 'root': 12, 'key': 11}, {'action': 'move-right', 'root': 9, 'key': 11}, {'action': 'move-right', 'root': 10, 'key': 11}, {'action': 'return-false', 'root': -1, 'key': 11}], '1': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '2': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-false', 'root': -1, 'key': 30}], '3': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '4': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-true', 'root': -1, 'key': 30}]}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root == None:\n        return root\n    if key > root.val:\n        if root.right == None:\n            k = Node(key)\n            root.right = k\n        else:\n            root.right = insert(root.right, key)\n    else:\n        if root.left == None:\n            k = Node(key)\n            root.left = k\n        else:\n            root.left = insert(root.left, key)\n    return root', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 14}, {'action': 'move-right', 'root': 12, 'key': 14}, {'action': 'move-left', 'root': 15, 'key': 14}, {'action': 'move-right', 'root': 13, 'key': 14}, {'action': 'insert', 'root': -1, 'key': 14}], '1': [{'action': 'move-right', 'root': 5, 'key': 6}, {'action': 'move-left', 'root': 7, 'key': 6}, {'action': 'insert', 'root': -1, 'key': 6}], '2': [{'action': 'move-left', 'root': 8, 'key': 2}, {'action': 'move-left', 'root': 3, 'key': 2}, {'action': 'move-right', 'root': 1, 'key': 2}, {'action': 'insert', 'root': -1, 'key': 2}], '3': [{'action': 'move-left', 'root': 50, 'key': 43}, {'action': 'move-right', 'root': 17, 'key': 43}, {'action': 'move-right', 'root': 23, 'key': 43}, {'action': 'insert', 'root': -1, 'key': 43}], '4': [{'action': 'move-right', 'root': 5, 'key': 9}, {'action': 'move-right', 'root': 7, 'key': 9}, {'action': 'insert', 'root': -1, 'key': 9}], '5': [{'action': 'move-right', 'root': 8, 'key': 15}, {'action': 'move-right', 'root': 10, 'key': 15}, {'action': 'move-right', 'root': 12, 'key': 15}, {'action': 'move-right', 'root': 13, 'key': 15}, {'action': 'insert', 'root': -1, 'key': 15}], '6': [{'action': 'move-left', 'root': 50, 'key': 43}, {'action': 'move-right', 'root': 17, 'key': 43}, {'action': 'move-right', 'root': 23, 'key': 43}, {'action': 'insert', 'root': -1, 'key': 43}]}}}
2021-02-22 17:32:11.905496,insert,check-correct,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root == None:\n        return False   \n    if root.val == None:\n        return False   \n    elif root.val == key:\n        return True\n    else:\n        if key < root.val:\n            return search(root.left, key)\n        else:\n            return search(root.right, key)\n    \n#    else:\n#        left = False\n#        if (root.left != None):\n#            left = search(root.left, key) \n#            \n#        right = False\n#        if (root.right != None):\n#            right = search(root.right, key)\n#       \n#        return (left or right)', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 11}, {'action': 'move-left', 'root': 12, 'key': 11}, {'action': 'move-right', 'root': 9, 'key': 11}, {'action': 'move-right', 'root': 10, 'key': 11}, {'action': 'return-false', 'root': -1, 'key': 11}], '1': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '2': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-false', 'root': -1, 'key': 30}], '3': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '4': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-true', 'root': -1, 'key': 30}]}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root == None:\n        return root\n    if key > root.val:\n        if root.right == None:\n            k = Node(key)\n            root.right = k\n        else:\n            root.right = insert(root.right, key)\n    else:\n        if root.left == None:\n            k = Node(key)\n            root.left = k\n        else:\n            root.left = insert(root.left, key)\n    return root', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 14}, {'action': 'move-right', 'root': 12, 'key': 14}, {'action': 'move-left', 'root': 15, 'key': 14}, {'action': 'move-right', 'root': 13, 'key': 14}, {'action': 'insert', 'root': -1, 'key': 14}], '1': [{'action': 'move-right', 'root': 5, 'key': 6}, {'action': 'move-left', 'root': 7, 'key': 6}, {'action': 'insert', 'root': -1, 'key': 6}], '2': [{'action': 'move-left', 'root': 8, 'key': 2}, {'action': 'move-left', 'root': 3, 'key': 2}, {'action': 'move-right', 'root': 1, 'key': 2}, {'action': 'insert', 'root': -1, 'key': 2}], '3': [{'action': 'move-left', 'root': 50, 'key': 43}, {'action': 'move-right', 'root': 17, 'key': 43}, {'action': 'move-right', 'root': 23, 'key': 43}, {'action': 'insert', 'root': -1, 'key': 43}], '4': [{'action': 'move-right', 'root': 5, 'key': 9}, {'action': 'move-right', 'root': 7, 'key': 9}, {'action': 'insert', 'root': -1, 'key': 9}], '5': [{'action': 'move-right', 'root': 8, 'key': 15}, {'action': 'move-right', 'root': 10, 'key': 15}, {'action': 'move-right', 'root': 12, 'key': 15}, {'action': 'move-right', 'root': 13, 'key': 15}, {'action': 'insert', 'root': -1, 'key': 15}], '6': [{'action': 'move-left', 'root': 50, 'key': 43}, {'action': 'move-right', 'root': 17, 'key': 43}, {'action': 'move-right', 'root': 23, 'key': 43}, {'action': 'insert', 'root': -1, 'key': 43}]}}}
2021-02-22 17:32:59.909051,insert,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root == None:\n        return False   \n    if root.val == None:\n        return False   \n    elif root.val == key:\n        return True\n    else:\n        if key < root.val:\n            return search(root.left, key)\n        else:\n            return search(root.right, key)\n    \n#    else:\n#        left = False\n#        if (root.left != None):\n#            left = search(root.left, key) \n#            \n#        right = False\n#        if (root.right != None):\n#            right = search(root.right, key)\n#       \n#        return (left or right)', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 11}, {'action': 'move-left', 'root': 12, 'key': 11}, {'action': 'move-right', 'root': 9, 'key': 11}, {'action': 'move-right', 'root': 10, 'key': 11}, {'action': 'return-false', 'root': -1, 'key': 11}], '1': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '2': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-false', 'root': -1, 'key': 30}], '3': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '4': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-true', 'root': -1, 'key': 30}]}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root == None:\n        return root\n    if key > root.val:\n        if root.right == None:\n            k = Node(key)\n            root.right = k\n        else:\n            root.right = insert(root.right, key)\n    else:\n        if root.left == None:\n            k = Node(key)\n            root.left = k\n        else:\n            root.left = insert(root.left, key)\n    return root', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 14}, {'action': 'move-right', 'root': 12, 'key': 14}, {'action': 'move-left', 'root': 15, 'key': 14}, {'action': 'move-right', 'root': 13, 'key': 14}, {'action': 'insert', 'root': -1, 'key': 14}], '1': [{'action': 'move-right', 'root': 5, 'key': 6}, {'action': 'move-left', 'root': 7, 'key': 6}, {'action': 'insert', 'root': -1, 'key': 6}], '2': [{'action': 'move-left', 'root': 8, 'key': 2}, {'action': 'move-left', 'root': 3, 'key': 2}, {'action': 'move-right', 'root': 1, 'key': 2}, {'action': 'insert', 'root': -1, 'key': 2}], '3': [{'action': 'move-left', 'root': 50, 'key': 43}, {'action': 'move-right', 'root': 17, 'key': 43}, {'action': 'move-right', 'root': 23, 'key': 43}, {'action': 'insert', 'root': -1, 'key': 43}], '4': [{'action': 'move-right', 'root': 5, 'key': 9}, {'action': 'move-right', 'root': 7, 'key': 9}, {'action': 'insert', 'root': -1, 'key': 9}], '5': [{'action': 'move-right', 'root': 8, 'key': 15}, {'action': 'move-right', 'root': 10, 'key': 15}, {'action': 'move-right', 'root': 12, 'key': 15}, {'action': 'move-right', 'root': 13, 'key': 15}, {'action': 'insert', 'root': -1, 'key': 15}], '6': [{'action': 'move-left', 'root': 50, 'key': 43}, {'action': 'move-right', 'root': 17, 'key': 43}, {'action': 'move-right', 'root': 23, 'key': 43}, {'action': 'insert', 'root': -1, 'key': 43}]}}}
2021-02-22 17:33:01.965179,insert,check-correct,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root == None:\n        return False   \n    if root.val == None:\n        return False   \n    elif root.val == key:\n        return True\n    else:\n        if key < root.val:\n            return search(root.left, key)\n        else:\n            return search(root.right, key)\n    \n#    else:\n#        left = False\n#        if (root.left != None):\n#            left = search(root.left, key) \n#            \n#        right = False\n#        if (root.right != None):\n#            right = search(root.right, key)\n#       \n#        return (left or right)', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 11}, {'action': 'move-left', 'root': 12, 'key': 11}, {'action': 'move-right', 'root': 9, 'key': 11}, {'action': 'move-right', 'root': 10, 'key': 11}, {'action': 'return-false', 'root': -1, 'key': 11}], '1': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '2': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-false', 'root': -1, 'key': 30}], '3': [{'action': 'move-right', 'root': 5, 'key': 7}, {'action': 'return-true', 'root': 7, 'key': 7}], '4': [{'action': 'move-left', 'root': 50, 'key': 30}, {'action': 'move-right', 'root': 17, 'key': 30}, {'action': 'move-right', 'root': 23, 'key': 30}, {'action': 'return-true', 'root': -1, 'key': 30}]}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root == None:\n        return root\n    if key > root.val:\n        if root.right == None:\n            k = Node(key)\n            root.right = k\n        else:\n            root.right = insert(root.right, key)\n    else:\n        if root.left == None:\n            k = Node(key)\n            root.left = k\n        else:\n            root.left = insert(root.left, key)\n    return root', 'traces': {'0': [{'action': 'move-right', 'root': 7, 'key': 14}, {'action': 'move-right', 'root': 12, 'key': 14}, {'action': 'move-left', 'root': 15, 'key': 14}, {'action': 'move-right', 'root': 13, 'key': 14}, {'action': 'insert', 'root': -1, 'key': 14}], '1': [{'action': 'move-right', 'root': 5, 'key': 6}, {'action': 'move-left', 'root': 7, 'key': 6}, {'action': 'insert', 'root': -1, 'key': 6}], '2': [{'action': 'move-left', 'root': 8, 'key': 2}, {'action': 'move-left', 'root': 3, 'key': 2}, {'action': 'move-right', 'root': 1, 'key': 2}, {'action': 'insert', 'root': -1, 'key': 2}], '3': [{'action': 'move-left', 'root': 50, 'key': 43}, {'action': 'move-right', 'root': 17, 'key': 43}, {'action': 'move-right', 'root': 23, 'key': 43}, {'action': 'insert', 'root': -1, 'key': 43}], '4': [{'action': 'move-right', 'root': 5, 'key': 9}, {'action': 'move-right', 'root': 7, 'key': 9}, {'action': 'insert', 'root': -1, 'key': 9}], '5': [{'action': 'move-right', 'root': 8, 'key': 15}, {'action': 'move-right', 'root': 10, 'key': 15}, {'action': 'move-right', 'root': 12, 'key': 15}, {'action': 'move-right', 'root': 13, 'key': 15}, {'action': 'insert', 'root': -1, 'key': 15}], '6': [{'action': 'move-left', 'root': 50, 'key': 43}, {'action': 'move-right', 'root': 17, 'key': 43}, {'action': 'move-right', 'root': 23, 'key': 43}, {'action': 'insert', 'root': -1, 'key': 43}]}}}
