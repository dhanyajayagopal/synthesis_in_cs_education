2021-02-16 17:29:11.583629,page-change,1,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    return False', 'traces': {}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    return root', 'traces': {}}}
2021-02-16 17:29:30.560293,search,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root.left == None and root.right == None:\n        return root.val == key\n    #if root.val == None:\n        \n    else:#either root.left or root.right is real-valued\n        if key == root.val:\n            return True\n        elif key < root.val:\n            return search(root.left, key)\n        else:\n            return search(root.right, key)\n    #return False', 'traces': {}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    return root', 'traces': {}}}
2021-02-16 17:29:57.694296,search,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root.left == None and root.right == None:\n        return root.val == key\n    #if root.val == None:\n        \n    else:#either root.left or root.right is real-valued\n        if key == root.val:\n            return True\n        elif key < root.val:\n            return search(root.left, key)\n        else:\n            return search(root.right, key)\n    #return False', 'traces': {}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    return root', 'traces': {}}}
2021-02-16 17:37:58.691753,search,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if key == root.val:\n        return True\n    if root.left == None and root.right == None:\n        return root.val == key\n    if root.left == None and root.right != None:\n        if key < root.val:\n            return False\n        if key > root.val:\n            return search(root.right, key)\n    if root.left != None and root.right == None:\n        if key < root.val:\n            return search(root.left, key) \n        if key > root.val:\n            return False\n    else:#both root.left and root.right is real-valued\n        if key < root.val:\n            return search(root.left, key)\n        else:\n            return search(root.right, key)\n    #return False', 'traces': {}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    return root', 'traces': {}}}
2021-02-16 17:38:14.657162,search,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if key == root.val:\n        return True\n    if root.left == None and root.right == None:\n        return root.val == key\n    if root.left == None and root.right != None:\n        if key < root.val:\n            return False\n        if key > root.val:\n            return search(root.right, key)\n    if root.left != None and root.right == None:\n        if key < root.val:\n            return search(root.left, key) \n        if key > root.val:\n            return False\n    else:#both root.left and root.right is real-valued\n        if key < root.val:\n            return search(root.left, key)\n        else:\n            return search(root.right, key)\n    #return False', 'traces': {}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    return root', 'traces': {}}}
2021-02-16 17:38:20.791182,search,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if key == root.val:\n        return True\n    if root.left == None and root.right == None:\n        return root.val == key\n    if root.left == None and root.right != None:\n        if key < root.val:\n            return False\n        if key > root.val:\n            return search(root.right, key)\n    if root.left != None and root.right == None:\n        if key < root.val:\n            return search(root.left, key) \n        if key > root.val:\n            return False\n    else:#both root.left and root.right is real-valued\n        if key < root.val:\n            return search(root.left, key)\n        else:\n            return search(root.right, key)\n    #return False', 'traces': {}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    return root', 'traces': {}}}
2021-02-16 17:38:23.344338,search,check-correct,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if key == root.val:\n        return True\n    if root.left == None and root.right == None:\n        return root.val == key\n    if root.left == None and root.right != None:\n        if key < root.val:\n            return False\n        if key > root.val:\n            return search(root.right, key)\n    if root.left != None and root.right == None:\n        if key < root.val:\n            return search(root.left, key) \n        if key > root.val:\n            return False\n    else:#both root.left and root.right is real-valued\n        if key < root.val:\n            return search(root.left, key)\n        else:\n            return search(root.right, key)\n    #return False', 'traces': {}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    return root', 'traces': {}}}
2021-02-16 17:38:44.144534,search,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if key == root.val:\n        return True\n    if root.left == None and root.right == None:\n        return root.val == key\n    if root.left == None and root.right != None:\n        if key < root.val:\n            return False\n        if key > root.val:\n            return search(root.right, key)\n    if root.left != None and root.right == None:\n        if key < root.val:\n            return search(root.left, key) \n        if key > root.val:\n            return False\n    else:#both root.left and root.right is real-valued\n        if key < root.val:\n            return search(root.left, key)\n        else:\n            return search(root.right, key)\n    #return False', 'traces': {}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    return root', 'traces': {}}}
2021-02-16 17:39:54.466920,search,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root.left == None and root.right == None:\n        return root.val == key\n    if root.left == None and root.right != None:\n        if key < root.val:\n            return False\n        if key > root.val:\n            return search(root.right, key)\n    if root.left != None and root.right == None:\n        if key < root.val:\n            return search(root.left, key) \n        if key > root.val:\n            return False\n    else:#both root.left and root.right is real-valued\n        if key < root.val:\n            return search(root.left, key)\n        else:\n            return search(root.right, key)\n    if key == root.val:\n        return True\n    #return False', 'traces': {}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    return root', 'traces': {}}}
2021-02-16 17:40:00.620136,search,check-correct,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root.left == None and root.right == None:\n        return root.val == key\n    if root.left == None and root.right != None:\n        if key < root.val:\n            return False\n        if key > root.val:\n            return search(root.right, key)\n    if root.left != None and root.right == None:\n        if key < root.val:\n            return search(root.left, key) \n        if key > root.val:\n            return False\n    else:#both root.left and root.right is real-valued\n        if key < root.val:\n            return search(root.left, key)\n        else:\n            return search(root.right, key)\n    if key == root.val:\n        return True\n    #return False', 'traces': {}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    return root', 'traces': {}}}
2021-02-16 17:40:02.040653,search,check-correct,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root.left == None and root.right == None:\n        return root.val == key\n    if root.left == None and root.right != None:\n        if key < root.val:\n            return False\n        if key > root.val:\n            return search(root.right, key)\n    if root.left != None and root.right == None:\n        if key < root.val:\n            return search(root.left, key) \n        if key > root.val:\n            return False\n    else:#both root.left and root.right is real-valued\n        if key < root.val:\n            return search(root.left, key)\n        else:\n            return search(root.right, key)\n    if key == root.val:\n        return True\n    #return False', 'traces': {}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    return root', 'traces': {}}}
2021-02-16 17:41:11.344442,search,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root.left == None and root.right == None:\n        return root.val == key\n    if root.left == None and root.right != None:\n        if key < root.val:\n            return False\n        if key > root.val:\n            return search(root.right, key)\n    if root.left != None and root.right == None:\n        if key < root.val:\n            return search(root.left, key) \n        if key > root.val:\n            return False\n    #both root.left and root.right is real-valued\n    if key < root.val:\n        return search(root.left, key)\n    else:\n        return search(root.right, key)\n    if key == root.val:\n        return True\n    #return False', 'traces': {}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    return root', 'traces': {}}}
2021-02-16 17:41:14.924985,search,check-correct,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root.left == None and root.right == None:\n        return root.val == key\n    if root.left == None and root.right != None:\n        if key < root.val:\n            return False\n        if key > root.val:\n            return search(root.right, key)\n    if root.left != None and root.right == None:\n        if key < root.val:\n            return search(root.left, key) \n        if key > root.val:\n            return False\n    #both root.left and root.right is real-valued\n    if key < root.val:\n        return search(root.left, key)\n    else:\n        return search(root.right, key)\n    if key == root.val:\n        return True\n    #return False', 'traces': {}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    return root', 'traces': {}}}
2021-02-16 17:43:30.408103,search,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if key == root.val:\n        return True\n    if root.left == None and root.right == None:\n        return root.val == key\n    if root.left == None and root.right != None:\n        if key < root.val:\n            return False\n        if key > root.val:\n            return search(root.right, key)\n    if root.left != None and root.right == None:\n        if key < root.val:\n            return search(root.left, key) \n        if key > root.val:\n            return False\n    #both root.left and root.right is real-valued by now\n    if key < root.val:\n        return search(root.left, key)\n    if key > root.val:\n        return search(root.right, key)\n\n    #return False', 'traces': {}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    return root', 'traces': {}}}
2021-02-16 17:43:33.238186,search,check-correct,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if key == root.val:\n        return True\n    if root.left == None and root.right == None:\n        return root.val == key\n    if root.left == None and root.right != None:\n        if key < root.val:\n            return False\n        if key > root.val:\n            return search(root.right, key)\n    if root.left != None and root.right == None:\n        if key < root.val:\n            return search(root.left, key) \n        if key > root.val:\n            return False\n    #both root.left and root.right is real-valued by now\n    if key < root.val:\n        return search(root.left, key)\n    if key > root.val:\n        return search(root.right, key)\n\n    #return False', 'traces': {}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    return root', 'traces': {}}}
2021-02-16 17:43:44.159484,search,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if key == root.val:\n        return True\n    if root.left == None and root.right == None:\n        return root.val == key\n    if root.left == None and root.right != None:\n        if key < root.val:\n            return False\n        if key > root.val:\n            return search(root.right, key)\n    if root.left != None and root.right == None:\n        if key < root.val:\n            return search(root.left, key) \n        if key > root.val:\n            return False\n    #both root.left and root.right is real-valued by now\n    if key < root.val:\n        return search(root.left, key)\n    if key > root.val:\n        return search(root.right, key)\n\n    #return False', 'traces': {}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    return root', 'traces': {}}}
2021-02-16 17:44:01.350117,search,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if key == root.val:\n        return True\n    if root.left == None and root.right == None:\n        return root.val == key\n    if root.left == None and root.right != None:\n        if key < root.val:\n            return False\n        if key > root.val:\n            return search(root.right, key)\n    if root.left != None and root.right == None:\n        if key < root.val:\n            return search(root.left, key) \n        if key > root.val:\n            return False\n    #both root.left and root.right is real-valued by now\n    if key < root.val:\n        return search(root.left, key)\n    if key > root.val:\n        return search(root.right, key)\n\n    #return False', 'traces': {}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    return root', 'traces': {}}}
2021-02-16 17:48:25.063040,search,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if key == root.val:\n        return True\n    #after this we know key does not equal root.val\n    if (root.left is None) and (root.right is None):\n        return False\n    if (root.left is None) and (root.right is not None):\n        if key < root.val:\n            return False\n        if key > root.val:\n            return search(root.right, key)\n    if (root.left is not None) and (root.right is None):\n        if key < root.val:\n            return search(root.left, key) \n        if key > root.val:\n            return False\n    #both root.left and root.right is real-valued by now\n    if key < root.val:\n        return search(root.left, key)\n    if key > root.val:\n        return search(root.right, key)\n\n    #return False', 'traces': {}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    return root', 'traces': {}}}
2021-02-16 17:48:28.797429,search,check-correct,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if key == root.val:\n        return True\n    #after this we know key does not equal root.val\n    if (root.left is None) and (root.right is None):\n        return False\n    if (root.left is None) and (root.right is not None):\n        if key < root.val:\n            return False\n        if key > root.val:\n            return search(root.right, key)\n    if (root.left is not None) and (root.right is None):\n        if key < root.val:\n            return search(root.left, key) \n        if key > root.val:\n            return False\n    #both root.left and root.right is real-valued by now\n    if key < root.val:\n        return search(root.left, key)\n    if key > root.val:\n        return search(root.right, key)\n\n    #return False', 'traces': {}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    return root', 'traces': {}}}
2021-02-16 17:48:29.596156,search,check-correct,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if key == root.val:\n        return True\n    #after this we know key does not equal root.val\n    if (root.left is None) and (root.right is None):\n        return False\n    if (root.left is None) and (root.right is not None):\n        if key < root.val:\n            return False\n        if key > root.val:\n            return search(root.right, key)\n    if (root.left is not None) and (root.right is None):\n        if key < root.val:\n            return search(root.left, key) \n        if key > root.val:\n            return False\n    #both root.left and root.right is real-valued by now\n    if key < root.val:\n        return search(root.left, key)\n    if key > root.val:\n        return search(root.right, key)\n\n    #return False', 'traces': {}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    return root', 'traces': {}}}
2021-02-16 17:48:29.769479,search,check-correct,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if key == root.val:\n        return True\n    #after this we know key does not equal root.val\n    if (root.left is None) and (root.right is None):\n        return False\n    if (root.left is None) and (root.right is not None):\n        if key < root.val:\n            return False\n        if key > root.val:\n            return search(root.right, key)\n    if (root.left is not None) and (root.right is None):\n        if key < root.val:\n            return search(root.left, key) \n        if key > root.val:\n            return False\n    #both root.left and root.right is real-valued by now\n    if key < root.val:\n        return search(root.left, key)\n    if key > root.val:\n        return search(root.right, key)\n\n    #return False', 'traces': {}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    return root', 'traces': {}}}
2021-02-16 17:48:29.989200,search,check-correct,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if key == root.val:\n        return True\n    #after this we know key does not equal root.val\n    if (root.left is None) and (root.right is None):\n        return False\n    if (root.left is None) and (root.right is not None):\n        if key < root.val:\n            return False\n        if key > root.val:\n            return search(root.right, key)\n    if (root.left is not None) and (root.right is None):\n        if key < root.val:\n            return search(root.left, key) \n        if key > root.val:\n            return False\n    #both root.left and root.right is real-valued by now\n    if key < root.val:\n        return search(root.left, key)\n    if key > root.val:\n        return search(root.right, key)\n\n    #return False', 'traces': {}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    return root', 'traces': {}}}
2021-02-16 17:48:30.267469,search,check-correct,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if key == root.val:\n        return True\n    #after this we know key does not equal root.val\n    if (root.left is None) and (root.right is None):\n        return False\n    if (root.left is None) and (root.right is not None):\n        if key < root.val:\n            return False\n        if key > root.val:\n            return search(root.right, key)\n    if (root.left is not None) and (root.right is None):\n        if key < root.val:\n            return search(root.left, key) \n        if key > root.val:\n            return False\n    #both root.left and root.right is real-valued by now\n    if key < root.val:\n        return search(root.left, key)\n    if key > root.val:\n        return search(root.right, key)\n\n    #return False', 'traces': {}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    return root', 'traces': {}}}
2021-02-16 17:48:30.519338,search,check-correct,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if key == root.val:\n        return True\n    #after this we know key does not equal root.val\n    if (root.left is None) and (root.right is None):\n        return False\n    if (root.left is None) and (root.right is not None):\n        if key < root.val:\n            return False\n        if key > root.val:\n            return search(root.right, key)\n    if (root.left is not None) and (root.right is None):\n        if key < root.val:\n            return search(root.left, key) \n        if key > root.val:\n            return False\n    #both root.left and root.right is real-valued by now\n    if key < root.val:\n        return search(root.left, key)\n    if key > root.val:\n        return search(root.right, key)\n\n    #return False', 'traces': {}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    return root', 'traces': {}}}
2021-02-16 17:48:30.911500,search,check-correct,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if key == root.val:\n        return True\n    #after this we know key does not equal root.val\n    if (root.left is None) and (root.right is None):\n        return False\n    if (root.left is None) and (root.right is not None):\n        if key < root.val:\n            return False\n        if key > root.val:\n            return search(root.right, key)\n    if (root.left is not None) and (root.right is None):\n        if key < root.val:\n            return search(root.left, key) \n        if key > root.val:\n            return False\n    #both root.left and root.right is real-valued by now\n    if key < root.val:\n        return search(root.left, key)\n    if key > root.val:\n        return search(root.right, key)\n\n    #return False', 'traces': {}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    return root', 'traces': {}}}
2021-02-16 17:50:34.575617,search,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if key == root.val:\n        return True\n    #after this we know key does not equal root.val\n    if (root.left is None) and (root.right is None):\n        return False\n    if (root.left is None) and (root.right is not None):\n        if key < root.val:\n            return False\n        if key > root.val:\n            return search(root.right, key)\n    if (root.left is not None) and (root.right is None):\n        if key < root.val:\n            return search(root.left, key) \n        if key > root.val:\n            return False\n    #both root.left and root.right is real-valued by now\n    if key < root.val:\n        return search(root.left, key)\n    if key > root.val:\n        return search(root.right, key)\n\n    #return False', 'traces': {}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    return root', 'traces': {}}}
2021-02-16 17:51:25.120638,search,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if key == root.val:\n        return True\n    #after this we know key does not equal root.val\n    if (root.left is None) and (root.right is None):\n        return False\n    if (root.left is None) and (root.right is not None):\n        if key < root.val:\n            return False\n        if key > root.val:\n            return search(root.right, key)\n    if (root.left is not None) and (root.right is None):\n        if key < root.val:\n            return search(root.left, key) \n        if key > root.val:\n            return False\n    #both root.left and root.right is real-valued by now\n    if key < root.val:\n        return search(root.left, key)\n    if key > root.val:\n        return search(root.right, key)\n\n    #return False', 'traces': {}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    return root', 'traces': {}}}
2021-02-16 17:51:31.216176,search,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if key == root.val:\n        return True\n    #after this we know key does not equal root.val\n    if (root.left is None) and (root.right is None):\n        return False\n    if (root.left is None) and (root.right is not None):\n        if key < root.val:\n            return False\n        if key > root.val:\n            return search(root.right, key)\n    if (root.left is not None) and (root.right is None):\n        if key < root.val:\n            return search(root.left, key) \n        if key > root.val:\n            return False\n    #both root.left and root.right is real-valued by now\n    if key < root.val:\n        return search(root.left, key)\n    if key > root.val:\n        return search(root.right, key)\n\n    #return False', 'traces': {}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    return root', 'traces': {}}}
2021-02-16 17:51:36.195201,search,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if key == root.val:\n        return True\n    #after this we know key does not equal root.val\n    if (root.left is None) and (root.right is None):\n        return False\n    if (root.left is None) and (root.right is not None):\n        if key < root.val:\n            return False\n        if key > root.val:\n            return search(root.right, key)\n    if (root.left is not None) and (root.right is None):\n        if key < root.val:\n            return search(root.left, key) \n        if key > root.val:\n            return False\n    #both root.left and root.right is real-valued by now\n    if key < root.val:\n        return search(root.left, key)\n    if key > root.val:\n        return search(root.right, key)\n\n    #return False', 'traces': {}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    return root', 'traces': {}}}
2021-02-16 17:51:39.881232,search,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if key == root.val:\n        return True\n    #after this we know key does not equal root.val\n    if (root.left is None) and (root.right is None):\n        return False\n    if (root.left is None) and (root.right is not None):\n        if key < root.val:\n            return False\n        if key > root.val:\n            return search(root.right, key)\n    if (root.left is not None) and (root.right is None):\n        if key < root.val:\n            return search(root.left, key) \n        if key > root.val:\n            return False\n    #both root.left and root.right is real-valued by now\n    if key < root.val:\n        return search(root.left, key)\n    if key > root.val:\n        return search(root.right, key)\n\n    #return False', 'traces': {}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    return root', 'traces': {}}}
2021-02-16 17:51:43.660327,search,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if key == root.val:\n        return True\n    #after this we know key does not equal root.val\n    if (root.left is None) and (root.right is None):\n        return False\n    if (root.left is None) and (root.right is not None):\n        if key < root.val:\n            return False\n        if key > root.val:\n            return search(root.right, key)\n    if (root.left is not None) and (root.right is None):\n        if key < root.val:\n            return search(root.left, key) \n        if key > root.val:\n            return False\n    #both root.left and root.right is real-valued by now\n    if key < root.val:\n        return search(root.left, key)\n    if key > root.val:\n        return search(root.right, key)\n\n    #return False', 'traces': {}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    return root', 'traces': {}}}
2021-02-16 17:51:47.324883,search,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if key == root.val:\n        return True\n    #after this we know key does not equal root.val\n    if (root.left is None) and (root.right is None):\n        return False\n    if (root.left is None) and (root.right is not None):\n        if key < root.val:\n            return False\n        if key > root.val:\n            return search(root.right, key)\n    if (root.left is not None) and (root.right is None):\n        if key < root.val:\n            return search(root.left, key) \n        if key > root.val:\n            return False\n    #both root.left and root.right is real-valued by now\n    if key < root.val:\n        return search(root.left, key)\n    if key > root.val:\n        return search(root.right, key)\n\n    #return False', 'traces': {}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    return root', 'traces': {}}}
2021-02-16 17:51:51.987882,search,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if key == root.val:\n        return True\n    #after this we know key does not equal root.val\n    if (root.left is None) and (root.right is None):\n        return False\n    if (root.left is None) and (root.right is not None):\n        if key < root.val:\n            return False\n        if key > root.val:\n            return search(root.right, key)\n    if (root.left is not None) and (root.right is None):\n        if key < root.val:\n            return search(root.left, key) \n        if key > root.val:\n            return False\n    #both root.left and root.right is real-valued by now\n    if key < root.val:\n        return search(root.left, key)\n    if key > root.val:\n        return search(root.right, key)\n\n    #return False', 'traces': {}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    return root', 'traces': {}}}
2021-02-16 17:51:58.213712,search,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if key == root.val:\n        return True\n    #after this we know key does not equal root.val\n    if (root.left is None) and (root.right is None):\n        return False\n    if (root.left is None) and (root.right is not None):\n        if key < root.val:\n            return False\n        if key > root.val:\n            return search(root.right, key)\n    if (root.left is not None) and (root.right is None):\n        if key < root.val:\n            return search(root.left, key) \n        if key > root.val:\n            return False\n    #both root.left and root.right is real-valued by now\n    if key < root.val:\n        return search(root.left, key)\n    if key > root.val:\n        return search(root.right, key)\n\n    #return False', 'traces': {}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    return root', 'traces': {}}}
2021-02-16 17:52:04.247187,search,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if key == root.val:\n        return True\n    #after this we know key does not equal root.val\n    if (root.left is None) and (root.right is None):\n        return False\n    if (root.left is None) and (root.right is not None):\n        if key < root.val:\n            return False\n        if key > root.val:\n            return search(root.right, key)\n    if (root.left is not None) and (root.right is None):\n        if key < root.val:\n            return search(root.left, key) \n        if key > root.val:\n            return False\n    #both root.left and root.right is real-valued by now\n    if key < root.val:\n        return search(root.left, key)\n    if key > root.val:\n        return search(root.right, key)\n\n    #return False', 'traces': {}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    return root', 'traces': {}}}
2021-02-16 17:52:08.721784,search,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if key == root.val:\n        return True\n    #after this we know key does not equal root.val\n    if (root.left is None) and (root.right is None):\n        return False\n    if (root.left is None) and (root.right is not None):\n        if key < root.val:\n            return False\n        if key > root.val:\n            return search(root.right, key)\n    if (root.left is not None) and (root.right is None):\n        if key < root.val:\n            return search(root.left, key) \n        if key > root.val:\n            return False\n    #both root.left and root.right is real-valued by now\n    if key < root.val:\n        return search(root.left, key)\n    if key > root.val:\n        return search(root.right, key)\n\n    #return False', 'traces': {}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    return root', 'traces': {}}}
2021-02-16 17:52:14.769579,search,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if key == root.val:\n        return True\n    #after this we know key does not equal root.val\n    if (root.left is None) and (root.right is None):\n        return False\n    if (root.left is None) and (root.right is not None):\n        if key < root.val:\n            return False\n        if key > root.val:\n            return search(root.right, key)\n    if (root.left is not None) and (root.right is None):\n        if key < root.val:\n            return search(root.left, key) \n        if key > root.val:\n            return False\n    #both root.left and root.right is real-valued by now\n    if key < root.val:\n        return search(root.left, key)\n    if key > root.val:\n        return search(root.right, key)\n\n    #return False', 'traces': {}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    return root', 'traces': {}}}
2021-02-16 17:52:19.692620,search,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if key == root.val:\n        return True\n    #after this we know key does not equal root.val\n    if (root.left is None) and (root.right is None):\n        return False\n    if (root.left is None) and (root.right is not None):\n        if key < root.val:\n            return False\n        if key > root.val:\n            return search(root.right, key)\n    if (root.left is not None) and (root.right is None):\n        if key < root.val:\n            return search(root.left, key) \n        if key > root.val:\n            return False\n    #both root.left and root.right is real-valued by now\n    if key < root.val:\n        return search(root.left, key)\n    if key > root.val:\n        return search(root.right, key)\n\n    #return False', 'traces': {}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    return root', 'traces': {}}}
2021-02-16 17:52:24.358096,search,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if key == root.val:\n        return True\n    #after this we know key does not equal root.val\n    if (root.left is None) and (root.right is None):\n        return False\n    if (root.left is None) and (root.right is not None):\n        if key < root.val:\n            return False\n        if key > root.val:\n            return search(root.right, key)\n    if (root.left is not None) and (root.right is None):\n        if key < root.val:\n            return search(root.left, key) \n        if key > root.val:\n            return False\n    #both root.left and root.right is real-valued by now\n    if key < root.val:\n        return search(root.left, key)\n    if key > root.val:\n        return search(root.right, key)\n\n    #return False', 'traces': {}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    return root', 'traces': {}}}
2021-02-16 17:52:28.162484,search,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if key == root.val:\n        return True\n    #after this we know key does not equal root.val\n    if (root.left is None) and (root.right is None):\n        return False\n    if (root.left is None) and (root.right is not None):\n        if key < root.val:\n            return False\n        if key > root.val:\n            return search(root.right, key)\n    if (root.left is not None) and (root.right is None):\n        if key < root.val:\n            return search(root.left, key) \n        if key > root.val:\n            return False\n    #both root.left and root.right is real-valued by now\n    if key < root.val:\n        return search(root.left, key)\n    if key > root.val:\n        return search(root.right, key)\n\n    #return False', 'traces': {}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    return root', 'traces': {}}}
2021-02-16 17:52:33.357231,search,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if key == root.val:\n        return True\n    #after this we know key does not equal root.val\n    if (root.left is None) and (root.right is None):\n        return False\n    if (root.left is None) and (root.right is not None):\n        if key < root.val:\n            return False\n        if key > root.val:\n            return search(root.right, key)\n    if (root.left is not None) and (root.right is None):\n        if key < root.val:\n            return search(root.left, key) \n        if key > root.val:\n            return False\n    #both root.left and root.right is real-valued by now\n    if key < root.val:\n        return search(root.left, key)\n    if key > root.val:\n        return search(root.right, key)\n\n    #return False', 'traces': {}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    return root', 'traces': {}}}
2021-02-16 17:52:50.736697,search,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if key == root.val:\n        return True\n    #after this we know key does not equal root.val\n    if (root.left is None) and (root.right is None):\n        return False\n    if (root.left is None) and (root.right is not None):\n        if key < root.val:\n            return False\n        if key > root.val:\n            return search(root.right, key)\n    if (root.left is not None) and (root.right is None):\n        if key < root.val:\n            return search(root.left, key) \n        if key > root.val:\n            return False\n    #both root.left and root.right is real-valued by now\n    if key < root.val:\n        return search(root.left, key)\n    if key > root.val:\n        return search(root.right, key)\n\n    #return False', 'traces': {}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    return root', 'traces': {}}}
2021-02-16 17:52:56.511571,search,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if key == root.val:\n        return True\n    #after this we know key does not equal root.val\n    if (root.left is None) and (root.right is None):\n        return False\n    if (root.left is None) and (root.right is not None):\n        if key < root.val:\n            return False\n        if key > root.val:\n            return search(root.right, key)\n    if (root.left is not None) and (root.right is None):\n        if key < root.val:\n            return search(root.left, key) \n        if key > root.val:\n            return False\n    #both root.left and root.right is real-valued by now\n    if key < root.val:\n        return search(root.left, key)\n    if key > root.val:\n        return search(root.right, key)\n\n    #return False', 'traces': {}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    return root', 'traces': {}}}
2021-02-16 17:53:01.752241,search,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if key == root.val:\n        return True\n    #after this we know key does not equal root.val\n    if (root.left is None) and (root.right is None):\n        return False\n    if (root.left is None) and (root.right is not None):\n        if key < root.val:\n            return False\n        if key > root.val:\n            return search(root.right, key)\n    if (root.left is not None) and (root.right is None):\n        if key < root.val:\n            return search(root.left, key) \n        if key > root.val:\n            return False\n    #both root.left and root.right is real-valued by now\n    if key < root.val:\n        return search(root.left, key)\n    if key > root.val:\n        return search(root.right, key)\n\n    #return False', 'traces': {}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    return root', 'traces': {}}}
2021-02-16 17:53:06.353176,search,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if key == root.val:\n        return True\n    #after this we know key does not equal root.val\n    if (root.left is None) and (root.right is None):\n        return False\n    if (root.left is None) and (root.right is not None):\n        if key < root.val:\n            return False\n        if key > root.val:\n            return search(root.right, key)\n    if (root.left is not None) and (root.right is None):\n        if key < root.val:\n            return search(root.left, key) \n        if key > root.val:\n            return False\n    #both root.left and root.right is real-valued by now\n    if key < root.val:\n        return search(root.left, key)\n    if key > root.val:\n        return search(root.right, key)\n\n    #return False', 'traces': {}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    return root', 'traces': {}}}
2021-02-16 17:53:15.912093,search,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if key == root.val:\n        return True\n    #after this we know key does not equal root.val\n    if (root.left is None) and (root.right is None):\n        return False\n    if (root.left is None) and (root.right is not None):\n        if key < root.val:\n            return False\n        if key > root.val:\n            return search(root.right, key)\n    if (root.left is not None) and (root.right is None):\n        if key < root.val:\n            return search(root.left, key) \n        if key > root.val:\n            return False\n    #both root.left and root.right is real-valued by now\n    if key < root.val:\n        return search(root.left, key)\n    if key > root.val:\n        return search(root.right, key)\n\n    #return False', 'traces': {}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    return root', 'traces': {}}}
2021-02-16 17:53:20.858029,search,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if key == root.val:\n        return True\n    #after this we know key does not equal root.val\n    if (root.left is None) and (root.right is None):\n        return False\n    if (root.left is None) and (root.right is not None):\n        if key < root.val:\n            return False\n        if key > root.val:\n            return search(root.right, key)\n    if (root.left is not None) and (root.right is None):\n        if key < root.val:\n            return search(root.left, key) \n        if key > root.val:\n            return False\n    #both root.left and root.right is real-valued by now\n    if key < root.val:\n        return search(root.left, key)\n    if key > root.val:\n        return search(root.right, key)\n\n    #return False', 'traces': {}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    return root', 'traces': {}}}
2021-02-16 17:53:26.777095,search,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if key == root.val:\n        return True\n    #after this we know key does not equal root.val\n    if (root.left is None) and (root.right is None):\n        return False\n    if (root.left is None) and (root.right is not None):\n        if key < root.val:\n            return False\n        if key > root.val:\n            return search(root.right, key)\n    if (root.left is not None) and (root.right is None):\n        if key < root.val:\n            return search(root.left, key) \n        if key > root.val:\n            return False\n    #both root.left and root.right is real-valued by now\n    if key < root.val:\n        return search(root.left, key)\n    if key > root.val:\n        return search(root.right, key)\n\n    #return False', 'traces': {}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    return root', 'traces': {}}}
2021-02-16 17:53:28.428006,search,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if key == root.val:\n        return True\n    #after this we know key does not equal root.val\n    if (root.left is None) and (root.right is None):\n        return False\n    if (root.left is None) and (root.right is not None):\n        if key < root.val:\n            return False\n        if key > root.val:\n            return search(root.right, key)\n    if (root.left is not None) and (root.right is None):\n        if key < root.val:\n            return search(root.left, key) \n        if key > root.val:\n            return False\n    #both root.left and root.right is real-valued by now\n    if key < root.val:\n        return search(root.left, key)\n    if key > root.val:\n        return search(root.right, key)\n\n    #return False', 'traces': {}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    return root', 'traces': {}}}
2021-02-16 17:53:29.119963,search,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if key == root.val:\n        return True\n    #after this we know key does not equal root.val\n    if (root.left is None) and (root.right is None):\n        return False\n    if (root.left is None) and (root.right is not None):\n        if key < root.val:\n            return False\n        if key > root.val:\n            return search(root.right, key)\n    if (root.left is not None) and (root.right is None):\n        if key < root.val:\n            return search(root.left, key) \n        if key > root.val:\n            return False\n    #both root.left and root.right is real-valued by now\n    if key < root.val:\n        return search(root.left, key)\n    if key > root.val:\n        return search(root.right, key)\n\n    #return False', 'traces': {}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    return root', 'traces': {}}}
2021-02-16 17:53:29.859217,search,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if key == root.val:\n        return True\n    #after this we know key does not equal root.val\n    if (root.left is None) and (root.right is None):\n        return False\n    if (root.left is None) and (root.right is not None):\n        if key < root.val:\n            return False\n        if key > root.val:\n            return search(root.right, key)\n    if (root.left is not None) and (root.right is None):\n        if key < root.val:\n            return search(root.left, key) \n        if key > root.val:\n            return False\n    #both root.left and root.right is real-valued by now\n    if key < root.val:\n        return search(root.left, key)\n    if key > root.val:\n        return search(root.right, key)\n\n    #return False', 'traces': {}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    return root', 'traces': {}}}
2021-02-16 17:53:30.084010,search,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if key == root.val:\n        return True\n    #after this we know key does not equal root.val\n    if (root.left is None) and (root.right is None):\n        return False\n    if (root.left is None) and (root.right is not None):\n        if key < root.val:\n            return False\n        if key > root.val:\n            return search(root.right, key)\n    if (root.left is not None) and (root.right is None):\n        if key < root.val:\n            return search(root.left, key) \n        if key > root.val:\n            return False\n    #both root.left and root.right is real-valued by now\n    if key < root.val:\n        return search(root.left, key)\n    if key > root.val:\n        return search(root.right, key)\n\n    #return False', 'traces': {}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    return root', 'traces': {}}}
2021-02-16 17:53:30.143967,search,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if key == root.val:\n        return True\n    #after this we know key does not equal root.val\n    if (root.left is None) and (root.right is None):\n        return False\n    if (root.left is None) and (root.right is not None):\n        if key < root.val:\n            return False\n        if key > root.val:\n            return search(root.right, key)\n    if (root.left is not None) and (root.right is None):\n        if key < root.val:\n            return search(root.left, key) \n        if key > root.val:\n            return False\n    #both root.left and root.right is real-valued by now\n    if key < root.val:\n        return search(root.left, key)\n    if key > root.val:\n        return search(root.right, key)\n\n    #return False', 'traces': {}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    return root', 'traces': {}}}
2021-02-16 17:53:53.185231,search,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if key == root.val:\n        return True\n    #after this we know key does not equal root.val\n    if (root.left is None) and (root.right is None):\n        return False\n    if (root.left is None) and (root.right is not None):\n        if key < root.val:\n            return False\n        if key > root.val:\n            return search(root.right, key)\n    if (root.left is not None) and (root.right is None):\n        if key < root.val:\n            return search(root.left, key) \n        if key > root.val:\n            return False\n    #both root.left and root.right is real-valued by now\n    if key < root.val:\n        return search(root.left, key)\n    if key > root.val:\n        return search(root.right, key)\n\n    return False', 'traces': {}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    return root', 'traces': {}}}
2021-02-16 17:53:57.100688,search,check-correct,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if key == root.val:\n        return True\n    #after this we know key does not equal root.val\n    if (root.left is None) and (root.right is None):\n        return False\n    if (root.left is None) and (root.right is not None):\n        if key < root.val:\n            return False\n        if key > root.val:\n            return search(root.right, key)\n    if (root.left is not None) and (root.right is None):\n        if key < root.val:\n            return search(root.left, key) \n        if key > root.val:\n            return False\n    #both root.left and root.right is real-valued by now\n    if key < root.val:\n        return search(root.left, key)\n    if key > root.val:\n        return search(root.right, key)\n\n    return False', 'traces': {}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    return root', 'traces': {}}}
2021-02-16 17:53:57.753724,search,check-correct,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if key == root.val:\n        return True\n    #after this we know key does not equal root.val\n    if (root.left is None) and (root.right is None):\n        return False\n    if (root.left is None) and (root.right is not None):\n        if key < root.val:\n            return False\n        if key > root.val:\n            return search(root.right, key)\n    if (root.left is not None) and (root.right is None):\n        if key < root.val:\n            return search(root.left, key) \n        if key > root.val:\n            return False\n    #both root.left and root.right is real-valued by now\n    if key < root.val:\n        return search(root.left, key)\n    if key > root.val:\n        return search(root.right, key)\n\n    return False', 'traces': {}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    return root', 'traces': {}}}
2021-02-16 17:53:58.331149,search,check-correct,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if key == root.val:\n        return True\n    #after this we know key does not equal root.val\n    if (root.left is None) and (root.right is None):\n        return False\n    if (root.left is None) and (root.right is not None):\n        if key < root.val:\n            return False\n        if key > root.val:\n            return search(root.right, key)\n    if (root.left is not None) and (root.right is None):\n        if key < root.val:\n            return search(root.left, key) \n        if key > root.val:\n            return False\n    #both root.left and root.right is real-valued by now\n    if key < root.val:\n        return search(root.left, key)\n    if key > root.val:\n        return search(root.right, key)\n\n    return False', 'traces': {}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    return root', 'traces': {}}}
2021-02-16 17:54:27.397704,search,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if key == root.val:\n        return True\n    #after this we know key does not equal root.val\n    if (root.left is None) and (root.right is None):\n        return False\n    if (root.left is None) and (root.right is not None):\n        if key < root.val:\n            return False\n        if key > root.val:\n            return search(root.right, key)\n    if (root.left is not None) and (root.right is None):\n        if key < root.val:\n            return search(root.left, key) \n        if key > root.val:\n            return False\n    #both root.left and root.right is real-valued by now\n    if key < root.val:\n        return search(root.left, key)\n    if key > root.val:\n        return search(root.right, key)\n\n    #return False', 'traces': {}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    return root', 'traces': {}}}
2021-02-16 17:54:34.747454,search,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if key == root.val:\n        return True\n    #after this we know key does not equal root.val\n    if (root.left is None) and (root.right is None):\n        return False\n    if (root.left is None) and (root.right is not None):\n        if key < root.val:\n            return False\n        if key > root.val:\n            return search(root.right, key)\n    if (root.left is not None) and (root.right is None):\n        if key < root.val:\n            return search(root.left, key) \n        if key > root.val:\n            return False\n    #both root.left and root.right is real-valued by now\n    if key < root.val:\n        return search(root.left, key)\n    if key > root.val:\n        return search(root.right, key)\n\n    #return False', 'traces': {}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    return root', 'traces': {}}}
2021-02-16 17:54:40.064245,search,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if key == root.val:\n        return True\n    #after this we know key does not equal root.val\n    if (root.left is None) and (root.right is None):\n        return False\n    if (root.left is None) and (root.right is not None):\n        if key < root.val:\n            return False\n        if key > root.val:\n            return search(root.right, key)\n    if (root.left is not None) and (root.right is None):\n        if key < root.val:\n            return search(root.left, key) \n        if key > root.val:\n            return False\n    #both root.left and root.right is real-valued by now\n    if key < root.val:\n        return search(root.left, key)\n    if key > root.val:\n        return search(root.right, key)\n\n    #return False', 'traces': {}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    return root', 'traces': {}}}
2021-02-16 17:54:48.814632,search,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if key == root.val:\n        return True\n    #after this we know key does not equal root.val\n    if (root.left is None) and (root.right is None):\n        return False\n    if (root.left is None) and (root.right is not None):\n        if key < root.val:\n            return False\n        if key > root.val:\n            return search(root.right, key)\n    if (root.left is not None) and (root.right is None):\n        if key < root.val:\n            return search(root.left, key) \n        if key > root.val:\n            return False\n    #both root.left and root.right is real-valued by now\n    if key < root.val:\n        return search(root.left, key)\n    if key > root.val:\n        return search(root.right, key)\n\n    #return False', 'traces': {}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    return root', 'traces': {}}}
2021-02-16 17:54:50.101960,search,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if key == root.val:\n        return True\n    #after this we know key does not equal root.val\n    if (root.left is None) and (root.right is None):\n        return False\n    if (root.left is None) and (root.right is not None):\n        if key < root.val:\n            return False\n        if key > root.val:\n            return search(root.right, key)\n    if (root.left is not None) and (root.right is None):\n        if key < root.val:\n            return search(root.left, key) \n        if key > root.val:\n            return False\n    #both root.left and root.right is real-valued by now\n    if key < root.val:\n        return search(root.left, key)\n    if key > root.val:\n        return search(root.right, key)\n\n    #return False', 'traces': {}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    return root', 'traces': {}}}
2021-02-16 17:54:57.472008,search,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if key == root.val:\n        return True\n    #after this we know key does not equal root.val\n    if (root.left is None) and (root.right is None):\n        return False\n    if (root.left is None) and (root.right is not None):\n        if key < root.val:\n            return False\n        if key > root.val:\n            return search(root.right, key)\n    if (root.left is not None) and (root.right is None):\n        if key < root.val:\n            return search(root.left, key) \n        if key > root.val:\n            return False\n    #both root.left and root.right is real-valued by now\n    if key < root.val:\n        return search(root.left, key)\n    if key > root.val:\n        return search(root.right, key)\n\n    #return False', 'traces': {}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    return root', 'traces': {}}}
2021-02-16 17:55:04.852947,search,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if key == root.val:\n        return True\n    #after this we know key does not equal root.val\n    if (root.left is None) and (root.right is None):\n        return False\n    if (root.left is None) and (root.right is not None):\n        if key < root.val:\n            return False\n        if key > root.val:\n            return search(root.right, key)\n    if (root.left is not None) and (root.right is None):\n        if key < root.val:\n            return search(root.left, key) \n        if key > root.val:\n            return False\n    #both root.left and root.right is real-valued by now\n    if key < root.val:\n        return search(root.left, key)\n    if key > root.val:\n        return search(root.right, key)\n\n    #return False', 'traces': {}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    return root', 'traces': {}}}
2021-02-16 17:55:10.249325,search,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if key == root.val:\n        return True\n    #after this we know key does not equal root.val\n    if (root.left is None) and (root.right is None):\n        return False\n    if (root.left is None) and (root.right is not None):\n        if key < root.val:\n            return False\n        if key > root.val:\n            return search(root.right, key)\n    if (root.left is not None) and (root.right is None):\n        if key < root.val:\n            return search(root.left, key) \n        if key > root.val:\n            return False\n    #both root.left and root.right is real-valued by now\n    if key < root.val:\n        return search(root.left, key)\n    if key > root.val:\n        return search(root.right, key)\n\n    #return False', 'traces': {}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    return root', 'traces': {}}}
2021-02-16 17:55:18.990230,search,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if key == root.val:\n        return True\n    #after this we know key does not equal root.val\n    if (root.left is None) and (root.right is None):\n        return False\n    if (root.left is None) and (root.right is not None):\n        if key < root.val:\n            return False\n        if key > root.val:\n            return search(root.right, key)\n    if (root.left is not None) and (root.right is None):\n        if key < root.val:\n            return search(root.left, key) \n        if key > root.val:\n            return False\n    #both root.left and root.right is real-valued by now\n    if key < root.val:\n        return search(root.left, key)\n    if key > root.val:\n        return search(root.right, key)\n\n    #return False', 'traces': {}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    return root', 'traces': {}}}
2021-02-16 17:55:27.118945,search,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if key == root.val:\n        return True\n    #after this we know key does not equal root.val\n    if (root.left is None) and (root.right is None):\n        return False\n    if (root.left is None) and (root.right is not None):\n        if key < root.val:\n            return False\n        if key > root.val:\n            return search(root.right, key)\n    if (root.left is not None) and (root.right is None):\n        if key < root.val:\n            return search(root.left, key) \n        if key > root.val:\n            return False\n    #both root.left and root.right is real-valued by now\n    if key < root.val:\n        return search(root.left, key)\n    if key > root.val:\n        return search(root.right, key)\n\n    #return False', 'traces': {}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    return root', 'traces': {}}}
2021-02-16 17:55:33.819413,search,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if key == root.val:\n        return True\n    #after this we know key does not equal root.val\n    if (root.left is None) and (root.right is None):\n        return False\n    if (root.left is None) and (root.right is not None):\n        if key < root.val:\n            return False\n        if key > root.val:\n            return search(root.right, key)\n    if (root.left is not None) and (root.right is None):\n        if key < root.val:\n            return search(root.left, key) \n        if key > root.val:\n            return False\n    #both root.left and root.right is real-valued by now\n    if key < root.val:\n        return search(root.left, key)\n    if key > root.val:\n        return search(root.right, key)\n\n    #return False', 'traces': {}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    return root', 'traces': {}}}
2021-02-16 17:55:35.398080,search,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if key == root.val:\n        return True\n    #after this we know key does not equal root.val\n    if (root.left is None) and (root.right is None):\n        return False\n    if (root.left is None) and (root.right is not None):\n        if key < root.val:\n            return False\n        if key > root.val:\n            return search(root.right, key)\n    if (root.left is not None) and (root.right is None):\n        if key < root.val:\n            return search(root.left, key) \n        if key > root.val:\n            return False\n    #both root.left and root.right is real-valued by now\n    if key < root.val:\n        return search(root.left, key)\n    if key > root.val:\n        return search(root.right, key)\n\n    #return False', 'traces': {}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    return root', 'traces': {}}}
2021-02-16 17:55:39.090265,search,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if key == root.val:\n        return True\n    #after this we know key does not equal root.val\n    if (root.left is None) and (root.right is None):\n        return False\n    if (root.left is None) and (root.right is not None):\n        if key < root.val:\n            return False\n        if key > root.val:\n            return search(root.right, key)\n    if (root.left is not None) and (root.right is None):\n        if key < root.val:\n            return search(root.left, key) \n        if key > root.val:\n            return False\n    #both root.left and root.right is real-valued by now\n    if key < root.val:\n        return search(root.left, key)\n    if key > root.val:\n        return search(root.right, key)\n\n    #return False', 'traces': {}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    return root', 'traces': {}}}
2021-02-16 17:55:44.240291,search,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if key == root.val:\n        return True\n    #after this we know key does not equal root.val\n    if (root.left is None) and (root.right is None):\n        return False\n    if (root.left is None) and (root.right is not None):\n        if key < root.val:\n            return False\n        if key > root.val:\n            return search(root.right, key)\n    if (root.left is not None) and (root.right is None):\n        if key < root.val:\n            return search(root.left, key) \n        if key > root.val:\n            return False\n    #both root.left and root.right is real-valued by now\n    if key < root.val:\n        return search(root.left, key)\n    if key > root.val:\n        return search(root.right, key)\n\n    #return False', 'traces': {}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    return root', 'traces': {}}}
2021-02-16 17:55:50.885095,search,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if key == root.val:\n        return True\n    #after this we know key does not equal root.val\n    if (root.left is None) and (root.right is None):\n        return False\n    if (root.left is None) and (root.right is not None):\n        if key < root.val:\n            return False\n        if key > root.val:\n            return search(root.right, key)\n    if (root.left is not None) and (root.right is None):\n        if key < root.val:\n            return search(root.left, key) \n        if key > root.val:\n            return False\n    #both root.left and root.right is real-valued by now\n    if key < root.val:\n        return search(root.left, key)\n    if key > root.val:\n        return search(root.right, key)\n\n    #return False', 'traces': {}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    return root', 'traces': {}}}
2021-02-16 17:55:58.396082,search,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if key == root.val:\n        return True\n    #after this we know key does not equal root.val\n    if (root.left is None) and (root.right is None):\n        return False\n    if (root.left is None) and (root.right is not None):\n        if key < root.val:\n            return False\n        if key > root.val:\n            return search(root.right, key)\n    if (root.left is not None) and (root.right is None):\n        if key < root.val:\n            return search(root.left, key) \n        if key > root.val:\n            return False\n    #both root.left and root.right is real-valued by now\n    if key < root.val:\n        return search(root.left, key)\n    if key > root.val:\n        return search(root.right, key)\n\n    #return False', 'traces': {}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    return root', 'traces': {}}}
2021-02-16 17:56:06.175607,search,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if key == root.val:\n        return True\n    #after this we know key does not equal root.val\n    if (root.left is None) and (root.right is None):\n        return False\n    if (root.left is None) and (root.right is not None):\n        if key < root.val:\n            return False\n        if key > root.val:\n            return search(root.right, key)\n    if (root.left is not None) and (root.right is None):\n        if key < root.val:\n            return search(root.left, key) \n        if key > root.val:\n            return False\n    #both root.left and root.right is real-valued by now\n    if key < root.val:\n        return search(root.left, key)\n    if key > root.val:\n        return search(root.right, key)\n\n    #return False', 'traces': {}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    return root', 'traces': {}}}
2021-02-16 17:56:14.878850,search,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if key == root.val:\n        return True\n    #after this we know key does not equal root.val\n    if (root.left is None) and (root.right is None):\n        return False\n    if (root.left is None) and (root.right is not None):\n        if key < root.val:\n            return False\n        if key > root.val:\n            return search(root.right, key)\n    if (root.left is not None) and (root.right is None):\n        if key < root.val:\n            return search(root.left, key) \n        if key > root.val:\n            return False\n    #both root.left and root.right is real-valued by now\n    if key < root.val:\n        return search(root.left, key)\n    if key > root.val:\n        return search(root.right, key)\n\n    #return False', 'traces': {}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    return root', 'traces': {}}}
2021-02-16 17:56:21.477671,search,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if key == root.val:\n        return True\n    #after this we know key does not equal root.val\n    if (root.left is None) and (root.right is None):\n        return False\n    if (root.left is None) and (root.right is not None):\n        if key < root.val:\n            return False\n        if key > root.val:\n            return search(root.right, key)\n    if (root.left is not None) and (root.right is None):\n        if key < root.val:\n            return search(root.left, key) \n        if key > root.val:\n            return False\n    #both root.left and root.right is real-valued by now\n    if key < root.val:\n        return search(root.left, key)\n    if key > root.val:\n        return search(root.right, key)\n\n    #return False', 'traces': {}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    return root', 'traces': {}}}
2021-02-16 17:56:33.368062,search,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if key == root.val:\n        return True\n    #after this we know key does not equal root.val\n    if (root.left is None) and (root.right is None):\n        return False\n    if (root.left is None) and (root.right is not None):\n        if key < root.val:\n            return False\n        if key > root.val:\n            return search(root.right, key)\n    if (root.left is not None) and (root.right is None):\n        if key < root.val:\n            return search(root.left, key) \n        if key > root.val:\n            return False\n    #both root.left and root.right is real-valued by now\n    if key < root.val:\n        return search(root.left, key)\n    if key > root.val:\n        return search(root.right, key)\n\n    #return False', 'traces': {}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    return root', 'traces': {}}}
2021-02-16 17:56:39.942403,search,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if key == root.val:\n        return True\n    #after this we know key does not equal root.val\n    if (root.left is None) and (root.right is None):\n        return False\n    if (root.left is None) and (root.right is not None):\n        if key < root.val:\n            return False\n        if key > root.val:\n            return search(root.right, key)\n    if (root.left is not None) and (root.right is None):\n        if key < root.val:\n            return search(root.left, key) \n        if key > root.val:\n            return False\n    #both root.left and root.right is real-valued by now\n    if key < root.val:\n        return search(root.left, key)\n    if key > root.val:\n        return search(root.right, key)\n\n    #return False', 'traces': {}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    return root', 'traces': {}}}
