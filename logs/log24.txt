2021-03-04 13:43:18.544606,page-change,1,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    return False', 'traces': {}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    return root', 'traces': {}}}
2021-03-04 13:45:08.789897,search,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root is None:\n        return False\n    if key == root.val:\n        return True\n    elif key < root.val:\n        return search(root.left, key)\n    elif key > root.val:\n        return search(root.right, key)\n    return False', 'traces': {}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    return root', 'traces': {}}}
2021-03-04 13:45:15.214644,search,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root is None:\n        return False\n    if key == root.val:\n        return True\n    elif key < root.val:\n        return search(root.left, key)\n    elif key > root.val:\n        return search(root.right, key)\n    return False', 'traces': {}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    return root', 'traces': {}}}
2021-03-04 13:45:20.593224,search,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root is None:\n        return False\n    if key == root.val:\n        return True\n    elif key < root.val:\n        return search(root.left, key)\n    elif key > root.val:\n        return search(root.right, key)\n    return False', 'traces': {}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    return root', 'traces': {}}}
2021-03-04 13:45:24.980172,search,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root is None:\n        return False\n    if key == root.val:\n        return True\n    elif key < root.val:\n        return search(root.left, key)\n    elif key > root.val:\n        return search(root.right, key)\n    return False', 'traces': {}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    return root', 'traces': {}}}
2021-03-04 13:45:27.971288,search,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root is None:\n        return False\n    if key == root.val:\n        return True\n    elif key < root.val:\n        return search(root.left, key)\n    elif key > root.val:\n        return search(root.right, key)\n    return False', 'traces': {}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    return root', 'traces': {}}}
2021-03-04 13:45:30.380045,search,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root is None:\n        return False\n    if key == root.val:\n        return True\n    elif key < root.val:\n        return search(root.left, key)\n    elif key > root.val:\n        return search(root.right, key)\n    return False', 'traces': {}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    return root', 'traces': {}}}
2021-03-04 13:45:32.473293,search,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root is None:\n        return False\n    if key == root.val:\n        return True\n    elif key < root.val:\n        return search(root.left, key)\n    elif key > root.val:\n        return search(root.right, key)\n    return False', 'traces': {}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    return root', 'traces': {}}}
2021-03-04 13:45:34.238516,search,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root is None:\n        return False\n    if key == root.val:\n        return True\n    elif key < root.val:\n        return search(root.left, key)\n    elif key > root.val:\n        return search(root.right, key)\n    return False', 'traces': {}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    return root', 'traces': {}}}
2021-03-04 13:45:36.109885,search,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root is None:\n        return False\n    if key == root.val:\n        return True\n    elif key < root.val:\n        return search(root.left, key)\n    elif key > root.val:\n        return search(root.right, key)\n    return False', 'traces': {}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    return root', 'traces': {}}}
2021-03-04 13:45:37.335885,search,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root is None:\n        return False\n    if key == root.val:\n        return True\n    elif key < root.val:\n        return search(root.left, key)\n    elif key > root.val:\n        return search(root.right, key)\n    return False', 'traces': {}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    return root', 'traces': {}}}
2021-03-04 13:45:41.492379,search,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root is None:\n        return False\n    if key == root.val:\n        return True\n    elif key < root.val:\n        return search(root.left, key)\n    elif key > root.val:\n        return search(root.right, key)\n    return False', 'traces': {}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    return root', 'traces': {}}}
2021-03-04 13:45:49.287944,search,check-correct,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root is None:\n        return False\n    if key == root.val:\n        return True\n    elif key < root.val:\n        return search(root.left, key)\n    elif key > root.val:\n        return search(root.right, key)\n    return False', 'traces': {}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    return root', 'traces': {}}}
2021-03-04 13:45:51.880128,page-change,2,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root is None:\n        return False\n    if key == root.val:\n        return True\n    elif key < root.val:\n        return search(root.left, key)\n    elif key > root.val:\n        return search(root.right, key)\n    return False', 'traces': {}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    return root', 'traces': {}}}
2021-03-04 13:49:34.514989,insert,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root is None:\n        return False\n    if key == root.val:\n        return True\n    elif key < root.val:\n        return search(root.left, key)\n    elif key > root.val:\n        return search(root.right, key)\n    return False', 'traces': {}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    start = root\n    while key < start:\n        start = start.left\n    while key > start:\n        start = start.right\n    start.left = new Node(key)\n    return root', 'traces': {}}}
2021-03-04 13:49:55.232059,insert,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root is None:\n        return False\n    if key == root.val:\n        return True\n    elif key < root.val:\n        return search(root.left, key)\n    elif key > root.val:\n        return search(root.right, key)\n    return False', 'traces': {}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    start = root\n    while key < start:\n        start = start.left\n    while key > start:\n        start = start.right\n    start.left = Node(key)\n    return root', 'traces': {}}}
2021-03-04 13:50:12.717865,insert,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root is None:\n        return False\n    if key == root.val:\n        return True\n    elif key < root.val:\n        return search(root.left, key)\n    elif key > root.val:\n        return search(root.right, key)\n    return False', 'traces': {}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    start = root\n    while key < start.val:\n        start = start.left\n    while key > start.val:\n        start = start.right\n    start.left = Node(key)\n    return root', 'traces': {}}}
2021-03-04 13:51:45.078584,insert,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root is None:\n        return False\n    if key == root.val:\n        return True\n    elif key < root.val:\n        return search(root.left, key)\n    elif key > root.val:\n        return search(root.right, key)\n    return False', 'traces': {}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root is None:\n        root = Node(key)\n    if key < root.val:\n        return insert(root.left, key)\n    else:\n        return insert(root.right, key)\n    return root', 'traces': {}}}
2021-03-04 13:51:58.199339,insert,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root is None:\n        return False\n    if key == root.val:\n        return True\n    elif key < root.val:\n        return search(root.left, key)\n    elif key > root.val:\n        return search(root.right, key)\n    return False', 'traces': {}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root is None:\n        root = Node(key)\n        return root\n    if key < root.val:\n        return insert(root.left, key)\n    else:\n        return insert(root.right, key)\n    return root', 'traces': {}}}
2021-03-04 13:52:08.379989,insert,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root is None:\n        return False\n    if key == root.val:\n        return True\n    elif key < root.val:\n        return search(root.left, key)\n    elif key > root.val:\n        return search(root.right, key)\n    return False', 'traces': {}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root is None:\n        root = Node(key)\n        return root\n    if key < root.val:\n        return insert(root.left, key)\n    else:\n        return insert(root.right, key)\n    return root', 'traces': {}}}
2021-03-04 13:52:26.016106,insert,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root is None:\n        return False\n    if key == root.val:\n        return True\n    elif key < root.val:\n        return search(root.left, key)\n    elif key > root.val:\n        return search(root.right, key)\n    return False', 'traces': {}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root is None:\n        root = Node(key)\n        return root\n    if key < root.val:\n        return insert(root.left, key)\n    else:\n        return insert(root.right, key)\n    return root', 'traces': {}}}
2021-03-04 13:53:05.496720,insert,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root is None:\n        return False\n    if key == root.val:\n        return True\n    elif key < root.val:\n        return search(root.left, key)\n    elif key > root.val:\n        return search(root.right, key)\n    return False', 'traces': {}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root is None:\n        node = Node(key)\n        root.left = node\n    if key < root.val:\n        return insert(root.left, key)\n    else:\n        return insert(root.right, key)\n    return root', 'traces': {}}}
2021-03-04 13:53:15.241018,insert,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root is None:\n        return False\n    if key == root.val:\n        return True\n    elif key < root.val:\n        return search(root.left, key)\n    elif key > root.val:\n        return search(root.right, key)\n    return False', 'traces': {}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root is None:\n        node = Node(key)\n        root.left = node\n    if key < root.val:\n        return insert(root.left, key)\n    else:\n        return insert(root.right, key)\n    return root', 'traces': {}}}
2021-03-04 13:53:17.732933,insert,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root is None:\n        return False\n    if key == root.val:\n        return True\n    elif key < root.val:\n        return search(root.left, key)\n    elif key > root.val:\n        return search(root.right, key)\n    return False', 'traces': {}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root is None:\n        node = Node(key)\n        root.left = node\n    if key < root.val:\n        return insert(root.left, key)\n    else:\n        return insert(root.right, key)\n    return root', 'traces': {}}}
2021-03-04 13:53:23.730242,insert,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root is None:\n        return False\n    if key == root.val:\n        return True\n    elif key < root.val:\n        return search(root.left, key)\n    elif key > root.val:\n        return search(root.right, key)\n    return False', 'traces': {}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root is None:\n        node = Node(key)\n        root = node\n    if key < root.val:\n        return insert(root.left, key)\n    else:\n        return insert(root.right, key)\n    return root', 'traces': {}}}
2021-03-04 13:56:44.292697,insert,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root is None:\n        return False\n    if key == root.val:\n        return True\n    elif key < root.val:\n        return search(root.left, key)\n    elif key > root.val:\n        return search(root.right, key)\n    return False', 'traces': {}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root.left is None:\n        root.left = Node(key)\n    if root.right is None:\n        root.right = Node(key)\n    if key < root.val:\n        return insert(root.left, key)\n    else:\n        return insert(root.right, key)\n    return root', 'traces': {}}}
2021-03-04 13:56:47.234388,insert,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root is None:\n        return False\n    if key == root.val:\n        return True\n    elif key < root.val:\n        return search(root.left, key)\n    elif key > root.val:\n        return search(root.right, key)\n    return False', 'traces': {}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root.left is None:\n        root.left = Node(key)\n    if root.right is None:\n        root.right = Node(key)\n    if key < root.val:\n        return insert(root.left, key)\n    else:\n        return insert(root.right, key)\n    return root', 'traces': {}}}
2021-03-04 13:56:47.396240,insert,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root is None:\n        return False\n    if key == root.val:\n        return True\n    elif key < root.val:\n        return search(root.left, key)\n    elif key > root.val:\n        return search(root.right, key)\n    return False', 'traces': {}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root.left is None:\n        root.left = Node(key)\n    if root.right is None:\n        root.right = Node(key)\n    if key < root.val:\n        return insert(root.left, key)\n    else:\n        return insert(root.right, key)\n    return root', 'traces': {}}}
2021-03-04 13:56:47.749856,insert,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root is None:\n        return False\n    if key == root.val:\n        return True\n    elif key < root.val:\n        return search(root.left, key)\n    elif key > root.val:\n        return search(root.right, key)\n    return False', 'traces': {}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root.left is None:\n        root.left = Node(key)\n    if root.right is None:\n        root.right = Node(key)\n    if key < root.val:\n        return insert(root.left, key)\n    else:\n        return insert(root.right, key)\n    return root', 'traces': {}}}
2021-03-04 13:56:49.759057,insert,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root is None:\n        return False\n    if key == root.val:\n        return True\n    elif key < root.val:\n        return search(root.left, key)\n    elif key > root.val:\n        return search(root.right, key)\n    return False', 'traces': {}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root.left is None:\n        root.left = Node(key)\n    if root.right is None:\n        root.right = Node(key)\n    if key < root.val:\n        return insert(root.left, key)\n    else:\n        return insert(root.right, key)\n    return root', 'traces': {}}}
2021-03-04 13:57:04.602782,insert,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root is None:\n        return False\n    if key == root.val:\n        return True\n    elif key < root.val:\n        return search(root.left, key)\n    elif key > root.val:\n        return search(root.right, key)\n    return False', 'traces': {}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root.left is None:\n        root.left = Node(key)\n    if root.right is None:\n        root.right = Node(key)\n    if key < root.val:\n        insert(root.left, key)\n    else:\n        insert(root.right, key)\n    return root', 'traces': {}}}
2021-03-04 13:58:01.597022,insert,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root is None:\n        return False\n    if key == root.val:\n        return True\n    elif key < root.val:\n        return search(root.left, key)\n    elif key > root.val:\n        return search(root.right, key)\n    return False', 'traces': {}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root.left is None:\n        root.left = Node(key)\n    if root.right is None:\n        root.right = Node(key)\n    if root.left is not None and key < root.val:\n        insert(root.left, key)\n    elif root.right is not None and key > root.val:\n        insert(root.right, key)\n    return root', 'traces': {}}}
2021-03-04 13:58:17.861035,insert,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root is None:\n        return False\n    if key == root.val:\n        return True\n    elif key < root.val:\n        return search(root.left, key)\n    elif key > root.val:\n        return search(root.right, key)\n    return False', 'traces': {}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root.left is None:\n        root.left = Node(key)\n        return\n    if root.right is None:\n        root.right = Node(key)\n    if root.left is not None and key < root.val:\n        insert(root.left, key)\n    elif root.right is not None and key > root.val:\n        insert(root.right, key)\n    return root', 'traces': {}}}
2021-03-04 13:58:26.577189,insert,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root is None:\n        return False\n    if key == root.val:\n        return True\n    elif key < root.val:\n        return search(root.left, key)\n    elif key > root.val:\n        return search(root.right, key)\n    return False', 'traces': {}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root.left is None:\n        root.left = Node(key)\n        return\n    if root.right is None:\n        root.right = Node(key)\n    if root.left is not None and key < root.val:\n        insert(root.left, key)\n    elif root.right is not None and key > root.val:\n        insert(root.right, key)\n    return root', 'traces': {}}}
2021-03-04 13:58:34.898423,insert,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root is None:\n        return False\n    if key == root.val:\n        return True\n    elif key < root.val:\n        return search(root.left, key)\n    elif key > root.val:\n        return search(root.right, key)\n    return False', 'traces': {}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root.left is None:\n        root.left = Node(key)\n        return\n    if root.right is None:\n        root.right = Node(key)\n    if root.left is not None and key < root.val:\n        insert(root.left, key)\n    elif root.right is not None and key > root.val:\n        insert(root.right, key)\n    return root', 'traces': {}}}
2021-03-04 13:58:43.179454,insert,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root is None:\n        return False\n    if key == root.val:\n        return True\n    elif key < root.val:\n        return search(root.left, key)\n    elif key > root.val:\n        return search(root.right, key)\n    return False', 'traces': {}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root.left is None:\n        root.left = Node(key)\n        return\n    if root.right is None:\n        root.right = Node(key)\n    if root.left is not None and key < root.val:\n        insert(root.left, key)\n    elif root.right is not None and key > root.val:\n        insert(root.right, key)\n    return root', 'traces': {}}}
2021-03-04 13:59:27.798859,insert,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root is None:\n        return False\n    if key == root.val:\n        return True\n    elif key < root.val:\n        return search(root.left, key)\n    elif key > root.val:\n        return search(root.right, key)\n    return False', 'traces': {}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root.left is None && key < root.val:\n        root.left = Node(key)\n        return\n    if root.right is None:\n        root.right = Node(key)\n    if root.left is not None and key < root.val:\n        insert(root.left, key)\n    elif root.right is not None and key > root.val:\n        insert(root.right, key)\n    return root', 'traces': {}}}
2021-03-04 13:59:35.059743,insert,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root is None:\n        return False\n    if key == root.val:\n        return True\n    elif key < root.val:\n        return search(root.left, key)\n    elif key > root.val:\n        return search(root.right, key)\n    return False', 'traces': {}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root.left is None and key < root.val:\n        root.left = Node(key)\n        return\n    if root.right is None:\n        root.right = Node(key)\n    if root.left is not None and key < root.val:\n        insert(root.left, key)\n    elif root.right is not None and key > root.val:\n        insert(root.right, key)\n    return root', 'traces': {}}}
2021-03-04 13:59:40.951555,insert,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root is None:\n        return False\n    if key == root.val:\n        return True\n    elif key < root.val:\n        return search(root.left, key)\n    elif key > root.val:\n        return search(root.right, key)\n    return False', 'traces': {}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root.left is None and key < root.val:\n        root.left = Node(key)\n        return\n    if root.right is None:\n        root.right = Node(key)\n        return\n    if root.left is not None and key < root.val:\n        insert(root.left, key)\n    elif root.right is not None and key > root.val:\n        insert(root.right, key)\n    return root', 'traces': {}}}
2021-03-04 13:59:56.169302,insert,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root is None:\n        return False\n    if key == root.val:\n        return True\n    elif key < root.val:\n        return search(root.left, key)\n    elif key > root.val:\n        return search(root.right, key)\n    return False', 'traces': {}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root.left is None and key < root.val:\n        root.left = Node(key)\n        return\n    if root.right is None:\n        root.right = Node(key)\n        return\n    if root.left is not None and key < root.val:\n        insert(root.left, key)\n    elif root.right is not None and key > root.val:\n        insert(root.right, key)\n    return root', 'traces': {}}}
2021-03-04 14:00:01.546930,insert,check-correct,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root is None:\n        return False\n    if key == root.val:\n        return True\n    elif key < root.val:\n        return search(root.left, key)\n    elif key > root.val:\n        return search(root.right, key)\n    return False', 'traces': {}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root.left is None and key < root.val:\n        root.left = Node(key)\n        return\n    if root.right is None:\n        root.right = Node(key)\n        return\n    if root.left is not None and key < root.val:\n        insert(root.left, key)\n    elif root.right is not None and key > root.val:\n        insert(root.right, key)\n    return root', 'traces': {}}}
2021-03-04 14:00:06.396101,insert,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root is None:\n        return False\n    if key == root.val:\n        return True\n    elif key < root.val:\n        return search(root.left, key)\n    elif key > root.val:\n        return search(root.right, key)\n    return False', 'traces': {}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root.left is None and key < root.val:\n        root.left = Node(key)\n        return\n    if root.right is None:\n        root.right = Node(key)\n        return\n    if root.left is not None and key < root.val:\n        insert(root.left, key)\n    elif root.right is not None and key > root.val:\n        insert(root.right, key)\n    return root', 'traces': {}}}
2021-03-04 14:00:11.188062,insert,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root is None:\n        return False\n    if key == root.val:\n        return True\n    elif key < root.val:\n        return search(root.left, key)\n    elif key > root.val:\n        return search(root.right, key)\n    return False', 'traces': {}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root.left is None and key < root.val:\n        root.left = Node(key)\n        return\n    if root.right is None:\n        root.right = Node(key)\n        return\n    if root.left is not None and key < root.val:\n        insert(root.left, key)\n    elif root.right is not None and key > root.val:\n        insert(root.right, key)\n    return root', 'traces': {}}}
2021-03-04 14:00:15.385260,insert,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root is None:\n        return False\n    if key == root.val:\n        return True\n    elif key < root.val:\n        return search(root.left, key)\n    elif key > root.val:\n        return search(root.right, key)\n    return False', 'traces': {}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root.left is None and key < root.val:\n        root.left = Node(key)\n        return\n    if root.right is None:\n        root.right = Node(key)\n        return\n    if root.left is not None and key < root.val:\n        insert(root.left, key)\n    elif root.right is not None and key > root.val:\n        insert(root.right, key)\n    return root', 'traces': {}}}
2021-03-04 14:00:19.048621,insert,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root is None:\n        return False\n    if key == root.val:\n        return True\n    elif key < root.val:\n        return search(root.left, key)\n    elif key > root.val:\n        return search(root.right, key)\n    return False', 'traces': {}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root.left is None and key < root.val:\n        root.left = Node(key)\n        return\n    if root.right is None:\n        root.right = Node(key)\n        return\n    if root.left is not None and key < root.val:\n        insert(root.left, key)\n    elif root.right is not None and key > root.val:\n        insert(root.right, key)\n    return root', 'traces': {}}}
2021-03-04 14:00:25.232426,insert,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root is None:\n        return False\n    if key == root.val:\n        return True\n    elif key < root.val:\n        return search(root.left, key)\n    elif key > root.val:\n        return search(root.right, key)\n    return False', 'traces': {}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root.left is None and key < root.val:\n        root.left = Node(key)\n        return\n    if root.right is None:\n        root.right = Node(key)\n        return\n    if root.left is not None and key < root.val:\n        insert(root.left, key)\n    elif root.right is not None and key > root.val:\n        insert(root.right, key)\n    return root', 'traces': {}}}
2021-03-04 14:00:28.440703,insert,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root is None:\n        return False\n    if key == root.val:\n        return True\n    elif key < root.val:\n        return search(root.left, key)\n    elif key > root.val:\n        return search(root.right, key)\n    return False', 'traces': {}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root.left is None and key < root.val:\n        root.left = Node(key)\n        return\n    if root.right is None:\n        root.right = Node(key)\n        return\n    if root.left is not None and key < root.val:\n        insert(root.left, key)\n    elif root.right is not None and key > root.val:\n        insert(root.right, key)\n    return root', 'traces': {}}}
2021-03-04 14:00:31.899735,insert,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root is None:\n        return False\n    if key == root.val:\n        return True\n    elif key < root.val:\n        return search(root.left, key)\n    elif key > root.val:\n        return search(root.right, key)\n    return False', 'traces': {}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root.left is None and key < root.val:\n        root.left = Node(key)\n        return\n    if root.right is None:\n        root.right = Node(key)\n        return\n    if root.left is not None and key < root.val:\n        insert(root.left, key)\n    elif root.right is not None and key > root.val:\n        insert(root.right, key)\n    return root', 'traces': {}}}
2021-03-04 14:00:34.590904,insert,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root is None:\n        return False\n    if key == root.val:\n        return True\n    elif key < root.val:\n        return search(root.left, key)\n    elif key > root.val:\n        return search(root.right, key)\n    return False', 'traces': {}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root.left is None and key < root.val:\n        root.left = Node(key)\n        return\n    if root.right is None:\n        root.right = Node(key)\n        return\n    if root.left is not None and key < root.val:\n        insert(root.left, key)\n    elif root.right is not None and key > root.val:\n        insert(root.right, key)\n    return root', 'traces': {}}}
2021-03-04 14:00:38.414455,insert,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root is None:\n        return False\n    if key == root.val:\n        return True\n    elif key < root.val:\n        return search(root.left, key)\n    elif key > root.val:\n        return search(root.right, key)\n    return False', 'traces': {}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root.left is None and key < root.val:\n        root.left = Node(key)\n        return\n    if root.right is None:\n        root.right = Node(key)\n        return\n    if root.left is not None and key < root.val:\n        insert(root.left, key)\n    elif root.right is not None and key > root.val:\n        insert(root.right, key)\n    return root', 'traces': {}}}
2021-03-04 14:01:05.503456,insert,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root is None:\n        return False\n    if key == root.val:\n        return True\n    elif key < root.val:\n        return search(root.left, key)\n    elif key > root.val:\n        return search(root.right, key)\n    return False', 'traces': {}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root.left is None and key < root.val:\n        root.left = Node(key)\n        return\n    if root.right is None:\n        root.right = Node(key)\n        return\n    if root.left is not None and key < root.val:\n        insert(root.left, key)\n    elif root.right is not None and key > root.val:\n        insert(root.right, key)\n    return root', 'traces': {}}}
2021-03-04 14:01:09.776778,insert,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root is None:\n        return False\n    if key == root.val:\n        return True\n    elif key < root.val:\n        return search(root.left, key)\n    elif key > root.val:\n        return search(root.right, key)\n    return False', 'traces': {}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root.left is None and key < root.val:\n        root.left = Node(key)\n        return\n    if root.right is None:\n        root.right = Node(key)\n        return\n    if root.left is not None and key < root.val:\n        insert(root.left, key)\n    elif root.right is not None and key > root.val:\n        insert(root.right, key)\n    return root', 'traces': {}}}
2021-03-04 14:01:13.492119,insert,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root is None:\n        return False\n    if key == root.val:\n        return True\n    elif key < root.val:\n        return search(root.left, key)\n    elif key > root.val:\n        return search(root.right, key)\n    return False', 'traces': {}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root.left is None and key < root.val:\n        root.left = Node(key)\n        return\n    if root.right is None:\n        root.right = Node(key)\n        return\n    if root.left is not None and key < root.val:\n        insert(root.left, key)\n    elif root.right is not None and key > root.val:\n        insert(root.right, key)\n    return root', 'traces': {}}}
2021-03-04 14:01:22.499795,insert,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root is None:\n        return False\n    if key == root.val:\n        return True\n    elif key < root.val:\n        return search(root.left, key)\n    elif key > root.val:\n        return search(root.right, key)\n    return False', 'traces': {}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root.left is None and key < root.val:\n        root.left = Node(key)\n        return\n    if root.right is None:\n        root.right = Node(key)\n        return\n    if root.left is not None and key < root.val:\n        insert(root.left, key)\n    elif root.right is not None and key > root.val:\n        insert(root.right, key)\n    return root', 'traces': {}}}
2021-03-04 14:01:27.879294,insert,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root is None:\n        return False\n    if key == root.val:\n        return True\n    elif key < root.val:\n        return search(root.left, key)\n    elif key > root.val:\n        return search(root.right, key)\n    return False', 'traces': {}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root.left is None and key < root.val:\n        root.left = Node(key)\n        return\n    if root.right is None:\n        root.right = Node(key)\n        return\n    if root.left is not None and key < root.val:\n        insert(root.left, key)\n    elif root.right is not None and key > root.val:\n        insert(root.right, key)\n    return root', 'traces': {}}}
2021-03-04 14:01:34.413481,insert,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root is None:\n        return False\n    if key == root.val:\n        return True\n    elif key < root.val:\n        return search(root.left, key)\n    elif key > root.val:\n        return search(root.right, key)\n    return False', 'traces': {}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root.left is None and key < root.val:\n        root.left = Node(key)\n        return\n    if root.right is None:\n        root.right = Node(key)\n        return\n    if root.left is not None and key < root.val:\n        insert(root.left, key)\n    elif root.right is not None and key > root.val:\n        insert(root.right, key)\n    return root', 'traces': {}}}
2021-03-04 14:01:41.320535,insert,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root is None:\n        return False\n    if key == root.val:\n        return True\n    elif key < root.val:\n        return search(root.left, key)\n    elif key > root.val:\n        return search(root.right, key)\n    return False', 'traces': {}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root.left is None and key < root.val:\n        root.left = Node(key)\n        return\n    if root.right is None:\n        root.right = Node(key)\n        return\n    if root.left is not None and key < root.val:\n        insert(root.left, key)\n    elif root.right is not None and key > root.val:\n        insert(root.right, key)\n    return root', 'traces': {}}}
2021-03-04 14:01:55.285210,insert,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root is None:\n        return False\n    if key == root.val:\n        return True\n    elif key < root.val:\n        return search(root.left, key)\n    elif key > root.val:\n        return search(root.right, key)\n    return False', 'traces': {}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root.left is None and key < root.val:\n        root.left = Node(key)\n        return\n    if root.right is None and key > root.val:\n        root.right = Node(key)\n        return\n    if root.left is not None and key < root.val:\n        insert(root.left, key)\n    elif root.right is not None and key > root.val:\n        insert(root.right, key)\n    return root', 'traces': {}}}
2021-03-04 14:02:00.213931,insert,check-correct,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root is None:\n        return False\n    if key == root.val:\n        return True\n    elif key < root.val:\n        return search(root.left, key)\n    elif key > root.val:\n        return search(root.right, key)\n    return False', 'traces': {}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root.left is None and key < root.val:\n        root.left = Node(key)\n        return\n    if root.right is None and key > root.val:\n        root.right = Node(key)\n        return\n    if root.left is not None and key < root.val:\n        insert(root.left, key)\n    elif root.right is not None and key > root.val:\n        insert(root.right, key)\n    return root', 'traces': {}}}
2021-03-04 14:02:01.573090,insert,check-correct,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root is None:\n        return False\n    if key == root.val:\n        return True\n    elif key < root.val:\n        return search(root.left, key)\n    elif key > root.val:\n        return search(root.right, key)\n    return False', 'traces': {}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root.left is None and key < root.val:\n        root.left = Node(key)\n        return\n    if root.right is None and key > root.val:\n        root.right = Node(key)\n        return\n    if root.left is not None and key < root.val:\n        insert(root.left, key)\n    elif root.right is not None and key > root.val:\n        insert(root.right, key)\n    return root', 'traces': {}}}
2021-03-04 14:02:01.879862,insert,check-correct,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root is None:\n        return False\n    if key == root.val:\n        return True\n    elif key < root.val:\n        return search(root.left, key)\n    elif key > root.val:\n        return search(root.right, key)\n    return False', 'traces': {}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root.left is None and key < root.val:\n        root.left = Node(key)\n        return\n    if root.right is None and key > root.val:\n        root.right = Node(key)\n        return\n    if root.left is not None and key < root.val:\n        insert(root.left, key)\n    elif root.right is not None and key > root.val:\n        insert(root.right, key)\n    return root', 'traces': {}}}
2021-03-04 14:02:01.943005,insert,check-correct,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root is None:\n        return False\n    if key == root.val:\n        return True\n    elif key < root.val:\n        return search(root.left, key)\n    elif key > root.val:\n        return search(root.right, key)\n    return False', 'traces': {}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root.left is None and key < root.val:\n        root.left = Node(key)\n        return\n    if root.right is None and key > root.val:\n        root.right = Node(key)\n        return\n    if root.left is not None and key < root.val:\n        insert(root.left, key)\n    elif root.right is not None and key > root.val:\n        insert(root.right, key)\n    return root', 'traces': {}}}
2021-03-04 14:02:06.854140,insert,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root is None:\n        return False\n    if key == root.val:\n        return True\n    elif key < root.val:\n        return search(root.left, key)\n    elif key > root.val:\n        return search(root.right, key)\n    return False', 'traces': {}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root.left is None and key < root.val:\n        root.left = Node(key)\n        return\n    if root.right is None and key > root.val:\n        root.right = Node(key)\n        return\n    if root.left is not None and key < root.val:\n        insert(root.left, key)\n    elif root.right is not None and key > root.val:\n        insert(root.right, key)\n    return root', 'traces': {}}}
2021-03-04 14:02:11.961177,insert,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root is None:\n        return False\n    if key == root.val:\n        return True\n    elif key < root.val:\n        return search(root.left, key)\n    elif key > root.val:\n        return search(root.right, key)\n    return False', 'traces': {}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root.left is None and key < root.val:\n        root.left = Node(key)\n        return\n    if root.right is None and key > root.val:\n        root.right = Node(key)\n        return\n    if root.left is not None and key < root.val:\n        insert(root.left, key)\n    elif root.right is not None and key > root.val:\n        insert(root.right, key)\n    return root', 'traces': {}}}
2021-03-04 14:02:17.173523,insert,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root is None:\n        return False\n    if key == root.val:\n        return True\n    elif key < root.val:\n        return search(root.left, key)\n    elif key > root.val:\n        return search(root.right, key)\n    return False', 'traces': {}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root.left is None and key < root.val:\n        root.left = Node(key)\n        return\n    if root.right is None and key > root.val:\n        root.right = Node(key)\n        return\n    if root.left is not None and key < root.val:\n        insert(root.left, key)\n    elif root.right is not None and key > root.val:\n        insert(root.right, key)\n    return root', 'traces': {}}}
2021-03-04 14:02:24.928473,insert,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root is None:\n        return False\n    if key == root.val:\n        return True\n    elif key < root.val:\n        return search(root.left, key)\n    elif key > root.val:\n        return search(root.right, key)\n    return False', 'traces': {}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root.left is None and key < root.val:\n        root.left = Node(key)\n        return\n    if root.right is None and key > root.val:\n        root.right = Node(key)\n        return\n    if root.left is not None and key < root.val:\n        insert(root.left, key)\n    elif root.right is not None and key > root.val:\n        insert(root.right, key)\n    return root', 'traces': {}}}
2021-03-04 14:02:28.560605,insert,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root is None:\n        return False\n    if key == root.val:\n        return True\n    elif key < root.val:\n        return search(root.left, key)\n    elif key > root.val:\n        return search(root.right, key)\n    return False', 'traces': {}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root.left is None and key < root.val:\n        root.left = Node(key)\n        return\n    if root.right is None and key > root.val:\n        root.right = Node(key)\n        return\n    if root.left is not None and key < root.val:\n        insert(root.left, key)\n    elif root.right is not None and key > root.val:\n        insert(root.right, key)\n    return root', 'traces': {}}}
2021-03-04 14:02:39.159655,insert,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root is None:\n        return False\n    if key == root.val:\n        return True\n    elif key < root.val:\n        return search(root.left, key)\n    elif key > root.val:\n        return search(root.right, key)\n    return False', 'traces': {}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root.left is None and key < root.val:\n        root.left = Node(key)\n        return\n    if root.right is None and key > root.val:\n        root.right = Node(key)\n        return\n    if root.left is not None and key < root.val:\n        insert(root.left, key)\n    elif root.right is not None and key > root.val:\n        insert(root.right, key)\n    return root', 'traces': {}}}
2021-03-04 14:02:46.761697,insert,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root is None:\n        return False\n    if key == root.val:\n        return True\n    elif key < root.val:\n        return search(root.left, key)\n    elif key > root.val:\n        return search(root.right, key)\n    return False', 'traces': {}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root.left is None and key < root.val:\n        root.left = Node(key)\n        return\n    if root.right is None and key > root.val:\n        root.right = Node(key)\n        return\n    if root.left is not None and key < root.val:\n        insert(root.left, key)\n    elif root.right is not None and key > root.val:\n        insert(root.right, key)\n    return root', 'traces': {}}}
2021-03-04 14:02:54.484294,insert,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root is None:\n        return False\n    if key == root.val:\n        return True\n    elif key < root.val:\n        return search(root.left, key)\n    elif key > root.val:\n        return search(root.right, key)\n    return False', 'traces': {}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root.left is None and key < root.val:\n        root.left = Node(key)\n        return\n    if root.right is None and key > root.val:\n        root.right = Node(key)\n        return\n    if root.left is not None and key < root.val:\n        insert(root.left, key)\n    elif root.right is not None and key > root.val:\n        insert(root.right, key)\n    return root', 'traces': {}}}
2021-03-04 14:03:03.092071,insert,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root is None:\n        return False\n    if key == root.val:\n        return True\n    elif key < root.val:\n        return search(root.left, key)\n    elif key > root.val:\n        return search(root.right, key)\n    return False', 'traces': {}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root.left is None and key < root.val:\n        root.left = Node(key)\n        return\n    if root.right is None and key > root.val:\n        root.right = Node(key)\n        return\n    if root.left is not None and key < root.val:\n        insert(root.left, key)\n    elif root.right is not None and key > root.val:\n        insert(root.right, key)\n    return root', 'traces': {}}}
2021-03-04 14:03:08.862074,insert,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root is None:\n        return False\n    if key == root.val:\n        return True\n    elif key < root.val:\n        return search(root.left, key)\n    elif key > root.val:\n        return search(root.right, key)\n    return False', 'traces': {}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root.left is None and key < root.val:\n        root.left = Node(key)\n        return\n    if root.right is None and key > root.val:\n        root.right = Node(key)\n        return\n    if root.left is not None and key < root.val:\n        insert(root.left, key)\n    elif root.right is not None and key > root.val:\n        insert(root.right, key)\n    return root', 'traces': {}}}
2021-03-04 14:03:13.327541,insert,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root is None:\n        return False\n    if key == root.val:\n        return True\n    elif key < root.val:\n        return search(root.left, key)\n    elif key > root.val:\n        return search(root.right, key)\n    return False', 'traces': {}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root.left is None and key < root.val:\n        root.left = Node(key)\n        return\n    if root.right is None and key > root.val:\n        root.right = Node(key)\n        return\n    if root.left is not None and key < root.val:\n        insert(root.left, key)\n    elif root.right is not None and key > root.val:\n        insert(root.right, key)\n    return root', 'traces': {}}}
2021-03-04 14:03:19.037678,insert,check-correct,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root is None:\n        return False\n    if key == root.val:\n        return True\n    elif key < root.val:\n        return search(root.left, key)\n    elif key > root.val:\n        return search(root.right, key)\n    return False', 'traces': {}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root.left is None and key < root.val:\n        root.left = Node(key)\n        return\n    if root.right is None and key > root.val:\n        root.right = Node(key)\n        return\n    if root.left is not None and key < root.val:\n        insert(root.left, key)\n    elif root.right is not None and key > root.val:\n        insert(root.right, key)\n    return root', 'traces': {}}}
2021-03-04 14:03:19.714486,insert,check-correct,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root is None:\n        return False\n    if key == root.val:\n        return True\n    elif key < root.val:\n        return search(root.left, key)\n    elif key > root.val:\n        return search(root.right, key)\n    return False', 'traces': {}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root.left is None and key < root.val:\n        root.left = Node(key)\n        return\n    if root.right is None and key > root.val:\n        root.right = Node(key)\n        return\n    if root.left is not None and key < root.val:\n        insert(root.left, key)\n    elif root.right is not None and key > root.val:\n        insert(root.right, key)\n    return root', 'traces': {}}}
2021-03-04 14:03:19.968964,insert,check-correct,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root is None:\n        return False\n    if key == root.val:\n        return True\n    elif key < root.val:\n        return search(root.left, key)\n    elif key > root.val:\n        return search(root.right, key)\n    return False', 'traces': {}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root.left is None and key < root.val:\n        root.left = Node(key)\n        return\n    if root.right is None and key > root.val:\n        root.right = Node(key)\n        return\n    if root.left is not None and key < root.val:\n        insert(root.left, key)\n    elif root.right is not None and key > root.val:\n        insert(root.right, key)\n    return root', 'traces': {}}}
2021-03-04 14:03:34.663461,insert,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root is None:\n        return False\n    if key == root.val:\n        return True\n    elif key < root.val:\n        return search(root.left, key)\n    elif key > root.val:\n        return search(root.right, key)\n    return False', 'traces': {}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root.left is None and key < root.val:\n        root.left = Node(key)\n        return\n    if root.right is None and key > root.val:\n        root.right = Node(key)\n        return\n    if root.left is not None and key < root.val:\n        return insert(root.left, key)\n    elif root.right is not None and key > root.val:\n        return insert(root.right, key)\n    return root', 'traces': {}}}
2021-03-04 14:03:41.764393,insert,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root is None:\n        return False\n    if key == root.val:\n        return True\n    elif key < root.val:\n        return search(root.left, key)\n    elif key > root.val:\n        return search(root.right, key)\n    return False', 'traces': {}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root.left is None and key < root.val:\n        root.left = Node(key)\n        return\n    if root.right is None and key > root.val:\n        root.right = Node(key)\n        return\n    if root.left is not None and key < root.val:\n        insert(root.left, key)\n    elif root.right is not None and key > root.val:\n        insert(root.right, key)\n    return root', 'traces': {}}}
2021-03-04 14:04:11.070312,insert,check-correct,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root is None:\n        return False\n    if key == root.val:\n        return True\n    elif key < root.val:\n        return search(root.left, key)\n    elif key > root.val:\n        return search(root.right, key)\n    return False', 'traces': {}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root.left is None and key <= root.val:\n        root.left = Node(key)\n        return\n    if root.right is None and key > root.val:\n        root.right = Node(key)\n        return\n    if root.left is not None and key <= root.val:\n        insert(root.left, key)\n    elif root.right is not None and key > root.val:\n        insert(root.right, key)\n    return root', 'traces': {}}}
2021-03-04 14:05:00.373477,insert,check-correct,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root is None:\n        return False\n    if key == root.val:\n        return True\n    elif key < root.val:\n        return search(root.left, key)\n    elif key > root.val:\n        return search(root.right, key)\n    return False', 'traces': {}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root.left is None and key < root.val:\n        root.left = Node(key)\n        return\n    if root.right is None and key > root.val:\n        root.right = Node(key)\n        return\n    if root.left is not None and key < root.val:\n        insert(root.left, key)\n    elif root.right is not None and key > root.val:\n        insert(root.right, key)\n    return root', 'traces': {}}}
2021-03-04 14:05:04.773703,insert,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root is None:\n        return False\n    if key == root.val:\n        return True\n    elif key < root.val:\n        return search(root.left, key)\n    elif key > root.val:\n        return search(root.right, key)\n    return False', 'traces': {}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root.left is None and key < root.val:\n        root.left = Node(key)\n        return\n    if root.right is None and key > root.val:\n        root.right = Node(key)\n        return\n    if root.left is not None and key < root.val:\n        insert(root.left, key)\n    elif root.right is not None and key > root.val:\n        insert(root.right, key)\n    return root', 'traces': {}}}
2021-03-04 14:05:08.921905,insert,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root is None:\n        return False\n    if key == root.val:\n        return True\n    elif key < root.val:\n        return search(root.left, key)\n    elif key > root.val:\n        return search(root.right, key)\n    return False', 'traces': {}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root.left is None and key < root.val:\n        root.left = Node(key)\n        return\n    if root.right is None and key > root.val:\n        root.right = Node(key)\n        return\n    if root.left is not None and key < root.val:\n        insert(root.left, key)\n    elif root.right is not None and key > root.val:\n        insert(root.right, key)\n    return root', 'traces': {}}}
2021-03-04 14:05:13.923653,insert,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root is None:\n        return False\n    if key == root.val:\n        return True\n    elif key < root.val:\n        return search(root.left, key)\n    elif key > root.val:\n        return search(root.right, key)\n    return False', 'traces': {}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root.left is None and key < root.val:\n        root.left = Node(key)\n        return\n    if root.right is None and key > root.val:\n        root.right = Node(key)\n        return\n    if root.left is not None and key < root.val:\n        insert(root.left, key)\n    elif root.right is not None and key > root.val:\n        insert(root.right, key)\n    return root', 'traces': {}}}
2021-03-04 14:05:29.641525,insert,check-correct,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root is None:\n        return False\n    if key == root.val:\n        return True\n    elif key < root.val:\n        return search(root.left, key)\n    elif key > root.val:\n        return search(root.right, key)\n    return False', 'traces': {}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root.left is None and key < root.val:\n        root.left = Node(key)\n        return\n    if root.right is None and key > root.val:\n        root.right = Node(key)\n        return\n    if root.left is not None and key < root.val:\n        insert(root.left, key)\n    elif root.right is not None and key > root.val:\n        insert(root.right, key)\n    return root', 'traces': {}}}
2021-03-04 14:05:56.416165,insert,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root is None:\n        return False\n    if key == root.val:\n        return True\n    elif key < root.val:\n        return search(root.left, key)\n    elif key > root.val:\n        return search(root.right, key)\n    return False', 'traces': {}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root.left is None and key < root.val:\n        root.left = Node(key)\n        return\n    if root.right is None and key > root.val:\n        root.right = Node(key)\n        return\n    if root.left is not None and key < root.val:\n        insert(root.left, key)\n    elif root.right is not None and key > root.val:\n        insert(root.right, key)\n    return root', 'traces': {}}}
2021-03-04 14:06:03.745751,insert,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root is None:\n        return False\n    if key == root.val:\n        return True\n    elif key < root.val:\n        return search(root.left, key)\n    elif key > root.val:\n        return search(root.right, key)\n    return False', 'traces': {}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root.left is None and key < root.val:\n        root.left = Node(key)\n        return\n    if root.right is None and key > root.val:\n        root.right = Node(key)\n        return\n    if root.left is not None and key < root.val:\n        insert(root.left, key)\n    elif root.right is not None and key > root.val:\n        insert(root.right, key)\n    return root', 'traces': {}}}
2021-03-04 14:06:06.499602,insert,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root is None:\n        return False\n    if key == root.val:\n        return True\n    elif key < root.val:\n        return search(root.left, key)\n    elif key > root.val:\n        return search(root.right, key)\n    return False', 'traces': {}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root.left is None and key < root.val:\n        root.left = Node(key)\n        return\n    if root.right is None and key > root.val:\n        root.right = Node(key)\n        return\n    if root.left is not None and key < root.val:\n        insert(root.left, key)\n    elif root.right is not None and key > root.val:\n        insert(root.right, key)\n    return root', 'traces': {}}}
2021-03-04 14:06:37.434799,insert,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root is None:\n        return False\n    if key == root.val:\n        return True\n    elif key < root.val:\n        return search(root.left, key)\n    elif key > root.val:\n        return search(root.right, key)\n    return False', 'traces': {}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root.left is None and key < root.val:\n        root.left = Node(key)\n        return\n    if root.right is None and key > root.val:\n        root.right = Node(key)\n        return\n    if root.left is not None and key < root.val:\n        insert(root.left, key)\n    elif root.right is not None and key > root.val:\n        insert(root.right, key)\n    return root', 'traces': {}}}
2021-03-04 14:06:42.062121,insert,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root is None:\n        return False\n    if key == root.val:\n        return True\n    elif key < root.val:\n        return search(root.left, key)\n    elif key > root.val:\n        return search(root.right, key)\n    return False', 'traces': {}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root.left is None and key < root.val:\n        root.left = Node(key)\n        return\n    if root.right is None and key > root.val:\n        root.right = Node(key)\n        return\n    if root.left is not None and key < root.val:\n        insert(root.left, key)\n    elif root.right is not None and key > root.val:\n        insert(root.right, key)\n    return root', 'traces': {}}}
2021-03-04 14:07:44.376864,insert,check-correct,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root is None:\n        return False\n    if key == root.val:\n        return True\n    elif key < root.val:\n        return search(root.left, key)\n    elif key > root.val:\n        return search(root.right, key)\n    return False', 'traces': {}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root is None:\n        root.val = key\n        return\n    if root.left is None and key < root.val:\n        root.left = Node(key)\n        return\n    if root.right is None and key > root.val:\n        root.right = Node(key)\n        return\n    if root.left is not None and key < root.val:\n        insert(root.left, key)\n    elif root.right is not None and key > root.val:\n        insert(root.right, key)\n    return root', 'traces': {}}}
2021-03-04 14:07:49.549385,insert,check-correct,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root is None:\n        return False\n    if key == root.val:\n        return True\n    elif key < root.val:\n        return search(root.left, key)\n    elif key > root.val:\n        return search(root.right, key)\n    return False', 'traces': {}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root is None:\n        root.val = key\n    \n    if root.left is None and key < root.val:\n        root.left = Node(key)\n        return\n    if root.right is None and key > root.val:\n        root.right = Node(key)\n        return\n    if root.left is not None and key < root.val:\n        insert(root.left, key)\n    elif root.right is not None and key > root.val:\n        insert(root.right, key)\n    return root', 'traces': {}}}
2021-03-04 14:08:10.657469,insert,check-correct,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root is None:\n        return False\n    if key == root.val:\n        return True\n    elif key < root.val:\n        return search(root.left, key)\n    elif key > root.val:\n        return search(root.right, key)\n    return False', 'traces': {}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root is None:\n        root = Node(key)\n    \n    if root.left is None and key < root.val:\n        root.left = Node(key)\n        return\n    if root.right is None and key > root.val:\n        root.right = Node(key)\n        return\n    if root.left is not None and key < root.val:\n        insert(root.left, key)\n    elif root.right is not None and key > root.val:\n        insert(root.right, key)\n    return root', 'traces': {}}}
2021-03-04 14:08:17.428370,insert,check-correct,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root is None:\n        return False\n    if key == root.val:\n        return True\n    elif key < root.val:\n        return search(root.left, key)\n    elif key > root.val:\n        return search(root.right, key)\n    return False', 'traces': {}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root is None:\n        root = Node(key)\n        return\n    if root.left is None and key < root.val:\n        root.left = Node(key)\n        return\n    if root.right is None and key > root.val:\n        root.right = Node(key)\n        return\n    if root.left is not None and key < root.val:\n        insert(root.left, key)\n    elif root.right is not None and key > root.val:\n        insert(root.right, key)\n    return root', 'traces': {}}}
2021-03-04 14:08:17.887780,insert,check-correct,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root is None:\n        return False\n    if key == root.val:\n        return True\n    elif key < root.val:\n        return search(root.left, key)\n    elif key > root.val:\n        return search(root.right, key)\n    return False', 'traces': {}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root is None:\n        root = Node(key)\n        return\n    if root.left is None and key < root.val:\n        root.left = Node(key)\n        return\n    if root.right is None and key > root.val:\n        root.right = Node(key)\n        return\n    if root.left is not None and key < root.val:\n        insert(root.left, key)\n    elif root.right is not None and key > root.val:\n        insert(root.right, key)\n    return root', 'traces': {}}}
2021-03-04 14:08:18.194444,insert,check-correct,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root is None:\n        return False\n    if key == root.val:\n        return True\n    elif key < root.val:\n        return search(root.left, key)\n    elif key > root.val:\n        return search(root.right, key)\n    return False', 'traces': {}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root is None:\n        root = Node(key)\n        return\n    if root.left is None and key < root.val:\n        root.left = Node(key)\n        return\n    if root.right is None and key > root.val:\n        root.right = Node(key)\n        return\n    if root.left is not None and key < root.val:\n        insert(root.left, key)\n    elif root.right is not None and key > root.val:\n        insert(root.right, key)\n    return root', 'traces': {}}}
2021-03-04 14:08:51.624941,insert,check-correct,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root is None:\n        return False\n    if key == root.val:\n        return True\n    elif key < root.val:\n        return search(root.left, key)\n    elif key > root.val:\n        return search(root.right, key)\n    return False', 'traces': {}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root is None:\n        root = Node(key)\n        return root\n    if root.left is None and key < root.val:\n        root.left = Node(key)\n        return\n    if root.right is None and key > root.val:\n        root.right = Node(key)\n        return\n    if root.left is not None and key < root.val:\n        insert(root.left, key)\n    elif root.right is not None and key > root.val:\n        insert(root.right, key)\n    return root', 'traces': {}}}
2021-03-04 14:10:09.925084,insert,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root is None:\n        return False\n    if key == root.val:\n        return True\n    elif key < root.val:\n        return search(root.left, key)\n    elif key > root.val:\n        return search(root.right, key)\n    return False', 'traces': {}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root is None:\n        root = Node(key)\n    if root.left is None and key < root.val:\n        root.left = Node(key)\n        return\n    if root.right is None and key > root.val:\n        root.right = Node(key)\n        return\n    if root.left is not None and key < root.val:\n        insert(root.left, key)\n    elif root.right is not None and key > root.val:\n        insert(root.right, key)\n    return root', 'traces': {}}}
2021-03-04 14:10:13.738599,insert,check-correct,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root is None:\n        return False\n    if key == root.val:\n        return True\n    elif key < root.val:\n        return search(root.left, key)\n    elif key > root.val:\n        return search(root.right, key)\n    return False', 'traces': {}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root is None:\n        root = Node(key)\n    if root.left is None and key < root.val:\n        root.left = Node(key)\n        return\n    if root.right is None and key > root.val:\n        root.right = Node(key)\n        return\n    if root.left is not None and key < root.val:\n        insert(root.left, key)\n    elif root.right is not None and key > root.val:\n        insert(root.right, key)\n    return root', 'traces': {}}}
2021-03-04 14:10:26.325002,insert,check-correct,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root is None:\n        return False\n    if key == root.val:\n        return True\n    elif key < root.val:\n        return search(root.left, key)\n    elif key > root.val:\n        return search(root.right, key)\n    return False', 'traces': {}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root is None:\n        root = Node(key)\n        return\n    if root.left is None and key < root.val:\n        root.left = Node(key)\n        return\n    if root.right is None and key > root.val:\n        root.right = Node(key)\n        return\n    if root.left is not None and key < root.val:\n        insert(root.left, key)\n    elif root.right is not None and key > root.val:\n        insert(root.right, key)\n    return root', 'traces': {}}}
2021-03-04 14:11:00.392479,insert,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root is None:\n        return False\n    if key == root.val:\n        return True\n    elif key < root.val:\n        return search(root.left, key)\n    elif key > root.val:\n        return search(root.right, key)\n    return False', 'traces': {}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    print(\'here\')\n    if root is None:\n        root = Node(key)\n        return\n    if root.left is None and key < root.val:\n        root.left = Node(key)\n        return\n    if root.right is None and key > root.val:\n        root.right = Node(key)\n        return\n    if root.left is not None and key < root.val:\n        insert(root.left, key)\n    elif root.right is not None and key > root.val:\n        insert(root.right, key)\n    return root', 'traces': {}}}
2021-03-04 14:11:23.302746,insert,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root is None:\n        return False\n    if key == root.val:\n        return True\n    elif key < root.val:\n        return search(root.left, key)\n    elif key > root.val:\n        return search(root.right, key)\n    return False', 'traces': {}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root is None:\n        print(\'here\')\n\n        root = Node(key)\n        return\n    if root.left is None and key < root.val:\n        root.left = Node(key)\n        return\n    if root.right is None and key > root.val:\n        root.right = Node(key)\n        return\n    if root.left is not None and key < root.val:\n        insert(root.left, key)\n    elif root.right is not None and key > root.val:\n        insert(root.right, key)\n    return root', 'traces': {}}}
2021-03-04 14:11:38.098545,insert,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root is None:\n        return False\n    if key == root.val:\n        return True\n    elif key < root.val:\n        return search(root.left, key)\n    elif key > root.val:\n        return search(root.right, key)\n    return False', 'traces': {}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root is None:\n        print(\'here\')\n        root = Node(key)\n        return\n    if root.left is None and key < root.val:\n        print(\'l\')\n        root.left = Node(key)\n        return\n    if root.right is None and key > root.val:\n        root.right = Node(key)\n        return\n    if root.left is not None and key < root.val:\n        insert(root.left, key)\n    elif root.right is not None and key > root.val:\n        insert(root.right, key)\n    return root', 'traces': {}}}
2021-03-04 14:12:18.483766,insert,check-correct,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root is None:\n        return False\n    if key == root.val:\n        return True\n    elif key < root.val:\n        return search(root.left, key)\n    elif key > root.val:\n        return search(root.right, key)\n    return False', 'traces': {}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root is None:\n        root = Node(key)\n        root.left = None\n        root.right = None\n    if root.left is None and key < root.val:\n        print(\'l\')\n        root.left = Node(key)\n        return\n    if root.right is None and key > root.val:\n        root.right = Node(key)\n        return\n    if root.left is not None and key < root.val:\n        insert(root.left, key)\n    elif root.right is not None and key > root.val:\n        insert(root.right, key)\n    return root', 'traces': {}}}
2021-03-04 14:12:30.169891,insert,check-correct,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root is None:\n        return False\n    if key == root.val:\n        return True\n    elif key < root.val:\n        return search(root.left, key)\n    elif key > root.val:\n        return search(root.right, key)\n    return False', 'traces': {}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root is None:\n        root = Node(key)\n        root.left = None\n        root.right = None\n    if root.left is None and key < root.val:\n        root.left = Node(key)\n        return\n    if root.right is None and key > root.val:\n        root.right = Node(key)\n        return\n    if root.left is not None and key < root.val:\n        insert(root.left, key)\n    elif root.right is not None and key > root.val:\n        insert(root.right, key)\n    return root', 'traces': {}}}
2021-03-04 14:14:29.279048,insert,check-correct,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root is None:\n        return False\n    if key == root.val:\n        return True\n    elif key < root.val:\n        return search(root.left, key)\n    elif key > root.val:\n        return search(root.right, key)\n    return False', 'traces': {}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root is None:\n        return None\n    if root.left is None and key < root.val:\n        root.left = Node(key)\n        return\n    if root.right is None and key > root.val:\n        root.right = Node(key)\n        return\n    if root.left is not None and key < root.val:\n        insert(root.left, key)\n    elif root.right is not None and key > root.val:\n        insert(root.right, key)\n    return root', 'traces': {}}}
2021-03-04 14:15:58.308220,insert,check-correct,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root is None:\n        return False\n    if key == root.val:\n        return True\n    elif key < root.val:\n        return search(root.left, key)\n    elif key > root.val:\n        return search(root.right, key)\n    return False', 'traces': {}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root is None:\n        root = Node(key)\n        return\n    if root.left is None and key < root.val:\n        root.left = Node(key)\n        return\n    if root.right is None and key > root.val:\n        root.right = Node(key)\n        return\n    if root.left is not None and key < root.val:\n        insert(root.left, key)\n    elif root.right is not None and key > root.val:\n        insert(root.right, key)\n    return root', 'traces': {}}}
2021-03-04 14:15:58.700244,insert,check-correct,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root is None:\n        return False\n    if key == root.val:\n        return True\n    elif key < root.val:\n        return search(root.left, key)\n    elif key > root.val:\n        return search(root.right, key)\n    return False', 'traces': {}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root is None:\n        root = Node(key)\n        return\n    if root.left is None and key < root.val:\n        root.left = Node(key)\n        return\n    if root.right is None and key > root.val:\n        root.right = Node(key)\n        return\n    if root.left is not None and key < root.val:\n        insert(root.left, key)\n    elif root.right is not None and key > root.val:\n        insert(root.right, key)\n    return root', 'traces': {}}}
2021-03-04 14:17:31.285147,insert,check-correct,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root is None:\n        return False\n    if key == root.val:\n        return True\n    elif key < root.val:\n        return search(root.left, key)\n    elif key > root.val:\n        return search(root.right, key)\n    return False', 'traces': {}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root is None:\n        root = Node(key)\n        return\n    if root.left is None and key <= root.val:\n        root.left = Node(key)\n        return\n    if root.right is None and key >= root.val:\n        root.right = Node(key)\n        return\n    if root.left is not None and key <= root.val:\n        insert(root.left, key)\n    elif root.right is not None and key >= root.val:\n        insert(root.right, key)\n    return root', 'traces': {}}}
2021-03-04 14:19:10.311517,insert,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root is None:\n        return False\n    if key == root.val:\n        return True\n    elif key < root.val:\n        return search(root.left, key)\n    elif key > root.val:\n        return search(root.right, key)\n    return False', 'traces': {}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root is None:\n        root = Node(key)\n        return\n    if root.left is None and key <= root.val:\n        root.left = Node(key)\n        return\n    if root.right is None and key >= root.val:\n        root.right = Node(key)\n        return\n    if root.left is not None and key <= root.val:\n        insert(root.left, key)\n    elif root.right is not None and key >= root.val:\n        insert(root.right, key)\n    return root', 'traces': {}}}
2021-03-04 14:19:13.741121,insert,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root is None:\n        return False\n    if key == root.val:\n        return True\n    elif key < root.val:\n        return search(root.left, key)\n    elif key > root.val:\n        return search(root.right, key)\n    return False', 'traces': {}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root is None:\n        root = Node(key)\n        return\n    if root.left is None and key <= root.val:\n        root.left = Node(key)\n        return\n    if root.right is None and key >= root.val:\n        root.right = Node(key)\n        return\n    if root.left is not None and key <= root.val:\n        insert(root.left, key)\n    elif root.right is not None and key >= root.val:\n        insert(root.right, key)\n    return root', 'traces': {}}}
2021-03-04 14:19:31.067101,insert,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root is None:\n        return False\n    if key == root.val:\n        return True\n    elif key < root.val:\n        return search(root.left, key)\n    elif key > root.val:\n        return search(root.right, key)\n    return False', 'traces': {}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    if key is None:\n        return root\n    if root is None:\n        root = Node(key)\n        return\n    if root.left is None and key <= root.val:\n        root.left = Node(key)\n        return\n    if root.right is None and key >= root.val:\n        root.right = Node(key)\n        return\n    if root.left is not None and key <= root.val:\n        insert(root.left, key)\n    elif root.right is not None and key >= root.val:\n        insert(root.right, key)\n    return root', 'traces': {}}}
2021-03-04 14:19:33.509674,insert,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root is None:\n        return False\n    if key == root.val:\n        return True\n    elif key < root.val:\n        return search(root.left, key)\n    elif key > root.val:\n        return search(root.right, key)\n    return False', 'traces': {}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    if key is None:\n        return root\n    if root is None:\n        root = Node(key)\n        return\n    if root.left is None and key <= root.val:\n        root.left = Node(key)\n        return\n    if root.right is None and key >= root.val:\n        root.right = Node(key)\n        return\n    if root.left is not None and key <= root.val:\n        insert(root.left, key)\n    elif root.right is not None and key >= root.val:\n        insert(root.right, key)\n    return root', 'traces': {}}}
2021-03-04 14:22:02.809986,insert,check-correct,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root is None:\n        return False\n    if key == root.val:\n        return True\n    elif key < root.val:\n        return search(root.left, key)\n    elif key > root.val:\n        return search(root.right, key)\n    return False', 'traces': {}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root is None:\n        root = Node(key)\n        root.val = key\n        \n    if root.left is None and key <= root.val:\n        root.left = Node(key)\n        return\n    if root.right is None and key >= root.val:\n        root.right = Node(key)\n        return\n    if root.left is not None and key <= root.val:\n        insert(root.left, key)\n    elif root.right is not None and key >= root.val:\n        insert(root.right, key)\n    return root', 'traces': {}}}
2021-03-04 14:22:08.459320,insert,check-correct,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root is None:\n        return False\n    if key == root.val:\n        return True\n    elif key < root.val:\n        return search(root.left, key)\n    elif key > root.val:\n        return search(root.right, key)\n    return False', 'traces': {}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root is None:\n        root = Node(key)\n        root.val = key\n        return\n    if root.left is None and key <= root.val:\n        root.left = Node(key)\n        return\n    if root.right is None and key >= root.val:\n        root.right = Node(key)\n        return\n    if root.left is not None and key <= root.val:\n        insert(root.left, key)\n    elif root.right is not None and key >= root.val:\n        insert(root.right, key)\n    return root', 'traces': {}}}
2021-03-04 14:22:14.752527,insert,check-correct,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root is None:\n        return False\n    if key == root.val:\n        return True\n    elif key < root.val:\n        return search(root.left, key)\n    elif key > root.val:\n        return search(root.right, key)\n    return False', 'traces': {}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root is None:\n        root = Node(key)\n        root.val = key\n        return\n    if root.left is None and key <= root.val:\n        root.left = Node(key)\n        return\n    if root.right is None and key >= root.val:\n        root.right = Node(key)\n        return\n    if root.left is not None and key <= root.val:\n        insert(root.left, key)\n    elif root.right is not None and key >= root.val:\n        insert(root.right, key)\n    return root', 'traces': {}}}
2021-03-04 14:22:21.112701,insert,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root is None:\n        return False\n    if key == root.val:\n        return True\n    elif key < root.val:\n        return search(root.left, key)\n    elif key > root.val:\n        return search(root.right, key)\n    return False', 'traces': {}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root is None:\n        root = Node(key)\n        root.val = key\n        return\n    if root.left is None and key <= root.val:\n        root.left = Node(key)\n        return\n    if root.right is None and key >= root.val:\n        root.right = Node(key)\n        return\n    if root.left is not None and key <= root.val:\n        insert(root.left, key)\n    elif root.right is not None and key >= root.val:\n        insert(root.right, key)\n    return root', 'traces': {}}}
2021-03-04 14:24:24.013661,insert,check-correct,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root is None:\n        return False\n    if key == root.val:\n        return True\n    elif key < root.val:\n        return search(root.left, key)\n    elif key > root.val:\n        return search(root.right, key)\n    return False', 'traces': {}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root is None:\n        root.val = key\n        return\n    if root.left is None and key <= root.val:\n        root.left = Node(key)\n        return\n    if root.right is None and key >= root.val:\n        root.right = Node(key)\n        return\n    if root.left is not None and key <= root.val:\n        insert(root.left, key)\n    elif root.right is not None and key >= root.val:\n        insert(root.right, key)\n    return root', 'traces': {}}}
2021-03-04 14:24:58.173398,insert,check-correct,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root is None:\n        return False\n    if key == root.val:\n        return True\n    elif key < root.val:\n        return search(root.left, key)\n    elif key > root.val:\n        return search(root.right, key)\n    return False', 'traces': {}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root is None:\n        root = Node(key)\n        return\n    if root.left is None and key <= root.val:\n        root.left = Node(key)\n        return\n    if root.right is None and key > root.val:\n        root.right = Node(key)\n        return\n    if root.left is not None and key <= root.val:\n        insert(root.left, key)\n    elif root.right is not None and key > root.val:\n        insert(root.right, key)\n    return root', 'traces': {}}}
2021-03-04 14:25:02.119827,insert,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root is None:\n        return False\n    if key == root.val:\n        return True\n    elif key < root.val:\n        return search(root.left, key)\n    elif key > root.val:\n        return search(root.right, key)\n    return False', 'traces': {}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root is None:\n        root = Node(key)\n        return\n    if root.left is None and key <= root.val:\n        root.left = Node(key)\n        return\n    if root.right is None and key > root.val:\n        root.right = Node(key)\n        return\n    if root.left is not None and key <= root.val:\n        insert(root.left, key)\n    elif root.right is not None and key > root.val:\n        insert(root.right, key)\n    return root', 'traces': {}}}
2021-03-04 14:25:42.426786,insert,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root is None:\n        return False\n    if key == root.val:\n        return True\n    elif key < root.val:\n        return search(root.left, key)\n    elif key > root.val:\n        return search(root.right, key)\n    return False', 'traces': {}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root is None:\n        root = Node(key)\n        return\n    if key == root.val:\n        return\n    if root.left is None and key <= root.val:\n        root.left = Node(key)\n        return\n    if root.right is None and key > root.val:\n        root.right = Node(key)\n        return\n    if root.left is not None and key <= root.val:\n        insert(root.left, key)\n    elif root.right is not None and key > root.val:\n        insert(root.right, key)\n    return root', 'traces': {}}}
2021-03-04 14:26:06.968970,insert,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root is None:\n        return False\n    if key == root.val:\n        return True\n    elif key < root.val:\n        return search(root.left, key)\n    elif key > root.val:\n        return search(root.right, key)\n    return False', 'traces': {}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root is None:\n        root = Node(key)\n        return\n    if key == root.val:\n        return root\n    if root.left is None and key <= root.val:\n        root.left = Node(key)\n        return\n    if root.right is None and key > root.val:\n        root.right = Node(key)\n        return\n    if root.left is not None and key <= root.val:\n        insert(root.left, key)\n    elif root.right is not None and key > root.val:\n        insert(root.right, key)\n    return root', 'traces': {}}}
2021-03-04 14:26:13.762392,insert,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root is None:\n        return False\n    if key == root.val:\n        return True\n    elif key < root.val:\n        return search(root.left, key)\n    elif key > root.val:\n        return search(root.right, key)\n    return False', 'traces': {}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root is None:\n        root = Node(key)\n        return\n    if key == root.val:\n        return root\n    if root.left is None and key <= root.val:\n        root.left = Node(key)\n        return\n    if root.right is None and key > root.val:\n        root.right = Node(key)\n        return\n    if root.left is not None and key <= root.val:\n        insert(root.left, key)\n    elif root.right is not None and key > root.val:\n        insert(root.right, key)\n    return root', 'traces': {}}}
2021-03-04 14:26:16.503804,insert,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root is None:\n        return False\n    if key == root.val:\n        return True\n    elif key < root.val:\n        return search(root.left, key)\n    elif key > root.val:\n        return search(root.right, key)\n    return False', 'traces': {}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root is None:\n        root = Node(key)\n        return\n    if key == root.val:\n        return root\n    if root.left is None and key <= root.val:\n        root.left = Node(key)\n        return\n    if root.right is None and key > root.val:\n        root.right = Node(key)\n        return\n    if root.left is not None and key <= root.val:\n        insert(root.left, key)\n    elif root.right is not None and key > root.val:\n        insert(root.right, key)\n    return root', 'traces': {}}}
2021-03-04 14:26:18.268665,insert,run,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root is None:\n        return False\n    if key == root.val:\n        return True\n    elif key < root.val:\n        return search(root.left, key)\n    elif key > root.val:\n        return search(root.right, key)\n    return False', 'traces': {}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root is None:\n        root = Node(key)\n        return\n    if key == root.val:\n        return root\n    if root.left is None and key <= root.val:\n        root.left = Node(key)\n        return\n    if root.right is None and key > root.val:\n        root.right = Node(key)\n        return\n    if root.left is not None and key <= root.val:\n        insert(root.left, key)\n    elif root.right is not None and key > root.val:\n        insert(root.right, key)\n    return root', 'traces': {}}}
2021-03-04 14:26:20.553873,insert,check-correct,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root is None:\n        return False\n    if key == root.val:\n        return True\n    elif key < root.val:\n        return search(root.left, key)\n    elif key > root.val:\n        return search(root.right, key)\n    return False', 'traces': {}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root is None:\n        root = Node(key)\n        return\n    if key == root.val:\n        return root\n    if root.left is None and key <= root.val:\n        root.left = Node(key)\n        return\n    if root.right is None and key > root.val:\n        root.right = Node(key)\n        return\n    if root.left is not None and key <= root.val:\n        insert(root.left, key)\n    elif root.right is not None and key > root.val:\n        insert(root.right, key)\n    return root', 'traces': {}}}
2021-03-04 14:26:21.098883,insert,check-correct,{'search': {'code': '# Returns True if "key" can be found in the given binary search tree ("root").\n# Otherwise, returns False.\ndef search(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root is None:\n        return False\n    if key == root.val:\n        return True\n    elif key < root.val:\n        return search(root.left, key)\n    elif key > root.val:\n        return search(root.right, key)\n    return False', 'traces': {}}, 'insert': {'code': '# Inserts a new node with the value "key" into the given binary search tree ("root").\n# You can assume "key" does not appear in "root".\ndef insert(root, key):\n    # vvvvv Write your code here. vvvvv\n    if root is None:\n        root = Node(key)\n        return\n    if key == root.val:\n        return root\n    if root.left is None and key <= root.val:\n        root.left = Node(key)\n        return\n    if root.right is None and key > root.val:\n        root.right = Node(key)\n        return\n    if root.left is not None and key <= root.val:\n        insert(root.left, key)\n    elif root.right is not None and key > root.val:\n        insert(root.right, key)\n    return root', 'traces': {}}}
